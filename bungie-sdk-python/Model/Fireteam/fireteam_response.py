# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FireteamResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'summary': 'FireteamSummary',
        'members': 'list[FireteamMember]',
        'alternates': 'list[FireteamMember]'
    }

    attribute_map = {
        'summary': 'Summary',
        'members': 'Members',
        'alternates': 'Alternates'
    }

    def __init__(self, summary=None, members=None, alternates=None):  # noqa: E501
        """FireteamResponse - a model defined in OpenAPI"""  # noqa: E501

        self._summary = None
        self._members = None
        self._alternates = None
        self.discriminator = None

        if summary is not None:
            self.summary = summary
        if members is not None:
            self.members = members
        if alternates is not None:
            self.alternates = alternates

    @property
    def summary(self):
        """Gets the summary of this FireteamResponse.  # noqa: E501


        :return: The summary of this FireteamResponse.  # noqa: E501
        :rtype: FireteamSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this FireteamResponse.


        :param summary: The summary of this FireteamResponse.  # noqa: E501
        :type: FireteamSummary
        """

        self._summary = summary

    @property
    def members(self):
        """Gets the members of this FireteamResponse.  # noqa: E501


        :return: The members of this FireteamResponse.  # noqa: E501
        :rtype: list[FireteamMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this FireteamResponse.


        :param members: The members of this FireteamResponse.  # noqa: E501
        :type: list[FireteamMember]
        """

        self._members = members

    @property
    def alternates(self):
        """Gets the alternates of this FireteamResponse.  # noqa: E501


        :return: The alternates of this FireteamResponse.  # noqa: E501
        :rtype: list[FireteamMember]
        """
        return self._alternates

    @alternates.setter
    def alternates(self, alternates):
        """Sets the alternates of this FireteamResponse.


        :param alternates: The alternates of this FireteamResponse.  # noqa: E501
        :type: list[FireteamMember]
        """

        self._alternates = alternates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FireteamResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
