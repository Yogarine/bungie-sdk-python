# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FireteamSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fireteam_id': 'int',
        'group_id': 'int',
        'platform': 'int',
        'activity_type': 'int',
        'is_immediate': 'bool',
        'scheduled_time': 'datetime',
        'owner_membership_id': 'int',
        'player_slot_count': 'int',
        'alternate_slot_count': 'int',
        'available_player_slot_count': 'int',
        'available_alternate_slot_count': 'int',
        'title': 'str',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'is_public': 'bool',
        'locale': 'str',
        'is_valid': 'bool',
        'date_player_modified': 'datetime'
    }

    attribute_map = {
        'fireteam_id': 'fireteamId',
        'group_id': 'groupId',
        'platform': 'platform',
        'activity_type': 'activityType',
        'is_immediate': 'isImmediate',
        'scheduled_time': 'scheduledTime',
        'owner_membership_id': 'ownerMembershipId',
        'player_slot_count': 'playerSlotCount',
        'alternate_slot_count': 'alternateSlotCount',
        'available_player_slot_count': 'availablePlayerSlotCount',
        'available_alternate_slot_count': 'availableAlternateSlotCount',
        'title': 'title',
        'date_created': 'dateCreated',
        'date_modified': 'dateModified',
        'is_public': 'isPublic',
        'locale': 'locale',
        'is_valid': 'isValid',
        'date_player_modified': 'datePlayerModified'
    }

    def __init__(self, fireteam_id=None, group_id=None, platform=None, activity_type=None, is_immediate=None, scheduled_time=None, owner_membership_id=None, player_slot_count=None, alternate_slot_count=None, available_player_slot_count=None, available_alternate_slot_count=None, title=None, date_created=None, date_modified=None, is_public=None, locale=None, is_valid=None, date_player_modified=None):  # noqa: E501
        """FireteamSummary - a model defined in OpenAPI"""  # noqa: E501

        self._fireteam_id = None
        self._group_id = None
        self._platform = None
        self._activity_type = None
        self._is_immediate = None
        self._scheduled_time = None
        self._owner_membership_id = None
        self._player_slot_count = None
        self._alternate_slot_count = None
        self._available_player_slot_count = None
        self._available_alternate_slot_count = None
        self._title = None
        self._date_created = None
        self._date_modified = None
        self._is_public = None
        self._locale = None
        self._is_valid = None
        self._date_player_modified = None
        self.discriminator = None

        if fireteam_id is not None:
            self.fireteam_id = fireteam_id
        if group_id is not None:
            self.group_id = group_id
        if platform is not None:
            self.platform = platform
        if activity_type is not None:
            self.activity_type = activity_type
        if is_immediate is not None:
            self.is_immediate = is_immediate
        self.scheduled_time = scheduled_time
        if owner_membership_id is not None:
            self.owner_membership_id = owner_membership_id
        if player_slot_count is not None:
            self.player_slot_count = player_slot_count
        self.alternate_slot_count = alternate_slot_count
        if available_player_slot_count is not None:
            self.available_player_slot_count = available_player_slot_count
        if available_alternate_slot_count is not None:
            self.available_alternate_slot_count = available_alternate_slot_count
        if title is not None:
            self.title = title
        if date_created is not None:
            self.date_created = date_created
        self.date_modified = date_modified
        if is_public is not None:
            self.is_public = is_public
        if locale is not None:
            self.locale = locale
        if is_valid is not None:
            self.is_valid = is_valid
        if date_player_modified is not None:
            self.date_player_modified = date_player_modified

    @property
    def fireteam_id(self):
        """Gets the fireteam_id of this FireteamSummary.  # noqa: E501


        :return: The fireteam_id of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._fireteam_id

    @fireteam_id.setter
    def fireteam_id(self, fireteam_id):
        """Sets the fireteam_id of this FireteamSummary.


        :param fireteam_id: The fireteam_id of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._fireteam_id = fireteam_id

    @property
    def group_id(self):
        """Gets the group_id of this FireteamSummary.  # noqa: E501


        :return: The group_id of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this FireteamSummary.


        :param group_id: The group_id of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def platform(self):
        """Gets the platform of this FireteamSummary.  # noqa: E501


        :return: The platform of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this FireteamSummary.


        :param platform: The platform of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._platform = platform

    @property
    def activity_type(self):
        """Gets the activity_type of this FireteamSummary.  # noqa: E501


        :return: The activity_type of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this FireteamSummary.


        :param activity_type: The activity_type of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._activity_type = activity_type

    @property
    def is_immediate(self):
        """Gets the is_immediate of this FireteamSummary.  # noqa: E501


        :return: The is_immediate of this FireteamSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_immediate

    @is_immediate.setter
    def is_immediate(self, is_immediate):
        """Sets the is_immediate of this FireteamSummary.


        :param is_immediate: The is_immediate of this FireteamSummary.  # noqa: E501
        :type: bool
        """

        self._is_immediate = is_immediate

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this FireteamSummary.  # noqa: E501


        :return: The scheduled_time of this FireteamSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this FireteamSummary.


        :param scheduled_time: The scheduled_time of this FireteamSummary.  # noqa: E501
        :type: datetime
        """

        self._scheduled_time = scheduled_time

    @property
    def owner_membership_id(self):
        """Gets the owner_membership_id of this FireteamSummary.  # noqa: E501


        :return: The owner_membership_id of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._owner_membership_id

    @owner_membership_id.setter
    def owner_membership_id(self, owner_membership_id):
        """Sets the owner_membership_id of this FireteamSummary.


        :param owner_membership_id: The owner_membership_id of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._owner_membership_id = owner_membership_id

    @property
    def player_slot_count(self):
        """Gets the player_slot_count of this FireteamSummary.  # noqa: E501


        :return: The player_slot_count of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._player_slot_count

    @player_slot_count.setter
    def player_slot_count(self, player_slot_count):
        """Sets the player_slot_count of this FireteamSummary.


        :param player_slot_count: The player_slot_count of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._player_slot_count = player_slot_count

    @property
    def alternate_slot_count(self):
        """Gets the alternate_slot_count of this FireteamSummary.  # noqa: E501


        :return: The alternate_slot_count of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._alternate_slot_count

    @alternate_slot_count.setter
    def alternate_slot_count(self, alternate_slot_count):
        """Sets the alternate_slot_count of this FireteamSummary.


        :param alternate_slot_count: The alternate_slot_count of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._alternate_slot_count = alternate_slot_count

    @property
    def available_player_slot_count(self):
        """Gets the available_player_slot_count of this FireteamSummary.  # noqa: E501


        :return: The available_player_slot_count of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._available_player_slot_count

    @available_player_slot_count.setter
    def available_player_slot_count(self, available_player_slot_count):
        """Sets the available_player_slot_count of this FireteamSummary.


        :param available_player_slot_count: The available_player_slot_count of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._available_player_slot_count = available_player_slot_count

    @property
    def available_alternate_slot_count(self):
        """Gets the available_alternate_slot_count of this FireteamSummary.  # noqa: E501


        :return: The available_alternate_slot_count of this FireteamSummary.  # noqa: E501
        :rtype: int
        """
        return self._available_alternate_slot_count

    @available_alternate_slot_count.setter
    def available_alternate_slot_count(self, available_alternate_slot_count):
        """Sets the available_alternate_slot_count of this FireteamSummary.


        :param available_alternate_slot_count: The available_alternate_slot_count of this FireteamSummary.  # noqa: E501
        :type: int
        """

        self._available_alternate_slot_count = available_alternate_slot_count

    @property
    def title(self):
        """Gets the title of this FireteamSummary.  # noqa: E501


        :return: The title of this FireteamSummary.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FireteamSummary.


        :param title: The title of this FireteamSummary.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def date_created(self):
        """Gets the date_created of this FireteamSummary.  # noqa: E501


        :return: The date_created of this FireteamSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this FireteamSummary.


        :param date_created: The date_created of this FireteamSummary.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this FireteamSummary.  # noqa: E501


        :return: The date_modified of this FireteamSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this FireteamSummary.


        :param date_modified: The date_modified of this FireteamSummary.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def is_public(self):
        """Gets the is_public of this FireteamSummary.  # noqa: E501


        :return: The is_public of this FireteamSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this FireteamSummary.


        :param is_public: The is_public of this FireteamSummary.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def locale(self):
        """Gets the locale of this FireteamSummary.  # noqa: E501


        :return: The locale of this FireteamSummary.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this FireteamSummary.


        :param locale: The locale of this FireteamSummary.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def is_valid(self):
        """Gets the is_valid of this FireteamSummary.  # noqa: E501


        :return: The is_valid of this FireteamSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this FireteamSummary.


        :param is_valid: The is_valid of this FireteamSummary.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def date_player_modified(self):
        """Gets the date_player_modified of this FireteamSummary.  # noqa: E501


        :return: The date_player_modified of this FireteamSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._date_player_modified

    @date_player_modified.setter
    def date_player_modified(self, date_player_modified):
        """Sets the date_player_modified of this FireteamSummary.


        :param date_player_modified: The date_player_modified of this FireteamSummary.  # noqa: E501
        :type: datetime
        """

        self._date_player_modified = date_player_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FireteamSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
