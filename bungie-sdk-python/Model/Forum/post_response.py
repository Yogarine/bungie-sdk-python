# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PostResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'last_reply_timestamp': 'datetime',
        'is_pinned': 'bool',
        'url_media_type': 'int',
        'thumbnail': 'str',
        'popularity': 'int',
        'is_active': 'bool',
        'is_announcement': 'bool',
        'user_rating': 'int',
        'user_has_rated': 'bool',
        'user_has_muted_post': 'bool',
        'latest_reply_post_id': 'int',
        'latest_reply_author_id': 'int',
        'ignore_status': 'IgnoreResponse',
        'locale': 'str'
    }

    attribute_map = {
        'last_reply_timestamp': 'lastReplyTimestamp',
        'is_pinned': 'IsPinned',
        'url_media_type': 'urlMediaType',
        'thumbnail': 'thumbnail',
        'popularity': 'popularity',
        'is_active': 'isActive',
        'is_announcement': 'isAnnouncement',
        'user_rating': 'userRating',
        'user_has_rated': 'userHasRated',
        'user_has_muted_post': 'userHasMutedPost',
        'latest_reply_post_id': 'latestReplyPostId',
        'latest_reply_author_id': 'latestReplyAuthorId',
        'ignore_status': 'ignoreStatus',
        'locale': 'locale'
    }

    def __init__(self, last_reply_timestamp=None, is_pinned=None, url_media_type=None, thumbnail=None, popularity=None, is_active=None, is_announcement=None, user_rating=None, user_has_rated=None, user_has_muted_post=None, latest_reply_post_id=None, latest_reply_author_id=None, ignore_status=None, locale=None):  # noqa: E501
        """PostResponse - a model defined in OpenAPI"""  # noqa: E501

        self._last_reply_timestamp = None
        self._is_pinned = None
        self._url_media_type = None
        self._thumbnail = None
        self._popularity = None
        self._is_active = None
        self._is_announcement = None
        self._user_rating = None
        self._user_has_rated = None
        self._user_has_muted_post = None
        self._latest_reply_post_id = None
        self._latest_reply_author_id = None
        self._ignore_status = None
        self._locale = None
        self.discriminator = None

        if last_reply_timestamp is not None:
            self.last_reply_timestamp = last_reply_timestamp
        if is_pinned is not None:
            self.is_pinned = is_pinned
        if url_media_type is not None:
            self.url_media_type = url_media_type
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if popularity is not None:
            self.popularity = popularity
        if is_active is not None:
            self.is_active = is_active
        if is_announcement is not None:
            self.is_announcement = is_announcement
        if user_rating is not None:
            self.user_rating = user_rating
        if user_has_rated is not None:
            self.user_has_rated = user_has_rated
        if user_has_muted_post is not None:
            self.user_has_muted_post = user_has_muted_post
        if latest_reply_post_id is not None:
            self.latest_reply_post_id = latest_reply_post_id
        if latest_reply_author_id is not None:
            self.latest_reply_author_id = latest_reply_author_id
        if ignore_status is not None:
            self.ignore_status = ignore_status
        if locale is not None:
            self.locale = locale

    @property
    def last_reply_timestamp(self):
        """Gets the last_reply_timestamp of this PostResponse.  # noqa: E501


        :return: The last_reply_timestamp of this PostResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_reply_timestamp

    @last_reply_timestamp.setter
    def last_reply_timestamp(self, last_reply_timestamp):
        """Sets the last_reply_timestamp of this PostResponse.


        :param last_reply_timestamp: The last_reply_timestamp of this PostResponse.  # noqa: E501
        :type: datetime
        """

        self._last_reply_timestamp = last_reply_timestamp

    @property
    def is_pinned(self):
        """Gets the is_pinned of this PostResponse.  # noqa: E501


        :return: The is_pinned of this PostResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_pinned

    @is_pinned.setter
    def is_pinned(self, is_pinned):
        """Sets the is_pinned of this PostResponse.


        :param is_pinned: The is_pinned of this PostResponse.  # noqa: E501
        :type: bool
        """

        self._is_pinned = is_pinned

    @property
    def url_media_type(self):
        """Gets the url_media_type of this PostResponse.  # noqa: E501


        :return: The url_media_type of this PostResponse.  # noqa: E501
        :rtype: int
        """
        return self._url_media_type

    @url_media_type.setter
    def url_media_type(self, url_media_type):
        """Sets the url_media_type of this PostResponse.


        :param url_media_type: The url_media_type of this PostResponse.  # noqa: E501
        :type: int
        """

        self._url_media_type = url_media_type

    @property
    def thumbnail(self):
        """Gets the thumbnail of this PostResponse.  # noqa: E501


        :return: The thumbnail of this PostResponse.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this PostResponse.


        :param thumbnail: The thumbnail of this PostResponse.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def popularity(self):
        """Gets the popularity of this PostResponse.  # noqa: E501


        :return: The popularity of this PostResponse.  # noqa: E501
        :rtype: int
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this PostResponse.


        :param popularity: The popularity of this PostResponse.  # noqa: E501
        :type: int
        """

        self._popularity = popularity

    @property
    def is_active(self):
        """Gets the is_active of this PostResponse.  # noqa: E501


        :return: The is_active of this PostResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PostResponse.


        :param is_active: The is_active of this PostResponse.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_announcement(self):
        """Gets the is_announcement of this PostResponse.  # noqa: E501


        :return: The is_announcement of this PostResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_announcement

    @is_announcement.setter
    def is_announcement(self, is_announcement):
        """Sets the is_announcement of this PostResponse.


        :param is_announcement: The is_announcement of this PostResponse.  # noqa: E501
        :type: bool
        """

        self._is_announcement = is_announcement

    @property
    def user_rating(self):
        """Gets the user_rating of this PostResponse.  # noqa: E501


        :return: The user_rating of this PostResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_rating

    @user_rating.setter
    def user_rating(self, user_rating):
        """Sets the user_rating of this PostResponse.


        :param user_rating: The user_rating of this PostResponse.  # noqa: E501
        :type: int
        """

        self._user_rating = user_rating

    @property
    def user_has_rated(self):
        """Gets the user_has_rated of this PostResponse.  # noqa: E501


        :return: The user_has_rated of this PostResponse.  # noqa: E501
        :rtype: bool
        """
        return self._user_has_rated

    @user_has_rated.setter
    def user_has_rated(self, user_has_rated):
        """Sets the user_has_rated of this PostResponse.


        :param user_has_rated: The user_has_rated of this PostResponse.  # noqa: E501
        :type: bool
        """

        self._user_has_rated = user_has_rated

    @property
    def user_has_muted_post(self):
        """Gets the user_has_muted_post of this PostResponse.  # noqa: E501


        :return: The user_has_muted_post of this PostResponse.  # noqa: E501
        :rtype: bool
        """
        return self._user_has_muted_post

    @user_has_muted_post.setter
    def user_has_muted_post(self, user_has_muted_post):
        """Sets the user_has_muted_post of this PostResponse.


        :param user_has_muted_post: The user_has_muted_post of this PostResponse.  # noqa: E501
        :type: bool
        """

        self._user_has_muted_post = user_has_muted_post

    @property
    def latest_reply_post_id(self):
        """Gets the latest_reply_post_id of this PostResponse.  # noqa: E501


        :return: The latest_reply_post_id of this PostResponse.  # noqa: E501
        :rtype: int
        """
        return self._latest_reply_post_id

    @latest_reply_post_id.setter
    def latest_reply_post_id(self, latest_reply_post_id):
        """Sets the latest_reply_post_id of this PostResponse.


        :param latest_reply_post_id: The latest_reply_post_id of this PostResponse.  # noqa: E501
        :type: int
        """

        self._latest_reply_post_id = latest_reply_post_id

    @property
    def latest_reply_author_id(self):
        """Gets the latest_reply_author_id of this PostResponse.  # noqa: E501


        :return: The latest_reply_author_id of this PostResponse.  # noqa: E501
        :rtype: int
        """
        return self._latest_reply_author_id

    @latest_reply_author_id.setter
    def latest_reply_author_id(self, latest_reply_author_id):
        """Sets the latest_reply_author_id of this PostResponse.


        :param latest_reply_author_id: The latest_reply_author_id of this PostResponse.  # noqa: E501
        :type: int
        """

        self._latest_reply_author_id = latest_reply_author_id

    @property
    def ignore_status(self):
        """Gets the ignore_status of this PostResponse.  # noqa: E501


        :return: The ignore_status of this PostResponse.  # noqa: E501
        :rtype: IgnoreResponse
        """
        return self._ignore_status

    @ignore_status.setter
    def ignore_status(self, ignore_status):
        """Sets the ignore_status of this PostResponse.


        :param ignore_status: The ignore_status of this PostResponse.  # noqa: E501
        :type: IgnoreResponse
        """

        self._ignore_status = ignore_status

    @property
    def locale(self):
        """Gets the locale of this PostResponse.  # noqa: E501


        :return: The locale of this PostResponse.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostResponse.


        :param locale: The locale of this PostResponse.  # noqa: E501
        :type: str
        """

        self._locale = locale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
