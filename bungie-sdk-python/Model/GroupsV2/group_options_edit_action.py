# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GroupOptionsEditAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'invite_permission_override': 'bool',
        'update_culture_permission_override': 'bool',
        'host_guided_game_permission_override': 'int',
        'update_banner_permission_override': 'bool',
        'join_level': 'int'
    }

    attribute_map = {
        'invite_permission_override': 'InvitePermissionOverride',
        'update_culture_permission_override': 'UpdateCulturePermissionOverride',
        'host_guided_game_permission_override': 'HostGuidedGamePermissionOverride',
        'update_banner_permission_override': 'UpdateBannerPermissionOverride',
        'join_level': 'JoinLevel'
    }

    def __init__(self, invite_permission_override=None, update_culture_permission_override=None, host_guided_game_permission_override=None, update_banner_permission_override=None, join_level=None):  # noqa: E501
        """GroupOptionsEditAction - a model defined in OpenAPI"""  # noqa: E501

        self._invite_permission_override = None
        self._update_culture_permission_override = None
        self._host_guided_game_permission_override = None
        self._update_banner_permission_override = None
        self._join_level = None
        self.discriminator = None

        self.invite_permission_override = invite_permission_override
        self.update_culture_permission_override = update_culture_permission_override
        self.host_guided_game_permission_override = host_guided_game_permission_override
        self.update_banner_permission_override = update_banner_permission_override
        self.join_level = join_level

    @property
    def invite_permission_override(self):
        """Gets the invite_permission_override of this GroupOptionsEditAction.  # noqa: E501

        Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.  # noqa: E501

        :return: The invite_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :rtype: bool
        """
        return self._invite_permission_override

    @invite_permission_override.setter
    def invite_permission_override(self, invite_permission_override):
        """Sets the invite_permission_override of this GroupOptionsEditAction.

        Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.  # noqa: E501

        :param invite_permission_override: The invite_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :type: bool
        """

        self._invite_permission_override = invite_permission_override

    @property
    def update_culture_permission_override(self):
        """Gets the update_culture_permission_override of this GroupOptionsEditAction.  # noqa: E501

        Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.  # noqa: E501

        :return: The update_culture_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :rtype: bool
        """
        return self._update_culture_permission_override

    @update_culture_permission_override.setter
    def update_culture_permission_override(self, update_culture_permission_override):
        """Sets the update_culture_permission_override of this GroupOptionsEditAction.

        Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.  # noqa: E501

        :param update_culture_permission_override: The update_culture_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :type: bool
        """

        self._update_culture_permission_override = update_culture_permission_override

    @property
    def host_guided_game_permission_override(self):
        """Gets the host_guided_game_permission_override of this GroupOptionsEditAction.  # noqa: E501

        Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.  # noqa: E501

        :return: The host_guided_game_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :rtype: int
        """
        return self._host_guided_game_permission_override

    @host_guided_game_permission_override.setter
    def host_guided_game_permission_override(self, host_guided_game_permission_override):
        """Sets the host_guided_game_permission_override of this GroupOptionsEditAction.

        Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.  # noqa: E501

        :param host_guided_game_permission_override: The host_guided_game_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if host_guided_game_permission_override not in allowed_values:
            raise ValueError(
                "Invalid value for `host_guided_game_permission_override` ({0}), must be one of {1}"  # noqa: E501
                .format(host_guided_game_permission_override, allowed_values)
            )

        self._host_guided_game_permission_override = host_guided_game_permission_override

    @property
    def update_banner_permission_override(self):
        """Gets the update_banner_permission_override of this GroupOptionsEditAction.  # noqa: E501

        Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.  # noqa: E501

        :return: The update_banner_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :rtype: bool
        """
        return self._update_banner_permission_override

    @update_banner_permission_override.setter
    def update_banner_permission_override(self, update_banner_permission_override):
        """Sets the update_banner_permission_override of this GroupOptionsEditAction.

        Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.  # noqa: E501

        :param update_banner_permission_override: The update_banner_permission_override of this GroupOptionsEditAction.  # noqa: E501
        :type: bool
        """

        self._update_banner_permission_override = update_banner_permission_override

    @property
    def join_level(self):
        """Gets the join_level of this GroupOptionsEditAction.  # noqa: E501

        Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.  # noqa: E501

        :return: The join_level of this GroupOptionsEditAction.  # noqa: E501
        :rtype: int
        """
        return self._join_level

    @join_level.setter
    def join_level(self, join_level):
        """Sets the join_level of this GroupOptionsEditAction.

        Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.  # noqa: E501

        :param join_level: The join_level of this GroupOptionsEditAction.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if join_level not in allowed_values:
            raise ValueError(
                "Invalid value for `join_level` ({0}), must be one of {1}"  # noqa: E501
                .format(join_level, allowed_values)
            )

        self._join_level = join_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupOptionsEditAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
