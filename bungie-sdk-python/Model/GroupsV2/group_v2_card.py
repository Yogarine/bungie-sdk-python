# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GroupV2Card(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group_id': 'int',
        'name': 'str',
        'group_type': 'int',
        'creation_date': 'datetime',
        'about': 'str',
        'motto': 'str',
        'member_count': 'int',
        'locale': 'str',
        'membership_option': 'int',
        'capabilities': 'int',
        'clan_info': 'GroupV2ClanInfo',
        'avatar_path': 'str',
        'theme': 'str'
    }

    attribute_map = {
        'group_id': 'groupId',
        'name': 'name',
        'group_type': 'groupType',
        'creation_date': 'creationDate',
        'about': 'about',
        'motto': 'motto',
        'member_count': 'memberCount',
        'locale': 'locale',
        'membership_option': 'membershipOption',
        'capabilities': 'capabilities',
        'clan_info': 'clanInfo',
        'avatar_path': 'avatarPath',
        'theme': 'theme'
    }

    def __init__(self, group_id=None, name=None, group_type=None, creation_date=None, about=None, motto=None, member_count=None, locale=None, membership_option=None, capabilities=None, clan_info=None, avatar_path=None, theme=None):  # noqa: E501
        """GroupV2Card - a model defined in OpenAPI"""  # noqa: E501

        self._group_id = None
        self._name = None
        self._group_type = None
        self._creation_date = None
        self._about = None
        self._motto = None
        self._member_count = None
        self._locale = None
        self._membership_option = None
        self._capabilities = None
        self._clan_info = None
        self._avatar_path = None
        self._theme = None
        self.discriminator = None

        if group_id is not None:
            self.group_id = group_id
        if name is not None:
            self.name = name
        if group_type is not None:
            self.group_type = group_type
        if creation_date is not None:
            self.creation_date = creation_date
        if about is not None:
            self.about = about
        if motto is not None:
            self.motto = motto
        if member_count is not None:
            self.member_count = member_count
        if locale is not None:
            self.locale = locale
        if membership_option is not None:
            self.membership_option = membership_option
        if capabilities is not None:
            self.capabilities = capabilities
        if clan_info is not None:
            self.clan_info = clan_info
        if avatar_path is not None:
            self.avatar_path = avatar_path
        if theme is not None:
            self.theme = theme

    @property
    def group_id(self):
        """Gets the group_id of this GroupV2Card.  # noqa: E501


        :return: The group_id of this GroupV2Card.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupV2Card.


        :param group_id: The group_id of this GroupV2Card.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this GroupV2Card.  # noqa: E501


        :return: The name of this GroupV2Card.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupV2Card.


        :param name: The name of this GroupV2Card.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group_type(self):
        """Gets the group_type of this GroupV2Card.  # noqa: E501


        :return: The group_type of this GroupV2Card.  # noqa: E501
        :rtype: int
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this GroupV2Card.


        :param group_type: The group_type of this GroupV2Card.  # noqa: E501
        :type: int
        """

        self._group_type = group_type

    @property
    def creation_date(self):
        """Gets the creation_date of this GroupV2Card.  # noqa: E501


        :return: The creation_date of this GroupV2Card.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GroupV2Card.


        :param creation_date: The creation_date of this GroupV2Card.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def about(self):
        """Gets the about of this GroupV2Card.  # noqa: E501


        :return: The about of this GroupV2Card.  # noqa: E501
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this GroupV2Card.


        :param about: The about of this GroupV2Card.  # noqa: E501
        :type: str
        """

        self._about = about

    @property
    def motto(self):
        """Gets the motto of this GroupV2Card.  # noqa: E501


        :return: The motto of this GroupV2Card.  # noqa: E501
        :rtype: str
        """
        return self._motto

    @motto.setter
    def motto(self, motto):
        """Sets the motto of this GroupV2Card.


        :param motto: The motto of this GroupV2Card.  # noqa: E501
        :type: str
        """

        self._motto = motto

    @property
    def member_count(self):
        """Gets the member_count of this GroupV2Card.  # noqa: E501


        :return: The member_count of this GroupV2Card.  # noqa: E501
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this GroupV2Card.


        :param member_count: The member_count of this GroupV2Card.  # noqa: E501
        :type: int
        """

        self._member_count = member_count

    @property
    def locale(self):
        """Gets the locale of this GroupV2Card.  # noqa: E501


        :return: The locale of this GroupV2Card.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this GroupV2Card.


        :param locale: The locale of this GroupV2Card.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def membership_option(self):
        """Gets the membership_option of this GroupV2Card.  # noqa: E501


        :return: The membership_option of this GroupV2Card.  # noqa: E501
        :rtype: int
        """
        return self._membership_option

    @membership_option.setter
    def membership_option(self, membership_option):
        """Sets the membership_option of this GroupV2Card.


        :param membership_option: The membership_option of this GroupV2Card.  # noqa: E501
        :type: int
        """

        self._membership_option = membership_option

    @property
    def capabilities(self):
        """Gets the capabilities of this GroupV2Card.  # noqa: E501


        :return: The capabilities of this GroupV2Card.  # noqa: E501
        :rtype: int
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this GroupV2Card.


        :param capabilities: The capabilities of this GroupV2Card.  # noqa: E501
        :type: int
        """

        self._capabilities = capabilities

    @property
    def clan_info(self):
        """Gets the clan_info of this GroupV2Card.  # noqa: E501


        :return: The clan_info of this GroupV2Card.  # noqa: E501
        :rtype: GroupV2ClanInfo
        """
        return self._clan_info

    @clan_info.setter
    def clan_info(self, clan_info):
        """Sets the clan_info of this GroupV2Card.


        :param clan_info: The clan_info of this GroupV2Card.  # noqa: E501
        :type: GroupV2ClanInfo
        """

        self._clan_info = clan_info

    @property
    def avatar_path(self):
        """Gets the avatar_path of this GroupV2Card.  # noqa: E501


        :return: The avatar_path of this GroupV2Card.  # noqa: E501
        :rtype: str
        """
        return self._avatar_path

    @avatar_path.setter
    def avatar_path(self, avatar_path):
        """Sets the avatar_path of this GroupV2Card.


        :param avatar_path: The avatar_path of this GroupV2Card.  # noqa: E501
        :type: str
        """

        self._avatar_path = avatar_path

    @property
    def theme(self):
        """Gets the theme of this GroupV2Card.  # noqa: E501


        :return: The theme of this GroupV2Card.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this GroupV2Card.


        :param theme: The theme of this GroupV2Card.  # noqa: E501
        :type: str
        """

        self._theme = theme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupV2Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
