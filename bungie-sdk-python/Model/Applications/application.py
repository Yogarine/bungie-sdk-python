# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Application(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application_type': 'int',
        'application_id': 'int',
        'name': 'str',
        'redirect_url': 'str',
        'link': 'str',
        'scope': 'int',
        'origin': 'str',
        'status': 'int',
        'creation_date': 'datetime',
        'status_changed': 'datetime',
        'first_published': 'datetime',
        'team': 'list[ApplicationDeveloper]'
    }

    attribute_map = {
        'application_type': 'applicationType',
        'application_id': 'applicationId',
        'name': 'name',
        'redirect_url': 'redirectUrl',
        'link': 'link',
        'scope': 'scope',
        'origin': 'origin',
        'status': 'status',
        'creation_date': 'creationDate',
        'status_changed': 'statusChanged',
        'first_published': 'firstPublished',
        'team': 'team'
    }

    def __init__(self, application_type=None, application_id=None, name=None, redirect_url=None, link=None, scope=None, origin=None, status=None, creation_date=None, status_changed=None, first_published=None, team=None):  # noqa: E501
        """Application - a model defined in OpenAPI"""  # noqa: E501

        self._application_type = None
        self._application_id = None
        self._name = None
        self._redirect_url = None
        self._link = None
        self._scope = None
        self._origin = None
        self._status = None
        self._creation_date = None
        self._status_changed = None
        self._first_published = None
        self._team = None
        self.discriminator = None

        if application_type is not None:
            self.application_type = application_type
        if application_id is not None:
            self.application_id = application_id
        if name is not None:
            self.name = name
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if link is not None:
            self.link = link
        if scope is not None:
            self.scope = scope
        if origin is not None:
            self.origin = origin
        if status is not None:
            self.status = status
        if creation_date is not None:
            self.creation_date = creation_date
        if status_changed is not None:
            self.status_changed = status_changed
        if first_published is not None:
            self.first_published = first_published
        if team is not None:
            self.team = team

    @property
    def application_type(self):
        """Gets the application_type of this Application.  # noqa: E501


        :return: The application_type of this Application.  # noqa: E501
        :rtype: int
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this Application.


        :param application_type: The application_type of this Application.  # noqa: E501
        :type: int
        """

        self._application_type = application_type

    @property
    def application_id(self):
        """Gets the application_id of this Application.  # noqa: E501

        Unique ID assigned to the application  # noqa: E501

        :return: The application_id of this Application.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Application.

        Unique ID assigned to the application  # noqa: E501

        :param application_id: The application_id of this Application.  # noqa: E501
        :type: int
        """

        self._application_id = application_id

    @property
    def name(self):
        """Gets the name of this Application.  # noqa: E501

        Name of the application  # noqa: E501

        :return: The name of this Application.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        Name of the application  # noqa: E501

        :param name: The name of this Application.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Application.  # noqa: E501

        URL used to pass the user's authorization code to the application  # noqa: E501

        :return: The redirect_url of this Application.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Application.

        URL used to pass the user's authorization code to the application  # noqa: E501

        :param redirect_url: The redirect_url of this Application.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def link(self):
        """Gets the link of this Application.  # noqa: E501

        Link to website for the application where a user can learn more about the app.  # noqa: E501

        :return: The link of this Application.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Application.

        Link to website for the application where a user can learn more about the app.  # noqa: E501

        :param link: The link of this Application.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def scope(self):
        """Gets the scope of this Application.  # noqa: E501

        Permissions the application needs to work  # noqa: E501

        :return: The scope of this Application.  # noqa: E501
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Application.

        Permissions the application needs to work  # noqa: E501

        :param scope: The scope of this Application.  # noqa: E501
        :type: int
        """

        self._scope = scope

    @property
    def origin(self):
        """Gets the origin of this Application.  # noqa: E501

        Value of the Origin header sent in requests generated by this application.  # noqa: E501

        :return: The origin of this Application.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Application.

        Value of the Origin header sent in requests generated by this application.  # noqa: E501

        :param origin: The origin of this Application.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def status(self):
        """Gets the status of this Application.  # noqa: E501

        Current status of the application.  # noqa: E501

        :return: The status of this Application.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Application.

        Current status of the application.  # noqa: E501

        :param status: The status of this Application.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def creation_date(self):
        """Gets the creation_date of this Application.  # noqa: E501

        Date the application was first added to our database.  # noqa: E501

        :return: The creation_date of this Application.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Application.

        Date the application was first added to our database.  # noqa: E501

        :param creation_date: The creation_date of this Application.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def status_changed(self):
        """Gets the status_changed of this Application.  # noqa: E501

        Date the application status last changed.  # noqa: E501

        :return: The status_changed of this Application.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed

    @status_changed.setter
    def status_changed(self, status_changed):
        """Sets the status_changed of this Application.

        Date the application status last changed.  # noqa: E501

        :param status_changed: The status_changed of this Application.  # noqa: E501
        :type: datetime
        """

        self._status_changed = status_changed

    @property
    def first_published(self):
        """Gets the first_published of this Application.  # noqa: E501

        Date the first time the application status entered the 'Public' status.  # noqa: E501

        :return: The first_published of this Application.  # noqa: E501
        :rtype: datetime
        """
        return self._first_published

    @first_published.setter
    def first_published(self, first_published):
        """Sets the first_published of this Application.

        Date the first time the application status entered the 'Public' status.  # noqa: E501

        :param first_published: The first_published of this Application.  # noqa: E501
        :type: datetime
        """

        self._first_published = first_published

    @property
    def team(self):
        """Gets the team of this Application.  # noqa: E501

        List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.  # noqa: E501

        :return: The team of this Application.  # noqa: E501
        :rtype: list[ApplicationDeveloper]
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Application.

        List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.  # noqa: E501

        :param team: The team of this Application.  # noqa: E501
        :type: list[ApplicationDeveloper]
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
