# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyInsertPlugsRequestEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'socket_index': 'int',
        'socket_array_type': 'int',
        'plug_item_hash': 'int'
    }

    attribute_map = {
        'socket_index': 'socketIndex',
        'socket_array_type': 'socketArrayType',
        'plug_item_hash': 'plugItemHash'
    }

    def __init__(self, socket_index=None, socket_array_type=None, plug_item_hash=None):  # noqa: E501
        """DestinyInsertPlugsRequestEntry - a model defined in OpenAPI"""  # noqa: E501

        self._socket_index = None
        self._socket_array_type = None
        self._plug_item_hash = None
        self.discriminator = None

        if socket_index is not None:
            self.socket_index = socket_index
        if socket_array_type is not None:
            self.socket_array_type = socket_array_type
        if plug_item_hash is not None:
            self.plug_item_hash = plug_item_hash

    @property
    def socket_index(self):
        """Gets the socket_index of this DestinyInsertPlugsRequestEntry.  # noqa: E501

        The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don't point to or try to insert a plug into an infusion socket. It won't work.  # noqa: E501

        :return: The socket_index of this DestinyInsertPlugsRequestEntry.  # noqa: E501
        :rtype: int
        """
        return self._socket_index

    @socket_index.setter
    def socket_index(self, socket_index):
        """Sets the socket_index of this DestinyInsertPlugsRequestEntry.

        The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don't point to or try to insert a plug into an infusion socket. It won't work.  # noqa: E501

        :param socket_index: The socket_index of this DestinyInsertPlugsRequestEntry.  # noqa: E501
        :type: int
        """

        self._socket_index = socket_index

    @property
    def socket_array_type(self):
        """Gets the socket_array_type of this DestinyInsertPlugsRequestEntry.  # noqa: E501

        This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \"default\" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.  # noqa: E501

        :return: The socket_array_type of this DestinyInsertPlugsRequestEntry.  # noqa: E501
        :rtype: int
        """
        return self._socket_array_type

    @socket_array_type.setter
    def socket_array_type(self, socket_array_type):
        """Sets the socket_array_type of this DestinyInsertPlugsRequestEntry.

        This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \"default\" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.  # noqa: E501

        :param socket_array_type: The socket_array_type of this DestinyInsertPlugsRequestEntry.  # noqa: E501
        :type: int
        """

        self._socket_array_type = socket_array_type

    @property
    def plug_item_hash(self):
        """Gets the plug_item_hash of this DestinyInsertPlugsRequestEntry.  # noqa: E501

        Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.  # noqa: E501

        :return: The plug_item_hash of this DestinyInsertPlugsRequestEntry.  # noqa: E501
        :rtype: int
        """
        return self._plug_item_hash

    @plug_item_hash.setter
    def plug_item_hash(self, plug_item_hash):
        """Sets the plug_item_hash of this DestinyInsertPlugsRequestEntry.

        Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.  # noqa: E501

        :param plug_item_hash: The plug_item_hash of this DestinyInsertPlugsRequestEntry.  # noqa: E501
        :type: int
        """

        self._plug_item_hash = plug_item_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyInsertPlugsRequestEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
