# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyVendorReceipt(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency_paid': 'list[DestinyItemQuantity]',
        'item_received': 'DestinyItemQuantity',
        'license_unlock_hash': 'int',
        'purchased_by_character_id': 'int',
        'refund_policy': 'int',
        'sequence_number': 'int',
        'time_to_expiration': 'int',
        'expires_on': 'datetime'
    }

    attribute_map = {
        'currency_paid': 'currencyPaid',
        'item_received': 'itemReceived',
        'license_unlock_hash': 'licenseUnlockHash',
        'purchased_by_character_id': 'purchasedByCharacterId',
        'refund_policy': 'refundPolicy',
        'sequence_number': 'sequenceNumber',
        'time_to_expiration': 'timeToExpiration',
        'expires_on': 'expiresOn'
    }

    def __init__(self, currency_paid=None, item_received=None, license_unlock_hash=None, purchased_by_character_id=None, refund_policy=None, sequence_number=None, time_to_expiration=None, expires_on=None):  # noqa: E501
        """DestinyVendorReceipt - a model defined in OpenAPI"""  # noqa: E501

        self._currency_paid = None
        self._item_received = None
        self._license_unlock_hash = None
        self._purchased_by_character_id = None
        self._refund_policy = None
        self._sequence_number = None
        self._time_to_expiration = None
        self._expires_on = None
        self.discriminator = None

        if currency_paid is not None:
            self.currency_paid = currency_paid
        if item_received is not None:
            self.item_received = item_received
        if license_unlock_hash is not None:
            self.license_unlock_hash = license_unlock_hash
        if purchased_by_character_id is not None:
            self.purchased_by_character_id = purchased_by_character_id
        if refund_policy is not None:
            self.refund_policy = refund_policy
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if time_to_expiration is not None:
            self.time_to_expiration = time_to_expiration
        if expires_on is not None:
            self.expires_on = expires_on

    @property
    def currency_paid(self):
        """Gets the currency_paid of this DestinyVendorReceipt.  # noqa: E501

        The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.  # noqa: E501

        :return: The currency_paid of this DestinyVendorReceipt.  # noqa: E501
        :rtype: list[DestinyItemQuantity]
        """
        return self._currency_paid

    @currency_paid.setter
    def currency_paid(self, currency_paid):
        """Sets the currency_paid of this DestinyVendorReceipt.

        The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.  # noqa: E501

        :param currency_paid: The currency_paid of this DestinyVendorReceipt.  # noqa: E501
        :type: list[DestinyItemQuantity]
        """

        self._currency_paid = currency_paid

    @property
    def item_received(self):
        """Gets the item_received of this DestinyVendorReceipt.  # noqa: E501

        The item that was received, and its quantity.  # noqa: E501

        :return: The item_received of this DestinyVendorReceipt.  # noqa: E501
        :rtype: DestinyItemQuantity
        """
        return self._item_received

    @item_received.setter
    def item_received(self, item_received):
        """Sets the item_received of this DestinyVendorReceipt.

        The item that was received, and its quantity.  # noqa: E501

        :param item_received: The item_received of this DestinyVendorReceipt.  # noqa: E501
        :type: DestinyItemQuantity
        """

        self._item_received = item_received

    @property
    def license_unlock_hash(self):
        """Gets the license_unlock_hash of this DestinyVendorReceipt.  # noqa: E501

        The unlock flag used to determine whether you still have the purchased item.  # noqa: E501

        :return: The license_unlock_hash of this DestinyVendorReceipt.  # noqa: E501
        :rtype: int
        """
        return self._license_unlock_hash

    @license_unlock_hash.setter
    def license_unlock_hash(self, license_unlock_hash):
        """Sets the license_unlock_hash of this DestinyVendorReceipt.

        The unlock flag used to determine whether you still have the purchased item.  # noqa: E501

        :param license_unlock_hash: The license_unlock_hash of this DestinyVendorReceipt.  # noqa: E501
        :type: int
        """

        self._license_unlock_hash = license_unlock_hash

    @property
    def purchased_by_character_id(self):
        """Gets the purchased_by_character_id of this DestinyVendorReceipt.  # noqa: E501

        The ID of the character who made the purchase.  # noqa: E501

        :return: The purchased_by_character_id of this DestinyVendorReceipt.  # noqa: E501
        :rtype: int
        """
        return self._purchased_by_character_id

    @purchased_by_character_id.setter
    def purchased_by_character_id(self, purchased_by_character_id):
        """Sets the purchased_by_character_id of this DestinyVendorReceipt.

        The ID of the character who made the purchase.  # noqa: E501

        :param purchased_by_character_id: The purchased_by_character_id of this DestinyVendorReceipt.  # noqa: E501
        :type: int
        """

        self._purchased_by_character_id = purchased_by_character_id

    @property
    def refund_policy(self):
        """Gets the refund_policy of this DestinyVendorReceipt.  # noqa: E501

        Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.  # noqa: E501

        :return: The refund_policy of this DestinyVendorReceipt.  # noqa: E501
        :rtype: int
        """
        return self._refund_policy

    @refund_policy.setter
    def refund_policy(self, refund_policy):
        """Sets the refund_policy of this DestinyVendorReceipt.

        Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.  # noqa: E501

        :param refund_policy: The refund_policy of this DestinyVendorReceipt.  # noqa: E501
        :type: int
        """

        self._refund_policy = refund_policy

    @property
    def sequence_number(self):
        """Gets the sequence_number of this DestinyVendorReceipt.  # noqa: E501

        The identifier of this receipt.  # noqa: E501

        :return: The sequence_number of this DestinyVendorReceipt.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this DestinyVendorReceipt.

        The identifier of this receipt.  # noqa: E501

        :param sequence_number: The sequence_number of this DestinyVendorReceipt.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def time_to_expiration(self):
        """Gets the time_to_expiration of this DestinyVendorReceipt.  # noqa: E501

        The seconds since epoch at which this receipt is rendered invalid.  # noqa: E501

        :return: The time_to_expiration of this DestinyVendorReceipt.  # noqa: E501
        :rtype: int
        """
        return self._time_to_expiration

    @time_to_expiration.setter
    def time_to_expiration(self, time_to_expiration):
        """Sets the time_to_expiration of this DestinyVendorReceipt.

        The seconds since epoch at which this receipt is rendered invalid.  # noqa: E501

        :param time_to_expiration: The time_to_expiration of this DestinyVendorReceipt.  # noqa: E501
        :type: int
        """

        self._time_to_expiration = time_to_expiration

    @property
    def expires_on(self):
        """Gets the expires_on of this DestinyVendorReceipt.  # noqa: E501

        The date at which this receipt is rendered invalid.  # noqa: E501

        :return: The expires_on of this DestinyVendorReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this DestinyVendorReceipt.

        The date at which this receipt is rendered invalid.  # noqa: E501

        :param expires_on: The expires_on of this DestinyVendorReceipt.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyVendorReceipt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
