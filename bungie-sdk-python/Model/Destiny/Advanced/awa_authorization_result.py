# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AwaAuthorizationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_selection': 'int',
        'response_reason': 'int',
        'developer_note': 'str',
        'action_token': 'str',
        'maximum_number_of_uses': 'int',
        'valid_until': 'datetime',
        'type': 'int',
        'membership_type': 'int'
    }

    attribute_map = {
        'user_selection': 'userSelection',
        'response_reason': 'responseReason',
        'developer_note': 'developerNote',
        'action_token': 'actionToken',
        'maximum_number_of_uses': 'maximumNumberOfUses',
        'valid_until': 'validUntil',
        'type': 'type',
        'membership_type': 'membershipType'
    }

    def __init__(self, user_selection=None, response_reason=None, developer_note=None, action_token=None, maximum_number_of_uses=None, valid_until=None, type=None, membership_type=None):  # noqa: E501
        """AwaAuthorizationResult - a model defined in OpenAPI"""  # noqa: E501

        self._user_selection = None
        self._response_reason = None
        self._developer_note = None
        self._action_token = None
        self._maximum_number_of_uses = None
        self._valid_until = None
        self._type = None
        self._membership_type = None
        self.discriminator = None

        if user_selection is not None:
            self.user_selection = user_selection
        if response_reason is not None:
            self.response_reason = response_reason
        if developer_note is not None:
            self.developer_note = developer_note
        if action_token is not None:
            self.action_token = action_token
        if maximum_number_of_uses is not None:
            self.maximum_number_of_uses = maximum_number_of_uses
        self.valid_until = valid_until
        if type is not None:
            self.type = type
        if membership_type is not None:
            self.membership_type = membership_type

    @property
    def user_selection(self):
        """Gets the user_selection of this AwaAuthorizationResult.  # noqa: E501

        Indication of how the user responded to the request. If the value is \"Approved\" the actionToken will contain the token that can be presented when performing the advanced write action.  # noqa: E501

        :return: The user_selection of this AwaAuthorizationResult.  # noqa: E501
        :rtype: int
        """
        return self._user_selection

    @user_selection.setter
    def user_selection(self, user_selection):
        """Sets the user_selection of this AwaAuthorizationResult.

        Indication of how the user responded to the request. If the value is \"Approved\" the actionToken will contain the token that can be presented when performing the advanced write action.  # noqa: E501

        :param user_selection: The user_selection of this AwaAuthorizationResult.  # noqa: E501
        :type: int
        """

        self._user_selection = user_selection

    @property
    def response_reason(self):
        """Gets the response_reason of this AwaAuthorizationResult.  # noqa: E501


        :return: The response_reason of this AwaAuthorizationResult.  # noqa: E501
        :rtype: int
        """
        return self._response_reason

    @response_reason.setter
    def response_reason(self, response_reason):
        """Sets the response_reason of this AwaAuthorizationResult.


        :param response_reason: The response_reason of this AwaAuthorizationResult.  # noqa: E501
        :type: int
        """

        self._response_reason = response_reason

    @property
    def developer_note(self):
        """Gets the developer_note of this AwaAuthorizationResult.  # noqa: E501

        Message to the app developer to help understand the response.  # noqa: E501

        :return: The developer_note of this AwaAuthorizationResult.  # noqa: E501
        :rtype: str
        """
        return self._developer_note

    @developer_note.setter
    def developer_note(self, developer_note):
        """Sets the developer_note of this AwaAuthorizationResult.

        Message to the app developer to help understand the response.  # noqa: E501

        :param developer_note: The developer_note of this AwaAuthorizationResult.  # noqa: E501
        :type: str
        """

        self._developer_note = developer_note

    @property
    def action_token(self):
        """Gets the action_token of this AwaAuthorizationResult.  # noqa: E501

        Credential used to prove the user authorized an advanced write action.  # noqa: E501

        :return: The action_token of this AwaAuthorizationResult.  # noqa: E501
        :rtype: str
        """
        return self._action_token

    @action_token.setter
    def action_token(self, action_token):
        """Sets the action_token of this AwaAuthorizationResult.

        Credential used to prove the user authorized an advanced write action.  # noqa: E501

        :param action_token: The action_token of this AwaAuthorizationResult.  # noqa: E501
        :type: str
        """

        self._action_token = action_token

    @property
    def maximum_number_of_uses(self):
        """Gets the maximum_number_of_uses of this AwaAuthorizationResult.  # noqa: E501

        This token may be used to perform the requested action this number of times, at a maximum. If this value is 0, then there is no limit.  # noqa: E501

        :return: The maximum_number_of_uses of this AwaAuthorizationResult.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_uses

    @maximum_number_of_uses.setter
    def maximum_number_of_uses(self, maximum_number_of_uses):
        """Sets the maximum_number_of_uses of this AwaAuthorizationResult.

        This token may be used to perform the requested action this number of times, at a maximum. If this value is 0, then there is no limit.  # noqa: E501

        :param maximum_number_of_uses: The maximum_number_of_uses of this AwaAuthorizationResult.  # noqa: E501
        :type: int
        """

        self._maximum_number_of_uses = maximum_number_of_uses

    @property
    def valid_until(self):
        """Gets the valid_until of this AwaAuthorizationResult.  # noqa: E501

        Time, UTC, when token expires.  # noqa: E501

        :return: The valid_until of this AwaAuthorizationResult.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this AwaAuthorizationResult.

        Time, UTC, when token expires.  # noqa: E501

        :param valid_until: The valid_until of this AwaAuthorizationResult.  # noqa: E501
        :type: datetime
        """

        self._valid_until = valid_until

    @property
    def type(self):
        """Gets the type of this AwaAuthorizationResult.  # noqa: E501

        Advanced Write Action Type from the permission request.  # noqa: E501

        :return: The type of this AwaAuthorizationResult.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AwaAuthorizationResult.

        Advanced Write Action Type from the permission request.  # noqa: E501

        :param type: The type of this AwaAuthorizationResult.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def membership_type(self):
        """Gets the membership_type of this AwaAuthorizationResult.  # noqa: E501

        MembershipType from the permission request.  # noqa: E501

        :return: The membership_type of this AwaAuthorizationResult.  # noqa: E501
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this AwaAuthorizationResult.

        MembershipType from the permission request.  # noqa: E501

        :param membership_type: The membership_type of this AwaAuthorizationResult.  # noqa: E501
        :type: int
        """

        self._membership_type = membership_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwaAuthorizationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
