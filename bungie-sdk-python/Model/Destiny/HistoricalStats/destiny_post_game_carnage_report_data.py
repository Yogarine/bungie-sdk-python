# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyPostGameCarnageReportData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'period': 'datetime',
        'starting_phase_index': 'int',
        'activity_details': 'DestinyHistoricalStatsActivity',
        'entries': 'list[DestinyPostGameCarnageReportEntry]',
        'teams': 'list[DestinyPostGameCarnageReportTeamEntry]'
    }

    attribute_map = {
        'period': 'period',
        'starting_phase_index': 'startingPhaseIndex',
        'activity_details': 'activityDetails',
        'entries': 'entries',
        'teams': 'teams'
    }

    def __init__(self, period=None, starting_phase_index=None, activity_details=None, entries=None, teams=None):  # noqa: E501
        """DestinyPostGameCarnageReportData - a model defined in OpenAPI"""  # noqa: E501

        self._period = None
        self._starting_phase_index = None
        self._activity_details = None
        self._entries = None
        self._teams = None
        self.discriminator = None

        if period is not None:
            self.period = period
        self.starting_phase_index = starting_phase_index
        if activity_details is not None:
            self.activity_details = activity_details
        if entries is not None:
            self.entries = entries
        if teams is not None:
            self.teams = teams

    @property
    def period(self):
        """Gets the period of this DestinyPostGameCarnageReportData.  # noqa: E501

        Date and time for the activity.  # noqa: E501

        :return: The period of this DestinyPostGameCarnageReportData.  # noqa: E501
        :rtype: datetime
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this DestinyPostGameCarnageReportData.

        Date and time for the activity.  # noqa: E501

        :param period: The period of this DestinyPostGameCarnageReportData.  # noqa: E501
        :type: datetime
        """

        self._period = period

    @property
    def starting_phase_index(self):
        """Gets the starting_phase_index of this DestinyPostGameCarnageReportData.  # noqa: E501

        If this activity has \"phases\", this is the phase at which the activity was started.  # noqa: E501

        :return: The starting_phase_index of this DestinyPostGameCarnageReportData.  # noqa: E501
        :rtype: int
        """
        return self._starting_phase_index

    @starting_phase_index.setter
    def starting_phase_index(self, starting_phase_index):
        """Sets the starting_phase_index of this DestinyPostGameCarnageReportData.

        If this activity has \"phases\", this is the phase at which the activity was started.  # noqa: E501

        :param starting_phase_index: The starting_phase_index of this DestinyPostGameCarnageReportData.  # noqa: E501
        :type: int
        """

        self._starting_phase_index = starting_phase_index

    @property
    def activity_details(self):
        """Gets the activity_details of this DestinyPostGameCarnageReportData.  # noqa: E501

        Details about the activity.  # noqa: E501

        :return: The activity_details of this DestinyPostGameCarnageReportData.  # noqa: E501
        :rtype: DestinyHistoricalStatsActivity
        """
        return self._activity_details

    @activity_details.setter
    def activity_details(self, activity_details):
        """Sets the activity_details of this DestinyPostGameCarnageReportData.

        Details about the activity.  # noqa: E501

        :param activity_details: The activity_details of this DestinyPostGameCarnageReportData.  # noqa: E501
        :type: DestinyHistoricalStatsActivity
        """

        self._activity_details = activity_details

    @property
    def entries(self):
        """Gets the entries of this DestinyPostGameCarnageReportData.  # noqa: E501

        Collection of players and their data for this activity.  # noqa: E501

        :return: The entries of this DestinyPostGameCarnageReportData.  # noqa: E501
        :rtype: list[DestinyPostGameCarnageReportEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this DestinyPostGameCarnageReportData.

        Collection of players and their data for this activity.  # noqa: E501

        :param entries: The entries of this DestinyPostGameCarnageReportData.  # noqa: E501
        :type: list[DestinyPostGameCarnageReportEntry]
        """

        self._entries = entries

    @property
    def teams(self):
        """Gets the teams of this DestinyPostGameCarnageReportData.  # noqa: E501

        Collection of stats for the player in this activity.  # noqa: E501

        :return: The teams of this DestinyPostGameCarnageReportData.  # noqa: E501
        :rtype: list[DestinyPostGameCarnageReportTeamEntry]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this DestinyPostGameCarnageReportData.

        Collection of stats for the player in this activity.  # noqa: E501

        :param teams: The teams of this DestinyPostGameCarnageReportData.  # noqa: E501
        :type: list[DestinyPostGameCarnageReportTeamEntry]
        """

        self._teams = teams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyPostGameCarnageReportData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
