# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyPostGameCarnageReportEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'standing': 'int',
        'score': 'DestinyHistoricalStatsValue',
        'player': 'DestinyPlayer',
        'character_id': 'int',
        'values': 'dict(str, DestinyHistoricalStatsValue)',
        'extended': 'DestinyPostGameCarnageReportExtendedData'
    }

    attribute_map = {
        'standing': 'standing',
        'score': 'score',
        'player': 'player',
        'character_id': 'characterId',
        'values': 'values',
        'extended': 'extended'
    }

    def __init__(self, standing=None, score=None, player=None, character_id=None, values=None, extended=None):  # noqa: E501
        """DestinyPostGameCarnageReportEntry - a model defined in OpenAPI"""  # noqa: E501

        self._standing = None
        self._score = None
        self._player = None
        self._character_id = None
        self._values = None
        self._extended = None
        self.discriminator = None

        if standing is not None:
            self.standing = standing
        if score is not None:
            self.score = score
        if player is not None:
            self.player = player
        if character_id is not None:
            self.character_id = character_id
        if values is not None:
            self.values = values
        if extended is not None:
            self.extended = extended

    @property
    def standing(self):
        """Gets the standing of this DestinyPostGameCarnageReportEntry.  # noqa: E501

        Standing of the player  # noqa: E501

        :return: The standing of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :rtype: int
        """
        return self._standing

    @standing.setter
    def standing(self, standing):
        """Sets the standing of this DestinyPostGameCarnageReportEntry.

        Standing of the player  # noqa: E501

        :param standing: The standing of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :type: int
        """

        self._standing = standing

    @property
    def score(self):
        """Gets the score of this DestinyPostGameCarnageReportEntry.  # noqa: E501

        Score of the player if available  # noqa: E501

        :return: The score of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :rtype: DestinyHistoricalStatsValue
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DestinyPostGameCarnageReportEntry.

        Score of the player if available  # noqa: E501

        :param score: The score of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :type: DestinyHistoricalStatsValue
        """

        self._score = score

    @property
    def player(self):
        """Gets the player of this DestinyPostGameCarnageReportEntry.  # noqa: E501

        Identity details of the player  # noqa: E501

        :return: The player of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :rtype: DestinyPlayer
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this DestinyPostGameCarnageReportEntry.

        Identity details of the player  # noqa: E501

        :param player: The player of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :type: DestinyPlayer
        """

        self._player = player

    @property
    def character_id(self):
        """Gets the character_id of this DestinyPostGameCarnageReportEntry.  # noqa: E501

        ID of the player's character used in the activity.  # noqa: E501

        :return: The character_id of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this DestinyPostGameCarnageReportEntry.

        ID of the player's character used in the activity.  # noqa: E501

        :param character_id: The character_id of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :type: int
        """

        self._character_id = character_id

    @property
    def values(self):
        """Gets the values of this DestinyPostGameCarnageReportEntry.  # noqa: E501

        Collection of stats for the player in this activity.  # noqa: E501

        :return: The values of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :rtype: dict(str, DestinyHistoricalStatsValue)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DestinyPostGameCarnageReportEntry.

        Collection of stats for the player in this activity.  # noqa: E501

        :param values: The values of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :type: dict(str, DestinyHistoricalStatsValue)
        """

        self._values = values

    @property
    def extended(self):
        """Gets the extended of this DestinyPostGameCarnageReportEntry.  # noqa: E501

        Extended data extracted from the activity blob.  # noqa: E501

        :return: The extended of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :rtype: DestinyPostGameCarnageReportExtendedData
        """
        return self._extended

    @extended.setter
    def extended(self, extended):
        """Sets the extended of this DestinyPostGameCarnageReportEntry.

        Extended data extracted from the activity blob.  # noqa: E501

        :param extended: The extended of this DestinyPostGameCarnageReportEntry.  # noqa: E501
        :type: DestinyPostGameCarnageReportExtendedData
        """

        self._extended = extended

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyPostGameCarnageReportEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
