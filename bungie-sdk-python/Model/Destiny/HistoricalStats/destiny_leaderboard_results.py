# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyLeaderboardResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'focus_membership_id': 'int',
        'focus_character_id': 'int'
    }

    attribute_map = {
        'focus_membership_id': 'focusMembershipId',
        'focus_character_id': 'focusCharacterId'
    }

    def __init__(self, focus_membership_id=None, focus_character_id=None):  # noqa: E501
        """DestinyLeaderboardResults - a model defined in OpenAPI"""  # noqa: E501

        self._focus_membership_id = None
        self._focus_character_id = None
        self.discriminator = None

        self.focus_membership_id = focus_membership_id
        self.focus_character_id = focus_character_id

    @property
    def focus_membership_id(self):
        """Gets the focus_membership_id of this DestinyLeaderboardResults.  # noqa: E501

        Indicate the membership ID of the account that is the focal point of the provided leaderboards.  # noqa: E501

        :return: The focus_membership_id of this DestinyLeaderboardResults.  # noqa: E501
        :rtype: int
        """
        return self._focus_membership_id

    @focus_membership_id.setter
    def focus_membership_id(self, focus_membership_id):
        """Sets the focus_membership_id of this DestinyLeaderboardResults.

        Indicate the membership ID of the account that is the focal point of the provided leaderboards.  # noqa: E501

        :param focus_membership_id: The focus_membership_id of this DestinyLeaderboardResults.  # noqa: E501
        :type: int
        """

        self._focus_membership_id = focus_membership_id

    @property
    def focus_character_id(self):
        """Gets the focus_character_id of this DestinyLeaderboardResults.  # noqa: E501

        Indicate the character ID of the character that is the focal point of the provided leaderboards. May be null, in which case any character from the focus membership can appear in the provided leaderboards.  # noqa: E501

        :return: The focus_character_id of this DestinyLeaderboardResults.  # noqa: E501
        :rtype: int
        """
        return self._focus_character_id

    @focus_character_id.setter
    def focus_character_id(self, focus_character_id):
        """Sets the focus_character_id of this DestinyLeaderboardResults.

        Indicate the character ID of the character that is the focal point of the provided leaderboards. May be null, in which case any character from the focus membership can appear in the provided leaderboards.  # noqa: E501

        :param focus_character_id: The focus_character_id of this DestinyLeaderboardResults.  # noqa: E501
        :type: int
        """

        self._focus_character_id = focus_character_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyLeaderboardResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
