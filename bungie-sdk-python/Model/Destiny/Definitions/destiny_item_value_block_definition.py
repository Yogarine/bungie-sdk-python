# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemValueBlockDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_value': 'list[DestinyItemQuantity]',
        'value_description': 'str'
    }

    attribute_map = {
        'item_value': 'itemValue',
        'value_description': 'valueDescription'
    }

    def __init__(self, item_value=None, value_description=None):  # noqa: E501
        """DestinyItemValueBlockDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._item_value = None
        self._value_description = None
        self.discriminator = None

        if item_value is not None:
            self.item_value = item_value
        if value_description is not None:
            self.value_description = value_description

    @property
    def item_value(self):
        """Gets the item_value of this DestinyItemValueBlockDefinition.  # noqa: E501

        References to the items that make up this item's \"value\", and the quantity.  # noqa: E501

        :return: The item_value of this DestinyItemValueBlockDefinition.  # noqa: E501
        :rtype: list[DestinyItemQuantity]
        """
        return self._item_value

    @item_value.setter
    def item_value(self, item_value):
        """Sets the item_value of this DestinyItemValueBlockDefinition.

        References to the items that make up this item's \"value\", and the quantity.  # noqa: E501

        :param item_value: The item_value of this DestinyItemValueBlockDefinition.  # noqa: E501
        :type: list[DestinyItemQuantity]
        """

        self._item_value = item_value

    @property
    def value_description(self):
        """Gets the value_description of this DestinyItemValueBlockDefinition.  # noqa: E501

        If there's a localized text description of the value provided, this will be said description.  # noqa: E501

        :return: The value_description of this DestinyItemValueBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._value_description

    @value_description.setter
    def value_description(self, value_description):
        """Sets the value_description of this DestinyItemValueBlockDefinition.

        If there's a localized text description of the value provided, this will be said description.  # noqa: E501

        :param value_description: The value_description of this DestinyItemValueBlockDefinition.  # noqa: E501
        :type: str
        """

        self._value_description = value_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemValueBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
