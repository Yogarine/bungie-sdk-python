# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyRecordDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_properties': 'DestinyDisplayPropertiesDefinition',
        'scope': 'int',
        'presentation_info': 'DestinyPresentationChildBlock',
        'lore_hash': 'int',
        'objective_hashes': 'list[int]',
        'record_value_style': 'int',
        'title_info': 'DestinyRecordTitleBlock',
        'completion_info': 'DestinyRecordCompletionBlock',
        'state_info': 'SchemaRecordStateBlock',
        'requirements': 'DestinyPresentationNodeRequirementsBlock',
        'expiration_info': 'DestinyRecordExpirationBlock',
        'reward_items': 'list[DestinyItemQuantity]',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'scope': 'scope',
        'presentation_info': 'presentationInfo',
        'lore_hash': 'loreHash',
        'objective_hashes': 'objectiveHashes',
        'record_value_style': 'recordValueStyle',
        'title_info': 'titleInfo',
        'completion_info': 'completionInfo',
        'state_info': 'stateInfo',
        'requirements': 'requirements',
        'expiration_info': 'expirationInfo',
        'reward_items': 'rewardItems',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, scope=None, presentation_info=None, lore_hash=None, objective_hashes=None, record_value_style=None, title_info=None, completion_info=None, state_info=None, requirements=None, expiration_info=None, reward_items=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyRecordDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._display_properties = None
        self._scope = None
        self._presentation_info = None
        self._lore_hash = None
        self._objective_hashes = None
        self._record_value_style = None
        self._title_info = None
        self._completion_info = None
        self._state_info = None
        self._requirements = None
        self._expiration_info = None
        self._reward_items = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if scope is not None:
            self.scope = scope
        if presentation_info is not None:
            self.presentation_info = presentation_info
        self.lore_hash = lore_hash
        if objective_hashes is not None:
            self.objective_hashes = objective_hashes
        if record_value_style is not None:
            self.record_value_style = record_value_style
        if title_info is not None:
            self.title_info = title_info
        if completion_info is not None:
            self.completion_info = completion_info
        if state_info is not None:
            self.state_info = state_info
        if requirements is not None:
            self.requirements = requirements
        if expiration_info is not None:
            self.expiration_info = expiration_info
        if reward_items is not None:
            self.reward_items = reward_items
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyRecordDefinition.  # noqa: E501


        :return: The display_properties of this DestinyRecordDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyRecordDefinition.


        :param display_properties: The display_properties of this DestinyRecordDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def scope(self):
        """Gets the scope of this DestinyRecordDefinition.  # noqa: E501

        Indicates whether this Record's state is determined on a per-character or on an account-wide basis.  # noqa: E501

        :return: The scope of this DestinyRecordDefinition.  # noqa: E501
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DestinyRecordDefinition.

        Indicates whether this Record's state is determined on a per-character or on an account-wide basis.  # noqa: E501

        :param scope: The scope of this DestinyRecordDefinition.  # noqa: E501
        :type: int
        """

        self._scope = scope

    @property
    def presentation_info(self):
        """Gets the presentation_info of this DestinyRecordDefinition.  # noqa: E501


        :return: The presentation_info of this DestinyRecordDefinition.  # noqa: E501
        :rtype: DestinyPresentationChildBlock
        """
        return self._presentation_info

    @presentation_info.setter
    def presentation_info(self, presentation_info):
        """Sets the presentation_info of this DestinyRecordDefinition.


        :param presentation_info: The presentation_info of this DestinyRecordDefinition.  # noqa: E501
        :type: DestinyPresentationChildBlock
        """

        self._presentation_info = presentation_info

    @property
    def lore_hash(self):
        """Gets the lore_hash of this DestinyRecordDefinition.  # noqa: E501


        :return: The lore_hash of this DestinyRecordDefinition.  # noqa: E501
        :rtype: int
        """
        return self._lore_hash

    @lore_hash.setter
    def lore_hash(self, lore_hash):
        """Sets the lore_hash of this DestinyRecordDefinition.


        :param lore_hash: The lore_hash of this DestinyRecordDefinition.  # noqa: E501
        :type: int
        """

        self._lore_hash = lore_hash

    @property
    def objective_hashes(self):
        """Gets the objective_hashes of this DestinyRecordDefinition.  # noqa: E501


        :return: The objective_hashes of this DestinyRecordDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._objective_hashes

    @objective_hashes.setter
    def objective_hashes(self, objective_hashes):
        """Sets the objective_hashes of this DestinyRecordDefinition.


        :param objective_hashes: The objective_hashes of this DestinyRecordDefinition.  # noqa: E501
        :type: list[int]
        """

        self._objective_hashes = objective_hashes

    @property
    def record_value_style(self):
        """Gets the record_value_style of this DestinyRecordDefinition.  # noqa: E501


        :return: The record_value_style of this DestinyRecordDefinition.  # noqa: E501
        :rtype: int
        """
        return self._record_value_style

    @record_value_style.setter
    def record_value_style(self, record_value_style):
        """Sets the record_value_style of this DestinyRecordDefinition.


        :param record_value_style: The record_value_style of this DestinyRecordDefinition.  # noqa: E501
        :type: int
        """

        self._record_value_style = record_value_style

    @property
    def title_info(self):
        """Gets the title_info of this DestinyRecordDefinition.  # noqa: E501


        :return: The title_info of this DestinyRecordDefinition.  # noqa: E501
        :rtype: DestinyRecordTitleBlock
        """
        return self._title_info

    @title_info.setter
    def title_info(self, title_info):
        """Sets the title_info of this DestinyRecordDefinition.


        :param title_info: The title_info of this DestinyRecordDefinition.  # noqa: E501
        :type: DestinyRecordTitleBlock
        """

        self._title_info = title_info

    @property
    def completion_info(self):
        """Gets the completion_info of this DestinyRecordDefinition.  # noqa: E501


        :return: The completion_info of this DestinyRecordDefinition.  # noqa: E501
        :rtype: DestinyRecordCompletionBlock
        """
        return self._completion_info

    @completion_info.setter
    def completion_info(self, completion_info):
        """Sets the completion_info of this DestinyRecordDefinition.


        :param completion_info: The completion_info of this DestinyRecordDefinition.  # noqa: E501
        :type: DestinyRecordCompletionBlock
        """

        self._completion_info = completion_info

    @property
    def state_info(self):
        """Gets the state_info of this DestinyRecordDefinition.  # noqa: E501


        :return: The state_info of this DestinyRecordDefinition.  # noqa: E501
        :rtype: SchemaRecordStateBlock
        """
        return self._state_info

    @state_info.setter
    def state_info(self, state_info):
        """Sets the state_info of this DestinyRecordDefinition.


        :param state_info: The state_info of this DestinyRecordDefinition.  # noqa: E501
        :type: SchemaRecordStateBlock
        """

        self._state_info = state_info

    @property
    def requirements(self):
        """Gets the requirements of this DestinyRecordDefinition.  # noqa: E501


        :return: The requirements of this DestinyRecordDefinition.  # noqa: E501
        :rtype: DestinyPresentationNodeRequirementsBlock
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this DestinyRecordDefinition.


        :param requirements: The requirements of this DestinyRecordDefinition.  # noqa: E501
        :type: DestinyPresentationNodeRequirementsBlock
        """

        self._requirements = requirements

    @property
    def expiration_info(self):
        """Gets the expiration_info of this DestinyRecordDefinition.  # noqa: E501


        :return: The expiration_info of this DestinyRecordDefinition.  # noqa: E501
        :rtype: DestinyRecordExpirationBlock
        """
        return self._expiration_info

    @expiration_info.setter
    def expiration_info(self, expiration_info):
        """Sets the expiration_info of this DestinyRecordDefinition.


        :param expiration_info: The expiration_info of this DestinyRecordDefinition.  # noqa: E501
        :type: DestinyRecordExpirationBlock
        """

        self._expiration_info = expiration_info

    @property
    def reward_items(self):
        """Gets the reward_items of this DestinyRecordDefinition.  # noqa: E501

        If there is any publicly available information about rewards earned for achieving this record, this is the list of those items.   However, note that some records intentionally have \"hidden\" rewards. These will not be returned in this list.  # noqa: E501

        :return: The reward_items of this DestinyRecordDefinition.  # noqa: E501
        :rtype: list[DestinyItemQuantity]
        """
        return self._reward_items

    @reward_items.setter
    def reward_items(self, reward_items):
        """Sets the reward_items of this DestinyRecordDefinition.

        If there is any publicly available information about rewards earned for achieving this record, this is the list of those items.   However, note that some records intentionally have \"hidden\" rewards. These will not be returned in this list.  # noqa: E501

        :param reward_items: The reward_items of this DestinyRecordDefinition.  # noqa: E501
        :type: list[DestinyItemQuantity]
        """

        self._reward_items = reward_items

    @property
    def hash(self):
        """Gets the hash of this DestinyRecordDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyRecordDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyRecordDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyRecordDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyRecordDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyRecordDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyRecordDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyRecordDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyRecordDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyRecordDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyRecordDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyRecordDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyRecordDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
