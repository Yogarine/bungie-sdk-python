# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyRecordExpirationBlock(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'has_expiration': 'bool',
        'description': 'str',
        'icon': 'str'
    }

    attribute_map = {
        'has_expiration': 'hasExpiration',
        'description': 'description',
        'icon': 'icon'
    }

    def __init__(self, has_expiration=None, description=None, icon=None):  # noqa: E501
        """DestinyRecordExpirationBlock - a model defined in OpenAPI"""  # noqa: E501

        self._has_expiration = None
        self._description = None
        self._icon = None
        self.discriminator = None

        if has_expiration is not None:
            self.has_expiration = has_expiration
        if description is not None:
            self.description = description
        if icon is not None:
            self.icon = icon

    @property
    def has_expiration(self):
        """Gets the has_expiration of this DestinyRecordExpirationBlock.  # noqa: E501


        :return: The has_expiration of this DestinyRecordExpirationBlock.  # noqa: E501
        :rtype: bool
        """
        return self._has_expiration

    @has_expiration.setter
    def has_expiration(self, has_expiration):
        """Sets the has_expiration of this DestinyRecordExpirationBlock.


        :param has_expiration: The has_expiration of this DestinyRecordExpirationBlock.  # noqa: E501
        :type: bool
        """

        self._has_expiration = has_expiration

    @property
    def description(self):
        """Gets the description of this DestinyRecordExpirationBlock.  # noqa: E501


        :return: The description of this DestinyRecordExpirationBlock.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinyRecordExpirationBlock.


        :param description: The description of this DestinyRecordExpirationBlock.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def icon(self):
        """Gets the icon of this DestinyRecordExpirationBlock.  # noqa: E501


        :return: The icon of this DestinyRecordExpirationBlock.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DestinyRecordExpirationBlock.


        :param icon: The icon of this DestinyRecordExpirationBlock.  # noqa: E501
        :type: str
        """

        self._icon = icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyRecordExpirationBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
