# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemSackBlockDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'detail_action': 'str',
        'open_action': 'str',
        'select_item_count': 'int',
        'vendor_sack_type': 'str',
        'open_on_acquire': 'bool'
    }

    attribute_map = {
        'detail_action': 'detailAction',
        'open_action': 'openAction',
        'select_item_count': 'selectItemCount',
        'vendor_sack_type': 'vendorSackType',
        'open_on_acquire': 'openOnAcquire'
    }

    def __init__(self, detail_action=None, open_action=None, select_item_count=None, vendor_sack_type=None, open_on_acquire=None):  # noqa: E501
        """DestinyItemSackBlockDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._detail_action = None
        self._open_action = None
        self._select_item_count = None
        self._vendor_sack_type = None
        self._open_on_acquire = None
        self.discriminator = None

        if detail_action is not None:
            self.detail_action = detail_action
        if open_action is not None:
            self.open_action = open_action
        if select_item_count is not None:
            self.select_item_count = select_item_count
        if vendor_sack_type is not None:
            self.vendor_sack_type = vendor_sack_type
        if open_on_acquire is not None:
            self.open_on_acquire = open_on_acquire

    @property
    def detail_action(self):
        """Gets the detail_action of this DestinyItemSackBlockDefinition.  # noqa: E501

        A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.  # noqa: E501

        :return: The detail_action of this DestinyItemSackBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._detail_action

    @detail_action.setter
    def detail_action(self, detail_action):
        """Sets the detail_action of this DestinyItemSackBlockDefinition.

        A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.  # noqa: E501

        :param detail_action: The detail_action of this DestinyItemSackBlockDefinition.  # noqa: E501
        :type: str
        """

        self._detail_action = detail_action

    @property
    def open_action(self):
        """Gets the open_action of this DestinyItemSackBlockDefinition.  # noqa: E501

        The localized name of the action being performed when you open the sack.  # noqa: E501

        :return: The open_action of this DestinyItemSackBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._open_action

    @open_action.setter
    def open_action(self, open_action):
        """Sets the open_action of this DestinyItemSackBlockDefinition.

        The localized name of the action being performed when you open the sack.  # noqa: E501

        :param open_action: The open_action of this DestinyItemSackBlockDefinition.  # noqa: E501
        :type: str
        """

        self._open_action = open_action

    @property
    def select_item_count(self):
        """Gets the select_item_count of this DestinyItemSackBlockDefinition.  # noqa: E501


        :return: The select_item_count of this DestinyItemSackBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._select_item_count

    @select_item_count.setter
    def select_item_count(self, select_item_count):
        """Sets the select_item_count of this DestinyItemSackBlockDefinition.


        :param select_item_count: The select_item_count of this DestinyItemSackBlockDefinition.  # noqa: E501
        :type: int
        """

        self._select_item_count = select_item_count

    @property
    def vendor_sack_type(self):
        """Gets the vendor_sack_type of this DestinyItemSackBlockDefinition.  # noqa: E501


        :return: The vendor_sack_type of this DestinyItemSackBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._vendor_sack_type

    @vendor_sack_type.setter
    def vendor_sack_type(self, vendor_sack_type):
        """Sets the vendor_sack_type of this DestinyItemSackBlockDefinition.


        :param vendor_sack_type: The vendor_sack_type of this DestinyItemSackBlockDefinition.  # noqa: E501
        :type: str
        """

        self._vendor_sack_type = vendor_sack_type

    @property
    def open_on_acquire(self):
        """Gets the open_on_acquire of this DestinyItemSackBlockDefinition.  # noqa: E501


        :return: The open_on_acquire of this DestinyItemSackBlockDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._open_on_acquire

    @open_on_acquire.setter
    def open_on_acquire(self, open_on_acquire):
        """Sets the open_on_acquire of this DestinyItemSackBlockDefinition.


        :param open_on_acquire: The open_on_acquire of this DestinyItemSackBlockDefinition.  # noqa: E501
        :type: bool
        """

        self._open_on_acquire = open_on_acquire

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemSackBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
