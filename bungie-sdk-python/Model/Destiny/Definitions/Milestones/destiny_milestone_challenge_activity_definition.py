# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyMilestoneChallengeActivityDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'activity_hash': 'int',
        'challenges': 'list[DestinyMilestoneChallengeDefinition]',
        'activity_graph_nodes': 'list[DestinyMilestoneChallengeActivityGraphNodeEntry]',
        'phases': 'list[DestinyMilestoneChallengeActivityPhase]'
    }

    attribute_map = {
        'activity_hash': 'activityHash',
        'challenges': 'challenges',
        'activity_graph_nodes': 'activityGraphNodes',
        'phases': 'phases'
    }

    def __init__(self, activity_hash=None, challenges=None, activity_graph_nodes=None, phases=None):  # noqa: E501
        """DestinyMilestoneChallengeActivityDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._activity_hash = None
        self._challenges = None
        self._activity_graph_nodes = None
        self._phases = None
        self.discriminator = None

        if activity_hash is not None:
            self.activity_hash = activity_hash
        if challenges is not None:
            self.challenges = challenges
        if activity_graph_nodes is not None:
            self.activity_graph_nodes = activity_graph_nodes
        if phases is not None:
            self.phases = phases

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501

        The activity for which this challenge is active.  # noqa: E501

        :return: The activity_hash of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyMilestoneChallengeActivityDefinition.

        The activity for which this challenge is active.  # noqa: E501

        :param activity_hash: The activity_hash of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :type: int
        """

        self._activity_hash = activity_hash

    @property
    def challenges(self):
        """Gets the challenges of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501


        :return: The challenges of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :rtype: list[DestinyMilestoneChallengeDefinition]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this DestinyMilestoneChallengeActivityDefinition.


        :param challenges: The challenges of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :type: list[DestinyMilestoneChallengeDefinition]
        """

        self._challenges = challenges

    @property
    def activity_graph_nodes(self):
        """Gets the activity_graph_nodes of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501

        If the activity and its challenge is visible on any of these nodes, it will be returned.  # noqa: E501

        :return: The activity_graph_nodes of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :rtype: list[DestinyMilestoneChallengeActivityGraphNodeEntry]
        """
        return self._activity_graph_nodes

    @activity_graph_nodes.setter
    def activity_graph_nodes(self, activity_graph_nodes):
        """Sets the activity_graph_nodes of this DestinyMilestoneChallengeActivityDefinition.

        If the activity and its challenge is visible on any of these nodes, it will be returned.  # noqa: E501

        :param activity_graph_nodes: The activity_graph_nodes of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :type: list[DestinyMilestoneChallengeActivityGraphNodeEntry]
        """

        self._activity_graph_nodes = activity_graph_nodes

    @property
    def phases(self):
        """Gets the phases of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501

        Phases related to this activity, if there are any.  These will be listed in the order in which they will appear in the actual activity.  # noqa: E501

        :return: The phases of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :rtype: list[DestinyMilestoneChallengeActivityPhase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this DestinyMilestoneChallengeActivityDefinition.

        Phases related to this activity, if there are any.  These will be listed in the order in which they will appear in the actual activity.  # noqa: E501

        :param phases: The phases of this DestinyMilestoneChallengeActivityDefinition.  # noqa: E501
        :type: list[DestinyMilestoneChallengeActivityPhase]
        """

        self._phases = phases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyMilestoneChallengeActivityDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
