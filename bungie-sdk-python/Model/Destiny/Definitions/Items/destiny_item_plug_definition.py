# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemPlugDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'insertion_rules': 'list[DestinyPlugRuleDefinition]',
        'plug_category_identifier': 'str',
        'plug_category_hash': 'int',
        'on_action_recreate_self': 'bool',
        'insertion_material_requirement_hash': 'int',
        'preview_item_override_hash': 'int',
        'enabled_material_requirement_hash': 'int',
        'enabled_rules': 'list[DestinyPlugRuleDefinition]',
        'ui_plug_label': 'str',
        'plug_style': 'int',
        'is_pseudo_plug': 'bool',
        'plug_availability': 'int',
        'alternate_ui_plug_label': 'str',
        'alternate_plug_style': 'int',
        'is_dummy_plug': 'bool',
        'parent_item_override': 'DestinyParentItemOverride'
    }

    attribute_map = {
        'insertion_rules': 'insertionRules',
        'plug_category_identifier': 'plugCategoryIdentifier',
        'plug_category_hash': 'plugCategoryHash',
        'on_action_recreate_self': 'onActionRecreateSelf',
        'insertion_material_requirement_hash': 'insertionMaterialRequirementHash',
        'preview_item_override_hash': 'previewItemOverrideHash',
        'enabled_material_requirement_hash': 'enabledMaterialRequirementHash',
        'enabled_rules': 'enabledRules',
        'ui_plug_label': 'uiPlugLabel',
        'plug_style': 'plugStyle',
        'is_pseudo_plug': 'isPseudoPlug',
        'plug_availability': 'plugAvailability',
        'alternate_ui_plug_label': 'alternateUiPlugLabel',
        'alternate_plug_style': 'alternatePlugStyle',
        'is_dummy_plug': 'isDummyPlug',
        'parent_item_override': 'parentItemOverride'
    }

    def __init__(self, insertion_rules=None, plug_category_identifier=None, plug_category_hash=None, on_action_recreate_self=None, insertion_material_requirement_hash=None, preview_item_override_hash=None, enabled_material_requirement_hash=None, enabled_rules=None, ui_plug_label=None, plug_style=None, is_pseudo_plug=None, plug_availability=None, alternate_ui_plug_label=None, alternate_plug_style=None, is_dummy_plug=None, parent_item_override=None):  # noqa: E501
        """DestinyItemPlugDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._insertion_rules = None
        self._plug_category_identifier = None
        self._plug_category_hash = None
        self._on_action_recreate_self = None
        self._insertion_material_requirement_hash = None
        self._preview_item_override_hash = None
        self._enabled_material_requirement_hash = None
        self._enabled_rules = None
        self._ui_plug_label = None
        self._plug_style = None
        self._is_pseudo_plug = None
        self._plug_availability = None
        self._alternate_ui_plug_label = None
        self._alternate_plug_style = None
        self._is_dummy_plug = None
        self._parent_item_override = None
        self.discriminator = None

        if insertion_rules is not None:
            self.insertion_rules = insertion_rules
        if plug_category_identifier is not None:
            self.plug_category_identifier = plug_category_identifier
        if plug_category_hash is not None:
            self.plug_category_hash = plug_category_hash
        if on_action_recreate_self is not None:
            self.on_action_recreate_self = on_action_recreate_self
        if insertion_material_requirement_hash is not None:
            self.insertion_material_requirement_hash = insertion_material_requirement_hash
        if preview_item_override_hash is not None:
            self.preview_item_override_hash = preview_item_override_hash
        if enabled_material_requirement_hash is not None:
            self.enabled_material_requirement_hash = enabled_material_requirement_hash
        if enabled_rules is not None:
            self.enabled_rules = enabled_rules
        if ui_plug_label is not None:
            self.ui_plug_label = ui_plug_label
        if plug_style is not None:
            self.plug_style = plug_style
        if is_pseudo_plug is not None:
            self.is_pseudo_plug = is_pseudo_plug
        if plug_availability is not None:
            self.plug_availability = plug_availability
        if alternate_ui_plug_label is not None:
            self.alternate_ui_plug_label = alternate_ui_plug_label
        if alternate_plug_style is not None:
            self.alternate_plug_style = alternate_plug_style
        if is_dummy_plug is not None:
            self.is_dummy_plug = is_dummy_plug
        if parent_item_override is not None:
            self.parent_item_override = parent_item_override

    @property
    def insertion_rules(self):
        """Gets the insertion_rules of this DestinyItemPlugDefinition.  # noqa: E501

        The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.  The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.  # noqa: E501

        :return: The insertion_rules of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: list[DestinyPlugRuleDefinition]
        """
        return self._insertion_rules

    @insertion_rules.setter
    def insertion_rules(self, insertion_rules):
        """Sets the insertion_rules of this DestinyItemPlugDefinition.

        The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.  The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.  # noqa: E501

        :param insertion_rules: The insertion_rules of this DestinyItemPlugDefinition.  # noqa: E501
        :type: list[DestinyPlugRuleDefinition]
        """

        self._insertion_rules = insertion_rules

    @property
    def plug_category_identifier(self):
        """Gets the plug_category_identifier of this DestinyItemPlugDefinition.  # noqa: E501

        The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.  # noqa: E501

        :return: The plug_category_identifier of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: str
        """
        return self._plug_category_identifier

    @plug_category_identifier.setter
    def plug_category_identifier(self, plug_category_identifier):
        """Sets the plug_category_identifier of this DestinyItemPlugDefinition.

        The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.  # noqa: E501

        :param plug_category_identifier: The plug_category_identifier of this DestinyItemPlugDefinition.  # noqa: E501
        :type: str
        """

        self._plug_category_identifier = plug_category_identifier

    @property
    def plug_category_hash(self):
        """Gets the plug_category_hash of this DestinyItemPlugDefinition.  # noqa: E501

        The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.  # noqa: E501

        :return: The plug_category_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: int
        """
        return self._plug_category_hash

    @plug_category_hash.setter
    def plug_category_hash(self, plug_category_hash):
        """Sets the plug_category_hash of this DestinyItemPlugDefinition.

        The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.  # noqa: E501

        :param plug_category_hash: The plug_category_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :type: int
        """

        self._plug_category_hash = plug_category_hash

    @property
    def on_action_recreate_self(self):
        """Gets the on_action_recreate_self of this DestinyItemPlugDefinition.  # noqa: E501

        If you successfully socket the item, this will determine whether or not you get \"refunded\" on the plug.  # noqa: E501

        :return: The on_action_recreate_self of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._on_action_recreate_self

    @on_action_recreate_self.setter
    def on_action_recreate_self(self, on_action_recreate_self):
        """Sets the on_action_recreate_self of this DestinyItemPlugDefinition.

        If you successfully socket the item, this will determine whether or not you get \"refunded\" on the plug.  # noqa: E501

        :param on_action_recreate_self: The on_action_recreate_self of this DestinyItemPlugDefinition.  # noqa: E501
        :type: bool
        """

        self._on_action_recreate_self = on_action_recreate_self

    @property
    def insertion_material_requirement_hash(self):
        """Gets the insertion_material_requirement_hash of this DestinyItemPlugDefinition.  # noqa: E501

        If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.  # noqa: E501

        :return: The insertion_material_requirement_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: int
        """
        return self._insertion_material_requirement_hash

    @insertion_material_requirement_hash.setter
    def insertion_material_requirement_hash(self, insertion_material_requirement_hash):
        """Sets the insertion_material_requirement_hash of this DestinyItemPlugDefinition.

        If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.  # noqa: E501

        :param insertion_material_requirement_hash: The insertion_material_requirement_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :type: int
        """

        self._insertion_material_requirement_hash = insertion_material_requirement_hash

    @property
    def preview_item_override_hash(self):
        """Gets the preview_item_override_hash of this DestinyItemPlugDefinition.  # noqa: E501

        In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.  # noqa: E501

        :return: The preview_item_override_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: int
        """
        return self._preview_item_override_hash

    @preview_item_override_hash.setter
    def preview_item_override_hash(self, preview_item_override_hash):
        """Sets the preview_item_override_hash of this DestinyItemPlugDefinition.

        In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.  # noqa: E501

        :param preview_item_override_hash: The preview_item_override_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :type: int
        """

        self._preview_item_override_hash = preview_item_override_hash

    @property
    def enabled_material_requirement_hash(self):
        """Gets the enabled_material_requirement_hash of this DestinyItemPlugDefinition.  # noqa: E501

        It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.  # noqa: E501

        :return: The enabled_material_requirement_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: int
        """
        return self._enabled_material_requirement_hash

    @enabled_material_requirement_hash.setter
    def enabled_material_requirement_hash(self, enabled_material_requirement_hash):
        """Sets the enabled_material_requirement_hash of this DestinyItemPlugDefinition.

        It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.  # noqa: E501

        :param enabled_material_requirement_hash: The enabled_material_requirement_hash of this DestinyItemPlugDefinition.  # noqa: E501
        :type: int
        """

        self._enabled_material_requirement_hash = enabled_material_requirement_hash

    @property
    def enabled_rules(self):
        """Gets the enabled_rules of this DestinyItemPlugDefinition.  # noqa: E501

        The rules around whether the plug, once inserted, is enabled and providing its benefits.  The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.  # noqa: E501

        :return: The enabled_rules of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: list[DestinyPlugRuleDefinition]
        """
        return self._enabled_rules

    @enabled_rules.setter
    def enabled_rules(self, enabled_rules):
        """Sets the enabled_rules of this DestinyItemPlugDefinition.

        The rules around whether the plug, once inserted, is enabled and providing its benefits.  The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.  # noqa: E501

        :param enabled_rules: The enabled_rules of this DestinyItemPlugDefinition.  # noqa: E501
        :type: list[DestinyPlugRuleDefinition]
        """

        self._enabled_rules = enabled_rules

    @property
    def ui_plug_label(self):
        """Gets the ui_plug_label of this DestinyItemPlugDefinition.  # noqa: E501

        Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.  # noqa: E501

        :return: The ui_plug_label of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: str
        """
        return self._ui_plug_label

    @ui_plug_label.setter
    def ui_plug_label(self, ui_plug_label):
        """Sets the ui_plug_label of this DestinyItemPlugDefinition.

        Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.  # noqa: E501

        :param ui_plug_label: The ui_plug_label of this DestinyItemPlugDefinition.  # noqa: E501
        :type: str
        """

        self._ui_plug_label = ui_plug_label

    @property
    def plug_style(self):
        """Gets the plug_style of this DestinyItemPlugDefinition.  # noqa: E501


        :return: The plug_style of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: int
        """
        return self._plug_style

    @plug_style.setter
    def plug_style(self, plug_style):
        """Sets the plug_style of this DestinyItemPlugDefinition.


        :param plug_style: The plug_style of this DestinyItemPlugDefinition.  # noqa: E501
        :type: int
        """

        self._plug_style = plug_style

    @property
    def is_pseudo_plug(self):
        """Gets the is_pseudo_plug of this DestinyItemPlugDefinition.  # noqa: E501

        If TRUE, the plug doesn't actually convey any benefit: it only exists to show information in the UI.  # noqa: E501

        :return: The is_pseudo_plug of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_pseudo_plug

    @is_pseudo_plug.setter
    def is_pseudo_plug(self, is_pseudo_plug):
        """Sets the is_pseudo_plug of this DestinyItemPlugDefinition.

        If TRUE, the plug doesn't actually convey any benefit: it only exists to show information in the UI.  # noqa: E501

        :param is_pseudo_plug: The is_pseudo_plug of this DestinyItemPlugDefinition.  # noqa: E501
        :type: bool
        """

        self._is_pseudo_plug = is_pseudo_plug

    @property
    def plug_availability(self):
        """Gets the plug_availability of this DestinyItemPlugDefinition.  # noqa: E501

        Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!  # noqa: E501

        :return: The plug_availability of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: int
        """
        return self._plug_availability

    @plug_availability.setter
    def plug_availability(self, plug_availability):
        """Sets the plug_availability of this DestinyItemPlugDefinition.

        Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!  # noqa: E501

        :param plug_availability: The plug_availability of this DestinyItemPlugDefinition.  # noqa: E501
        :type: int
        """

        self._plug_availability = plug_availability

    @property
    def alternate_ui_plug_label(self):
        """Gets the alternate_ui_plug_label of this DestinyItemPlugDefinition.  # noqa: E501

        If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.  # noqa: E501

        :return: The alternate_ui_plug_label of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: str
        """
        return self._alternate_ui_plug_label

    @alternate_ui_plug_label.setter
    def alternate_ui_plug_label(self, alternate_ui_plug_label):
        """Sets the alternate_ui_plug_label of this DestinyItemPlugDefinition.

        If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.  # noqa: E501

        :param alternate_ui_plug_label: The alternate_ui_plug_label of this DestinyItemPlugDefinition.  # noqa: E501
        :type: str
        """

        self._alternate_ui_plug_label = alternate_ui_plug_label

    @property
    def alternate_plug_style(self):
        """Gets the alternate_plug_style of this DestinyItemPlugDefinition.  # noqa: E501

        The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.  # noqa: E501

        :return: The alternate_plug_style of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: int
        """
        return self._alternate_plug_style

    @alternate_plug_style.setter
    def alternate_plug_style(self, alternate_plug_style):
        """Sets the alternate_plug_style of this DestinyItemPlugDefinition.

        The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.  # noqa: E501

        :param alternate_plug_style: The alternate_plug_style of this DestinyItemPlugDefinition.  # noqa: E501
        :type: int
        """

        self._alternate_plug_style = alternate_plug_style

    @property
    def is_dummy_plug(self):
        """Gets the is_dummy_plug of this DestinyItemPlugDefinition.  # noqa: E501

        If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.  # noqa: E501

        :return: The is_dummy_plug of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_dummy_plug

    @is_dummy_plug.setter
    def is_dummy_plug(self, is_dummy_plug):
        """Sets the is_dummy_plug of this DestinyItemPlugDefinition.

        If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.  # noqa: E501

        :param is_dummy_plug: The is_dummy_plug of this DestinyItemPlugDefinition.  # noqa: E501
        :type: bool
        """

        self._is_dummy_plug = is_dummy_plug

    @property
    def parent_item_override(self):
        """Gets the parent_item_override of this DestinyItemPlugDefinition.  # noqa: E501

        Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!  In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.  If this is populated, it will have the override data to be applied when this plug is applied to an item.  # noqa: E501

        :return: The parent_item_override of this DestinyItemPlugDefinition.  # noqa: E501
        :rtype: DestinyParentItemOverride
        """
        return self._parent_item_override

    @parent_item_override.setter
    def parent_item_override(self, parent_item_override):
        """Sets the parent_item_override of this DestinyItemPlugDefinition.

        Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!  In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.  If this is populated, it will have the override data to be applied when this plug is applied to an item.  # noqa: E501

        :param parent_item_override: The parent_item_override of this DestinyItemPlugDefinition.  # noqa: E501
        :type: DestinyParentItemOverride
        """

        self._parent_item_override = parent_item_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemPlugDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
