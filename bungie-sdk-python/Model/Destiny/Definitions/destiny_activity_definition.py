# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyActivityDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_properties': 'DestinyDisplayPropertiesDefinition',
        'original_display_properties': 'DestinyDisplayPropertiesDefinition',
        'selection_screen_display_properties': 'DestinyDisplayPropertiesDefinition',
        'release_icon': 'str',
        'release_time': 'int',
        'activity_level': 'int',
        'activity_light_level': 'int',
        'destination_hash': 'int',
        'place_hash': 'int',
        'activity_type_hash': 'int',
        'tier': 'int',
        'pgcr_image': 'str',
        'rewards': 'list[DestinyActivityRewardDefinition]',
        'modifiers': 'list[DestinyActivityModifierReferenceDefinition]',
        'is_playlist': 'bool',
        'challenges': 'list[DestinyActivityChallengeDefinition]',
        'optional_unlock_strings': 'list[DestinyActivityUnlockStringDefinition]',
        'playlist_items': 'list[DestinyActivityPlaylistItemDefinition]',
        'activity_graph_list': 'list[DestinyActivityGraphListEntryDefinition]',
        'matchmaking': 'DestinyActivityMatchmakingBlockDefinition',
        'guided_game': 'DestinyActivityGuidedBlockDefinition',
        'direct_activity_mode_hash': 'int',
        'direct_activity_mode_type': 'int',
        'loadouts': 'list[DestinyActivityLoadoutRequirementSet]',
        'activity_mode_hashes': 'list[int]',
        'activity_mode_types': 'list[int]',
        'is_pv_p': 'bool',
        'insertion_points': 'list[DestinyActivityInsertionPointDefinition]',
        'activity_location_mappings': 'list[DestinyEnvironmentLocationMapping]',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'original_display_properties': 'originalDisplayProperties',
        'selection_screen_display_properties': 'selectionScreenDisplayProperties',
        'release_icon': 'releaseIcon',
        'release_time': 'releaseTime',
        'activity_level': 'activityLevel',
        'activity_light_level': 'activityLightLevel',
        'destination_hash': 'destinationHash',
        'place_hash': 'placeHash',
        'activity_type_hash': 'activityTypeHash',
        'tier': 'tier',
        'pgcr_image': 'pgcrImage',
        'rewards': 'rewards',
        'modifiers': 'modifiers',
        'is_playlist': 'isPlaylist',
        'challenges': 'challenges',
        'optional_unlock_strings': 'optionalUnlockStrings',
        'playlist_items': 'playlistItems',
        'activity_graph_list': 'activityGraphList',
        'matchmaking': 'matchmaking',
        'guided_game': 'guidedGame',
        'direct_activity_mode_hash': 'directActivityModeHash',
        'direct_activity_mode_type': 'directActivityModeType',
        'loadouts': 'loadouts',
        'activity_mode_hashes': 'activityModeHashes',
        'activity_mode_types': 'activityModeTypes',
        'is_pv_p': 'isPvP',
        'insertion_points': 'insertionPoints',
        'activity_location_mappings': 'activityLocationMappings',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, original_display_properties=None, selection_screen_display_properties=None, release_icon=None, release_time=None, activity_level=None, activity_light_level=None, destination_hash=None, place_hash=None, activity_type_hash=None, tier=None, pgcr_image=None, rewards=None, modifiers=None, is_playlist=None, challenges=None, optional_unlock_strings=None, playlist_items=None, activity_graph_list=None, matchmaking=None, guided_game=None, direct_activity_mode_hash=None, direct_activity_mode_type=None, loadouts=None, activity_mode_hashes=None, activity_mode_types=None, is_pv_p=None, insertion_points=None, activity_location_mappings=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyActivityDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._display_properties = None
        self._original_display_properties = None
        self._selection_screen_display_properties = None
        self._release_icon = None
        self._release_time = None
        self._activity_level = None
        self._activity_light_level = None
        self._destination_hash = None
        self._place_hash = None
        self._activity_type_hash = None
        self._tier = None
        self._pgcr_image = None
        self._rewards = None
        self._modifiers = None
        self._is_playlist = None
        self._challenges = None
        self._optional_unlock_strings = None
        self._playlist_items = None
        self._activity_graph_list = None
        self._matchmaking = None
        self._guided_game = None
        self._direct_activity_mode_hash = None
        self._direct_activity_mode_type = None
        self._loadouts = None
        self._activity_mode_hashes = None
        self._activity_mode_types = None
        self._is_pv_p = None
        self._insertion_points = None
        self._activity_location_mappings = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if original_display_properties is not None:
            self.original_display_properties = original_display_properties
        if selection_screen_display_properties is not None:
            self.selection_screen_display_properties = selection_screen_display_properties
        if release_icon is not None:
            self.release_icon = release_icon
        if release_time is not None:
            self.release_time = release_time
        if activity_level is not None:
            self.activity_level = activity_level
        if activity_light_level is not None:
            self.activity_light_level = activity_light_level
        if destination_hash is not None:
            self.destination_hash = destination_hash
        if place_hash is not None:
            self.place_hash = place_hash
        if activity_type_hash is not None:
            self.activity_type_hash = activity_type_hash
        if tier is not None:
            self.tier = tier
        if pgcr_image is not None:
            self.pgcr_image = pgcr_image
        if rewards is not None:
            self.rewards = rewards
        if modifiers is not None:
            self.modifiers = modifiers
        if is_playlist is not None:
            self.is_playlist = is_playlist
        if challenges is not None:
            self.challenges = challenges
        if optional_unlock_strings is not None:
            self.optional_unlock_strings = optional_unlock_strings
        if playlist_items is not None:
            self.playlist_items = playlist_items
        if activity_graph_list is not None:
            self.activity_graph_list = activity_graph_list
        if matchmaking is not None:
            self.matchmaking = matchmaking
        if guided_game is not None:
            self.guided_game = guided_game
        self.direct_activity_mode_hash = direct_activity_mode_hash
        self.direct_activity_mode_type = direct_activity_mode_type
        if loadouts is not None:
            self.loadouts = loadouts
        if activity_mode_hashes is not None:
            self.activity_mode_hashes = activity_mode_hashes
        if activity_mode_types is not None:
            self.activity_mode_types = activity_mode_types
        if is_pv_p is not None:
            self.is_pv_p = is_pv_p
        if insertion_points is not None:
            self.insertion_points = insertion_points
        if activity_location_mappings is not None:
            self.activity_location_mappings = activity_location_mappings
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyActivityDefinition.  # noqa: E501

        The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.  # noqa: E501

        :return: The display_properties of this DestinyActivityDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyActivityDefinition.

        The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.  # noqa: E501

        :param display_properties: The display_properties of this DestinyActivityDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def original_display_properties(self):
        """Gets the original_display_properties of this DestinyActivityDefinition.  # noqa: E501

        The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).  # noqa: E501

        :return: The original_display_properties of this DestinyActivityDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._original_display_properties

    @original_display_properties.setter
    def original_display_properties(self, original_display_properties):
        """Sets the original_display_properties of this DestinyActivityDefinition.

        The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).  # noqa: E501

        :param original_display_properties: The original_display_properties of this DestinyActivityDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._original_display_properties = original_display_properties

    @property
    def selection_screen_display_properties(self):
        """Gets the selection_screen_display_properties of this DestinyActivityDefinition.  # noqa: E501

        The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.  # noqa: E501

        :return: The selection_screen_display_properties of this DestinyActivityDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._selection_screen_display_properties

    @selection_screen_display_properties.setter
    def selection_screen_display_properties(self, selection_screen_display_properties):
        """Sets the selection_screen_display_properties of this DestinyActivityDefinition.

        The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.  # noqa: E501

        :param selection_screen_display_properties: The selection_screen_display_properties of this DestinyActivityDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._selection_screen_display_properties = selection_screen_display_properties

    @property
    def release_icon(self):
        """Gets the release_icon of this DestinyActivityDefinition.  # noqa: E501

        If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.  # noqa: E501

        :return: The release_icon of this DestinyActivityDefinition.  # noqa: E501
        :rtype: str
        """
        return self._release_icon

    @release_icon.setter
    def release_icon(self, release_icon):
        """Sets the release_icon of this DestinyActivityDefinition.

        If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.  # noqa: E501

        :param release_icon: The release_icon of this DestinyActivityDefinition.  # noqa: E501
        :type: str
        """

        self._release_icon = release_icon

    @property
    def release_time(self):
        """Gets the release_time of this DestinyActivityDefinition.  # noqa: E501

        If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.  # noqa: E501

        :return: The release_time of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time):
        """Sets the release_time of this DestinyActivityDefinition.

        If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.  # noqa: E501

        :param release_time: The release_time of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._release_time = release_time

    @property
    def activity_level(self):
        """Gets the activity_level of this DestinyActivityDefinition.  # noqa: E501

        The difficulty level of the activity.  # noqa: E501

        :return: The activity_level of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._activity_level

    @activity_level.setter
    def activity_level(self, activity_level):
        """Sets the activity_level of this DestinyActivityDefinition.

        The difficulty level of the activity.  # noqa: E501

        :param activity_level: The activity_level of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._activity_level = activity_level

    @property
    def activity_light_level(self):
        """Gets the activity_light_level of this DestinyActivityDefinition.  # noqa: E501

        The recommended light level for this activity.  # noqa: E501

        :return: The activity_light_level of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._activity_light_level

    @activity_light_level.setter
    def activity_light_level(self, activity_light_level):
        """Sets the activity_light_level of this DestinyActivityDefinition.

        The recommended light level for this activity.  # noqa: E501

        :param activity_light_level: The activity_light_level of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._activity_light_level = activity_light_level

    @property
    def destination_hash(self):
        """Gets the destination_hash of this DestinyActivityDefinition.  # noqa: E501

        The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a \"Place\". For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.  # noqa: E501

        :return: The destination_hash of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._destination_hash

    @destination_hash.setter
    def destination_hash(self, destination_hash):
        """Sets the destination_hash of this DestinyActivityDefinition.

        The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a \"Place\". For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.  # noqa: E501

        :param destination_hash: The destination_hash of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._destination_hash = destination_hash

    @property
    def place_hash(self):
        """Gets the place_hash of this DestinyActivityDefinition.  # noqa: E501

        The hash identifier for the \"Place\" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.  # noqa: E501

        :return: The place_hash of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._place_hash

    @place_hash.setter
    def place_hash(self, place_hash):
        """Sets the place_hash of this DestinyActivityDefinition.

        The hash identifier for the \"Place\" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.  # noqa: E501

        :param place_hash: The place_hash of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._place_hash = place_hash

    @property
    def activity_type_hash(self):
        """Gets the activity_type_hash of this DestinyActivityDefinition.  # noqa: E501

        The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.  # noqa: E501

        :return: The activity_type_hash of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._activity_type_hash

    @activity_type_hash.setter
    def activity_type_hash(self, activity_type_hash):
        """Sets the activity_type_hash of this DestinyActivityDefinition.

        The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.  # noqa: E501

        :param activity_type_hash: The activity_type_hash of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._activity_type_hash = activity_type_hash

    @property
    def tier(self):
        """Gets the tier of this DestinyActivityDefinition.  # noqa: E501

        The difficulty tier of the activity.  # noqa: E501

        :return: The tier of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this DestinyActivityDefinition.

        The difficulty tier of the activity.  # noqa: E501

        :param tier: The tier of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._tier = tier

    @property
    def pgcr_image(self):
        """Gets the pgcr_image of this DestinyActivityDefinition.  # noqa: E501

        When Activities are completed, we generate a \"Post-Game Carnage Report\", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.  # noqa: E501

        :return: The pgcr_image of this DestinyActivityDefinition.  # noqa: E501
        :rtype: str
        """
        return self._pgcr_image

    @pgcr_image.setter
    def pgcr_image(self, pgcr_image):
        """Sets the pgcr_image of this DestinyActivityDefinition.

        When Activities are completed, we generate a \"Post-Game Carnage Report\", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.  # noqa: E501

        :param pgcr_image: The pgcr_image of this DestinyActivityDefinition.  # noqa: E501
        :type: str
        """

        self._pgcr_image = pgcr_image

    @property
    def rewards(self):
        """Gets the rewards of this DestinyActivityDefinition.  # noqa: E501

        The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or \"Dummy\" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)  # noqa: E501

        :return: The rewards of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityRewardDefinition]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this DestinyActivityDefinition.

        The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or \"Dummy\" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)  # noqa: E501

        :param rewards: The rewards of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityRewardDefinition]
        """

        self._rewards = rewards

    @property
    def modifiers(self):
        """Gets the modifiers of this DestinyActivityDefinition.  # noqa: E501

        Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.  # noqa: E501

        :return: The modifiers of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityModifierReferenceDefinition]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this DestinyActivityDefinition.

        Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.  # noqa: E501

        :param modifiers: The modifiers of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityModifierReferenceDefinition]
        """

        self._modifiers = modifiers

    @property
    def is_playlist(self):
        """Gets the is_playlist of this DestinyActivityDefinition.  # noqa: E501

        If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.  # noqa: E501

        :return: The is_playlist of this DestinyActivityDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_playlist

    @is_playlist.setter
    def is_playlist(self, is_playlist):
        """Sets the is_playlist of this DestinyActivityDefinition.

        If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.  # noqa: E501

        :param is_playlist: The is_playlist of this DestinyActivityDefinition.  # noqa: E501
        :type: bool
        """

        self._is_playlist = is_playlist

    @property
    def challenges(self):
        """Gets the challenges of this DestinyActivityDefinition.  # noqa: E501

        An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like \"Skulls\" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.  # noqa: E501

        :return: The challenges of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityChallengeDefinition]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this DestinyActivityDefinition.

        An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like \"Skulls\" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.  # noqa: E501

        :param challenges: The challenges of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityChallengeDefinition]
        """

        self._challenges = challenges

    @property
    def optional_unlock_strings(self):
        """Gets the optional_unlock_strings of this DestinyActivityDefinition.  # noqa: E501

        If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.  # noqa: E501

        :return: The optional_unlock_strings of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityUnlockStringDefinition]
        """
        return self._optional_unlock_strings

    @optional_unlock_strings.setter
    def optional_unlock_strings(self, optional_unlock_strings):
        """Sets the optional_unlock_strings of this DestinyActivityDefinition.

        If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.  # noqa: E501

        :param optional_unlock_strings: The optional_unlock_strings of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityUnlockStringDefinition]
        """

        self._optional_unlock_strings = optional_unlock_strings

    @property
    def playlist_items(self):
        """Gets the playlist_items of this DestinyActivityDefinition.  # noqa: E501

        Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.  # noqa: E501

        :return: The playlist_items of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityPlaylistItemDefinition]
        """
        return self._playlist_items

    @playlist_items.setter
    def playlist_items(self, playlist_items):
        """Sets the playlist_items of this DestinyActivityDefinition.

        Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.  # noqa: E501

        :param playlist_items: The playlist_items of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityPlaylistItemDefinition]
        """

        self._playlist_items = playlist_items

    @property
    def activity_graph_list(self):
        """Gets the activity_graph_list of this DestinyActivityDefinition.  # noqa: E501

        Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.  # noqa: E501

        :return: The activity_graph_list of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityGraphListEntryDefinition]
        """
        return self._activity_graph_list

    @activity_graph_list.setter
    def activity_graph_list(self, activity_graph_list):
        """Sets the activity_graph_list of this DestinyActivityDefinition.

        Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.  # noqa: E501

        :param activity_graph_list: The activity_graph_list of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityGraphListEntryDefinition]
        """

        self._activity_graph_list = activity_graph_list

    @property
    def matchmaking(self):
        """Gets the matchmaking of this DestinyActivityDefinition.  # noqa: E501

        This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.  # noqa: E501

        :return: The matchmaking of this DestinyActivityDefinition.  # noqa: E501
        :rtype: DestinyActivityMatchmakingBlockDefinition
        """
        return self._matchmaking

    @matchmaking.setter
    def matchmaking(self, matchmaking):
        """Sets the matchmaking of this DestinyActivityDefinition.

        This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.  # noqa: E501

        :param matchmaking: The matchmaking of this DestinyActivityDefinition.  # noqa: E501
        :type: DestinyActivityMatchmakingBlockDefinition
        """

        self._matchmaking = matchmaking

    @property
    def guided_game(self):
        """Gets the guided_game of this DestinyActivityDefinition.  # noqa: E501

        This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.  # noqa: E501

        :return: The guided_game of this DestinyActivityDefinition.  # noqa: E501
        :rtype: DestinyActivityGuidedBlockDefinition
        """
        return self._guided_game

    @guided_game.setter
    def guided_game(self, guided_game):
        """Sets the guided_game of this DestinyActivityDefinition.

        This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.  # noqa: E501

        :param guided_game: The guided_game of this DestinyActivityDefinition.  # noqa: E501
        :type: DestinyActivityGuidedBlockDefinition
        """

        self._guided_game = guided_game

    @property
    def direct_activity_mode_hash(self):
        """Gets the direct_activity_mode_hash of this DestinyActivityDefinition.  # noqa: E501

        If this activity had an activity mode directly defined on it, this will be the hash of that mode.  # noqa: E501

        :return: The direct_activity_mode_hash of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._direct_activity_mode_hash

    @direct_activity_mode_hash.setter
    def direct_activity_mode_hash(self, direct_activity_mode_hash):
        """Sets the direct_activity_mode_hash of this DestinyActivityDefinition.

        If this activity had an activity mode directly defined on it, this will be the hash of that mode.  # noqa: E501

        :param direct_activity_mode_hash: The direct_activity_mode_hash of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._direct_activity_mode_hash = direct_activity_mode_hash

    @property
    def direct_activity_mode_type(self):
        """Gets the direct_activity_mode_type of this DestinyActivityDefinition.  # noqa: E501

        If the activity had an activity mode directly defined on it, this will be the enum value of that mode.  # noqa: E501

        :return: The direct_activity_mode_type of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._direct_activity_mode_type

    @direct_activity_mode_type.setter
    def direct_activity_mode_type(self, direct_activity_mode_type):
        """Sets the direct_activity_mode_type of this DestinyActivityDefinition.

        If the activity had an activity mode directly defined on it, this will be the enum value of that mode.  # noqa: E501

        :param direct_activity_mode_type: The direct_activity_mode_type of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]  # noqa: E501
        if direct_activity_mode_type not in allowed_values:
            raise ValueError(
                "Invalid value for `direct_activity_mode_type` ({0}), must be one of {1}"  # noqa: E501
                .format(direct_activity_mode_type, allowed_values)
            )

        self._direct_activity_mode_type = direct_activity_mode_type

    @property
    def loadouts(self):
        """Gets the loadouts of this DestinyActivityDefinition.  # noqa: E501

        The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.  # noqa: E501

        :return: The loadouts of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityLoadoutRequirementSet]
        """
        return self._loadouts

    @loadouts.setter
    def loadouts(self, loadouts):
        """Sets the loadouts of this DestinyActivityDefinition.

        The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.  # noqa: E501

        :param loadouts: The loadouts of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityLoadoutRequirementSet]
        """

        self._loadouts = loadouts

    @property
    def activity_mode_hashes(self):
        """Gets the activity_mode_hashes of this DestinyActivityDefinition.  # noqa: E501

        The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.  # noqa: E501

        :return: The activity_mode_hashes of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._activity_mode_hashes

    @activity_mode_hashes.setter
    def activity_mode_hashes(self, activity_mode_hashes):
        """Sets the activity_mode_hashes of this DestinyActivityDefinition.

        The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.  # noqa: E501

        :param activity_mode_hashes: The activity_mode_hashes of this DestinyActivityDefinition.  # noqa: E501
        :type: list[int]
        """

        self._activity_mode_hashes = activity_mode_hashes

    @property
    def activity_mode_types(self):
        """Gets the activity_mode_types of this DestinyActivityDefinition.  # noqa: E501

        The activity modes - if any - in enum form. Because we can't seem to escape the enums.  # noqa: E501

        :return: The activity_mode_types of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._activity_mode_types

    @activity_mode_types.setter
    def activity_mode_types(self, activity_mode_types):
        """Sets the activity_mode_types of this DestinyActivityDefinition.

        The activity modes - if any - in enum form. Because we can't seem to escape the enums.  # noqa: E501

        :param activity_mode_types: The activity_mode_types of this DestinyActivityDefinition.  # noqa: E501
        :type: list[int]
        """

        self._activity_mode_types = activity_mode_types

    @property
    def is_pv_p(self):
        """Gets the is_pv_p of this DestinyActivityDefinition.  # noqa: E501

        If true, this activity is a PVP activity or playlist.  # noqa: E501

        :return: The is_pv_p of this DestinyActivityDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_pv_p

    @is_pv_p.setter
    def is_pv_p(self, is_pv_p):
        """Sets the is_pv_p of this DestinyActivityDefinition.

        If true, this activity is a PVP activity or playlist.  # noqa: E501

        :param is_pv_p: The is_pv_p of this DestinyActivityDefinition.  # noqa: E501
        :type: bool
        """

        self._is_pv_p = is_pv_p

    @property
    def insertion_points(self):
        """Gets the insertion_points of this DestinyActivityDefinition.  # noqa: E501

        The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.  # noqa: E501

        :return: The insertion_points of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyActivityInsertionPointDefinition]
        """
        return self._insertion_points

    @insertion_points.setter
    def insertion_points(self, insertion_points):
        """Sets the insertion_points of this DestinyActivityDefinition.

        The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.  # noqa: E501

        :param insertion_points: The insertion_points of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyActivityInsertionPointDefinition]
        """

        self._insertion_points = insertion_points

    @property
    def activity_location_mappings(self):
        """Gets the activity_location_mappings of this DestinyActivityDefinition.  # noqa: E501

        A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.  # noqa: E501

        :return: The activity_location_mappings of this DestinyActivityDefinition.  # noqa: E501
        :rtype: list[DestinyEnvironmentLocationMapping]
        """
        return self._activity_location_mappings

    @activity_location_mappings.setter
    def activity_location_mappings(self, activity_location_mappings):
        """Sets the activity_location_mappings of this DestinyActivityDefinition.

        A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.  # noqa: E501

        :param activity_location_mappings: The activity_location_mappings of this DestinyActivityDefinition.  # noqa: E501
        :type: list[DestinyEnvironmentLocationMapping]
        """

        self._activity_location_mappings = activity_location_mappings

    @property
    def hash(self):
        """Gets the hash of this DestinyActivityDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyActivityDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyActivityDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyActivityDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyActivityDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyActivityDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyActivityDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyActivityDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyActivityDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyActivityDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
