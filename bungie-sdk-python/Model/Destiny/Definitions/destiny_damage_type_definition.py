# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyDamageTypeDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_properties': 'DestinyDisplayPropertiesDefinition',
        'transparent_icon_path': 'str',
        'show_icon': 'bool',
        'enum_value': 'int',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'transparent_icon_path': 'transparentIconPath',
        'show_icon': 'showIcon',
        'enum_value': 'enumValue',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, transparent_icon_path=None, show_icon=None, enum_value=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyDamageTypeDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._display_properties = None
        self._transparent_icon_path = None
        self._show_icon = None
        self._enum_value = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if transparent_icon_path is not None:
            self.transparent_icon_path = transparent_icon_path
        if show_icon is not None:
            self.show_icon = show_icon
        if enum_value is not None:
            self.enum_value = enum_value
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDamageTypeDefinition.  # noqa: E501

        The description of the damage type, icon etc...  # noqa: E501

        :return: The display_properties of this DestinyDamageTypeDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDamageTypeDefinition.

        The description of the damage type, icon etc...  # noqa: E501

        :param display_properties: The display_properties of this DestinyDamageTypeDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def transparent_icon_path(self):
        """Gets the transparent_icon_path of this DestinyDamageTypeDefinition.  # noqa: E501

        A variant of the icon that is transparent and colorless.  # noqa: E501

        :return: The transparent_icon_path of this DestinyDamageTypeDefinition.  # noqa: E501
        :rtype: str
        """
        return self._transparent_icon_path

    @transparent_icon_path.setter
    def transparent_icon_path(self, transparent_icon_path):
        """Sets the transparent_icon_path of this DestinyDamageTypeDefinition.

        A variant of the icon that is transparent and colorless.  # noqa: E501

        :param transparent_icon_path: The transparent_icon_path of this DestinyDamageTypeDefinition.  # noqa: E501
        :type: str
        """

        self._transparent_icon_path = transparent_icon_path

    @property
    def show_icon(self):
        """Gets the show_icon of this DestinyDamageTypeDefinition.  # noqa: E501

        If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.  # noqa: E501

        :return: The show_icon of this DestinyDamageTypeDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._show_icon

    @show_icon.setter
    def show_icon(self, show_icon):
        """Sets the show_icon of this DestinyDamageTypeDefinition.

        If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.  # noqa: E501

        :param show_icon: The show_icon of this DestinyDamageTypeDefinition.  # noqa: E501
        :type: bool
        """

        self._show_icon = show_icon

    @property
    def enum_value(self):
        """Gets the enum_value of this DestinyDamageTypeDefinition.  # noqa: E501

        We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value.  # noqa: E501

        :return: The enum_value of this DestinyDamageTypeDefinition.  # noqa: E501
        :rtype: int
        """
        return self._enum_value

    @enum_value.setter
    def enum_value(self, enum_value):
        """Sets the enum_value of this DestinyDamageTypeDefinition.

        We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value.  # noqa: E501

        :param enum_value: The enum_value of this DestinyDamageTypeDefinition.  # noqa: E501
        :type: int
        """

        self._enum_value = enum_value

    @property
    def hash(self):
        """Gets the hash of this DestinyDamageTypeDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyDamageTypeDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDamageTypeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyDamageTypeDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDamageTypeDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyDamageTypeDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDamageTypeDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyDamageTypeDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDamageTypeDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyDamageTypeDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDamageTypeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyDamageTypeDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyDamageTypeDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
