# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyMaterialRequirement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_hash': 'int',
        'delete_on_action': 'bool',
        'count': 'int',
        'omit_from_requirements': 'bool'
    }

    attribute_map = {
        'item_hash': 'itemHash',
        'delete_on_action': 'deleteOnAction',
        'count': 'count',
        'omit_from_requirements': 'omitFromRequirements'
    }

    def __init__(self, item_hash=None, delete_on_action=None, count=None, omit_from_requirements=None):  # noqa: E501
        """DestinyMaterialRequirement - a model defined in OpenAPI"""  # noqa: E501

        self._item_hash = None
        self._delete_on_action = None
        self._count = None
        self._omit_from_requirements = None
        self.discriminator = None

        if item_hash is not None:
            self.item_hash = item_hash
        if delete_on_action is not None:
            self.delete_on_action = delete_on_action
        if count is not None:
            self.count = count
        if omit_from_requirements is not None:
            self.omit_from_requirements = omit_from_requirements

    @property
    def item_hash(self):
        """Gets the item_hash of this DestinyMaterialRequirement.  # noqa: E501

        The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.  # noqa: E501

        :return: The item_hash of this DestinyMaterialRequirement.  # noqa: E501
        :rtype: int
        """
        return self._item_hash

    @item_hash.setter
    def item_hash(self, item_hash):
        """Sets the item_hash of this DestinyMaterialRequirement.

        The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.  # noqa: E501

        :param item_hash: The item_hash of this DestinyMaterialRequirement.  # noqa: E501
        :type: int
        """

        self._item_hash = item_hash

    @property
    def delete_on_action(self):
        """Gets the delete_on_action of this DestinyMaterialRequirement.  # noqa: E501

        If True, the material will be removed from the character's inventory when the action is performed.  # noqa: E501

        :return: The delete_on_action of this DestinyMaterialRequirement.  # noqa: E501
        :rtype: bool
        """
        return self._delete_on_action

    @delete_on_action.setter
    def delete_on_action(self, delete_on_action):
        """Sets the delete_on_action of this DestinyMaterialRequirement.

        If True, the material will be removed from the character's inventory when the action is performed.  # noqa: E501

        :param delete_on_action: The delete_on_action of this DestinyMaterialRequirement.  # noqa: E501
        :type: bool
        """

        self._delete_on_action = delete_on_action

    @property
    def count(self):
        """Gets the count of this DestinyMaterialRequirement.  # noqa: E501

        The amount of the material required.  # noqa: E501

        :return: The count of this DestinyMaterialRequirement.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DestinyMaterialRequirement.

        The amount of the material required.  # noqa: E501

        :param count: The count of this DestinyMaterialRequirement.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def omit_from_requirements(self):
        """Gets the omit_from_requirements of this DestinyMaterialRequirement.  # noqa: E501

        If True, this requirement is \"silent\": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.  # noqa: E501

        :return: The omit_from_requirements of this DestinyMaterialRequirement.  # noqa: E501
        :rtype: bool
        """
        return self._omit_from_requirements

    @omit_from_requirements.setter
    def omit_from_requirements(self, omit_from_requirements):
        """Sets the omit_from_requirements of this DestinyMaterialRequirement.

        If True, this requirement is \"silent\": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.  # noqa: E501

        :param omit_from_requirements: The omit_from_requirements of this DestinyMaterialRequirement.  # noqa: E501
        :type: bool
        """

        self._omit_from_requirements = omit_from_requirements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyMaterialRequirement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
