# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemSourceDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'level': 'int',
        'min_quality': 'int',
        'max_quality': 'int',
        'min_level_required': 'int',
        'max_level_required': 'int',
        'computed_stats': 'dict(str, DestinyInventoryItemStatDefinition)',
        'source_hashes': 'list[int]'
    }

    attribute_map = {
        'level': 'level',
        'min_quality': 'minQuality',
        'max_quality': 'maxQuality',
        'min_level_required': 'minLevelRequired',
        'max_level_required': 'maxLevelRequired',
        'computed_stats': 'computedStats',
        'source_hashes': 'sourceHashes'
    }

    def __init__(self, level=None, min_quality=None, max_quality=None, min_level_required=None, max_level_required=None, computed_stats=None, source_hashes=None):  # noqa: E501
        """DestinyItemSourceDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._level = None
        self._min_quality = None
        self._max_quality = None
        self._min_level_required = None
        self._max_level_required = None
        self._computed_stats = None
        self._source_hashes = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if min_quality is not None:
            self.min_quality = min_quality
        if max_quality is not None:
            self.max_quality = max_quality
        if min_level_required is not None:
            self.min_level_required = min_level_required
        if max_level_required is not None:
            self.max_level_required = max_level_required
        if computed_stats is not None:
            self.computed_stats = computed_stats
        if source_hashes is not None:
            self.source_hashes = source_hashes

    @property
    def level(self):
        """Gets the level of this DestinyItemSourceDefinition.  # noqa: E501

        The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns.  # noqa: E501

        :return: The level of this DestinyItemSourceDefinition.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DestinyItemSourceDefinition.

        The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns.  # noqa: E501

        :param level: The level of this DestinyItemSourceDefinition.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def min_quality(self):
        """Gets the min_quality of this DestinyItemSourceDefinition.  # noqa: E501

        The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don't ask Phaedrus about it, he'll never stop talking and you'll have to write a book about it.  # noqa: E501

        :return: The min_quality of this DestinyItemSourceDefinition.  # noqa: E501
        :rtype: int
        """
        return self._min_quality

    @min_quality.setter
    def min_quality(self, min_quality):
        """Sets the min_quality of this DestinyItemSourceDefinition.

        The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don't ask Phaedrus about it, he'll never stop talking and you'll have to write a book about it.  # noqa: E501

        :param min_quality: The min_quality of this DestinyItemSourceDefinition.  # noqa: E501
        :type: int
        """

        self._min_quality = min_quality

    @property
    def max_quality(self):
        """Gets the max_quality of this DestinyItemSourceDefinition.  # noqa: E501

        The maximum quality at which the item spawns for this level.  # noqa: E501

        :return: The max_quality of this DestinyItemSourceDefinition.  # noqa: E501
        :rtype: int
        """
        return self._max_quality

    @max_quality.setter
    def max_quality(self, max_quality):
        """Sets the max_quality of this DestinyItemSourceDefinition.

        The maximum quality at which the item spawns for this level.  # noqa: E501

        :param max_quality: The max_quality of this DestinyItemSourceDefinition.  # noqa: E501
        :type: int
        """

        self._max_quality = max_quality

    @property
    def min_level_required(self):
        """Gets the min_level_required of this DestinyItemSourceDefinition.  # noqa: E501

        The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.  # noqa: E501

        :return: The min_level_required of this DestinyItemSourceDefinition.  # noqa: E501
        :rtype: int
        """
        return self._min_level_required

    @min_level_required.setter
    def min_level_required(self, min_level_required):
        """Sets the min_level_required of this DestinyItemSourceDefinition.

        The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.  # noqa: E501

        :param min_level_required: The min_level_required of this DestinyItemSourceDefinition.  # noqa: E501
        :type: int
        """

        self._min_level_required = min_level_required

    @property
    def max_level_required(self):
        """Gets the max_level_required of this DestinyItemSourceDefinition.  # noqa: E501

        The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.  # noqa: E501

        :return: The max_level_required of this DestinyItemSourceDefinition.  # noqa: E501
        :rtype: int
        """
        return self._max_level_required

    @max_level_required.setter
    def max_level_required(self, max_level_required):
        """Sets the max_level_required of this DestinyItemSourceDefinition.

        The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.  # noqa: E501

        :param max_level_required: The max_level_required of this DestinyItemSourceDefinition.  # noqa: E501
        :type: int
        """

        self._max_level_required = max_level_required

    @property
    def computed_stats(self):
        """Gets the computed_stats of this DestinyItemSourceDefinition.  # noqa: E501

        The stats computed for this level/quality range.  # noqa: E501

        :return: The computed_stats of this DestinyItemSourceDefinition.  # noqa: E501
        :rtype: dict(str, DestinyInventoryItemStatDefinition)
        """
        return self._computed_stats

    @computed_stats.setter
    def computed_stats(self, computed_stats):
        """Sets the computed_stats of this DestinyItemSourceDefinition.

        The stats computed for this level/quality range.  # noqa: E501

        :param computed_stats: The computed_stats of this DestinyItemSourceDefinition.  # noqa: E501
        :type: dict(str, DestinyInventoryItemStatDefinition)
        """

        self._computed_stats = computed_stats

    @property
    def source_hashes(self):
        """Gets the source_hashes of this DestinyItemSourceDefinition.  # noqa: E501

        The DestinyRewardSourceDefinitions found that can spawn the item at this level.  # noqa: E501

        :return: The source_hashes of this DestinyItemSourceDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._source_hashes

    @source_hashes.setter
    def source_hashes(self, source_hashes):
        """Sets the source_hashes of this DestinyItemSourceDefinition.

        The DestinyRewardSourceDefinitions found that can spawn the item at this level.  # noqa: E501

        :param source_hashes: The source_hashes of this DestinyItemSourceDefinition.  # noqa: E501
        :type: list[int]
        """

        self._source_hashes = source_hashes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemSourceDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
