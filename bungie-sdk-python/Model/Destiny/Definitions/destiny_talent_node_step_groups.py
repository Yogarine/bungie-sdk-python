# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyTalentNodeStepGroups(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'weapon_performance': 'int',
        'impact_effects': 'int',
        'guardian_attributes': 'int',
        'light_abilities': 'int',
        'damage_types': 'int'
    }

    attribute_map = {
        'weapon_performance': 'weaponPerformance',
        'impact_effects': 'impactEffects',
        'guardian_attributes': 'guardianAttributes',
        'light_abilities': 'lightAbilities',
        'damage_types': 'damageTypes'
    }

    def __init__(self, weapon_performance=None, impact_effects=None, guardian_attributes=None, light_abilities=None, damage_types=None):  # noqa: E501
        """DestinyTalentNodeStepGroups - a model defined in OpenAPI"""  # noqa: E501

        self._weapon_performance = None
        self._impact_effects = None
        self._guardian_attributes = None
        self._light_abilities = None
        self._damage_types = None
        self.discriminator = None

        if weapon_performance is not None:
            self.weapon_performance = weapon_performance
        if impact_effects is not None:
            self.impact_effects = impact_effects
        if guardian_attributes is not None:
            self.guardian_attributes = guardian_attributes
        if light_abilities is not None:
            self.light_abilities = light_abilities
        if damage_types is not None:
            self.damage_types = damage_types

    @property
    def weapon_performance(self):
        """Gets the weapon_performance of this DestinyTalentNodeStepGroups.  # noqa: E501


        :return: The weapon_performance of this DestinyTalentNodeStepGroups.  # noqa: E501
        :rtype: int
        """
        return self._weapon_performance

    @weapon_performance.setter
    def weapon_performance(self, weapon_performance):
        """Sets the weapon_performance of this DestinyTalentNodeStepGroups.


        :param weapon_performance: The weapon_performance of this DestinyTalentNodeStepGroups.  # noqa: E501
        :type: int
        """

        self._weapon_performance = weapon_performance

    @property
    def impact_effects(self):
        """Gets the impact_effects of this DestinyTalentNodeStepGroups.  # noqa: E501


        :return: The impact_effects of this DestinyTalentNodeStepGroups.  # noqa: E501
        :rtype: int
        """
        return self._impact_effects

    @impact_effects.setter
    def impact_effects(self, impact_effects):
        """Sets the impact_effects of this DestinyTalentNodeStepGroups.


        :param impact_effects: The impact_effects of this DestinyTalentNodeStepGroups.  # noqa: E501
        :type: int
        """

        self._impact_effects = impact_effects

    @property
    def guardian_attributes(self):
        """Gets the guardian_attributes of this DestinyTalentNodeStepGroups.  # noqa: E501


        :return: The guardian_attributes of this DestinyTalentNodeStepGroups.  # noqa: E501
        :rtype: int
        """
        return self._guardian_attributes

    @guardian_attributes.setter
    def guardian_attributes(self, guardian_attributes):
        """Sets the guardian_attributes of this DestinyTalentNodeStepGroups.


        :param guardian_attributes: The guardian_attributes of this DestinyTalentNodeStepGroups.  # noqa: E501
        :type: int
        """

        self._guardian_attributes = guardian_attributes

    @property
    def light_abilities(self):
        """Gets the light_abilities of this DestinyTalentNodeStepGroups.  # noqa: E501


        :return: The light_abilities of this DestinyTalentNodeStepGroups.  # noqa: E501
        :rtype: int
        """
        return self._light_abilities

    @light_abilities.setter
    def light_abilities(self, light_abilities):
        """Sets the light_abilities of this DestinyTalentNodeStepGroups.


        :param light_abilities: The light_abilities of this DestinyTalentNodeStepGroups.  # noqa: E501
        :type: int
        """

        self._light_abilities = light_abilities

    @property
    def damage_types(self):
        """Gets the damage_types of this DestinyTalentNodeStepGroups.  # noqa: E501


        :return: The damage_types of this DestinyTalentNodeStepGroups.  # noqa: E501
        :rtype: int
        """
        return self._damage_types

    @damage_types.setter
    def damage_types(self, damage_types):
        """Sets the damage_types of this DestinyTalentNodeStepGroups.


        :param damage_types: The damage_types of this DestinyTalentNodeStepGroups.  # noqa: E501
        :type: int
        """

        self._damage_types = damage_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyTalentNodeStepGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
