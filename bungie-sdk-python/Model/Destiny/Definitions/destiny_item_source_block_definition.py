# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemSourceBlockDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_hashes': 'list[int]',
        'sources': 'list[DestinyItemSourceDefinition]',
        'exclusive': 'int',
        'vendor_sources': 'list[DestinyItemVendorSourceReference]'
    }

    attribute_map = {
        'source_hashes': 'sourceHashes',
        'sources': 'sources',
        'exclusive': 'exclusive',
        'vendor_sources': 'vendorSources'
    }

    def __init__(self, source_hashes=None, sources=None, exclusive=None, vendor_sources=None):  # noqa: E501
        """DestinyItemSourceBlockDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._source_hashes = None
        self._sources = None
        self._exclusive = None
        self._vendor_sources = None
        self.discriminator = None

        if source_hashes is not None:
            self.source_hashes = source_hashes
        if sources is not None:
            self.sources = sources
        if exclusive is not None:
            self.exclusive = exclusive
        if vendor_sources is not None:
            self.vendor_sources = vendor_sources

    @property
    def source_hashes(self):
        """Gets the source_hashes of this DestinyItemSourceBlockDefinition.  # noqa: E501

        The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).  # noqa: E501

        :return: The source_hashes of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._source_hashes

    @source_hashes.setter
    def source_hashes(self, source_hashes):
        """Sets the source_hashes of this DestinyItemSourceBlockDefinition.

        The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).  # noqa: E501

        :param source_hashes: The source_hashes of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :type: list[int]
        """

        self._source_hashes = source_hashes

    @property
    def sources(self):
        """Gets the sources of this DestinyItemSourceBlockDefinition.  # noqa: E501

        A collection of details about the stats that were computed for the ways we found that the item could be spawned.  # noqa: E501

        :return: The sources of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :rtype: list[DestinyItemSourceDefinition]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this DestinyItemSourceBlockDefinition.

        A collection of details about the stats that were computed for the ways we found that the item could be spawned.  # noqa: E501

        :param sources: The sources of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :type: list[DestinyItemSourceDefinition]
        """

        self._sources = sources

    @property
    def exclusive(self):
        """Gets the exclusive of this DestinyItemSourceBlockDefinition.  # noqa: E501

        If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.  # noqa: E501

        :return: The exclusive of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this DestinyItemSourceBlockDefinition.

        If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.  # noqa: E501

        :param exclusive: The exclusive of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :type: int
        """

        self._exclusive = exclusive

    @property
    def vendor_sources(self):
        """Gets the vendor_sources of this DestinyItemSourceBlockDefinition.  # noqa: E501

        A denormalized reference back to vendors that potentially sell this item.  # noqa: E501

        :return: The vendor_sources of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :rtype: list[DestinyItemVendorSourceReference]
        """
        return self._vendor_sources

    @vendor_sources.setter
    def vendor_sources(self, vendor_sources):
        """Sets the vendor_sources of this DestinyItemSourceBlockDefinition.

        A denormalized reference back to vendors that potentially sell this item.  # noqa: E501

        :param vendor_sources: The vendor_sources of this DestinyItemSourceBlockDefinition.  # noqa: E501
        :type: list[DestinyItemVendorSourceReference]
        """

        self._vendor_sources = vendor_sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemSourceBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
