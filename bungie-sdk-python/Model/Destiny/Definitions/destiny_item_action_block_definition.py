# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemActionBlockDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'verb_name': 'str',
        'verb_description': 'str',
        'is_positive': 'bool',
        'overlay_screen_name': 'str',
        'overlay_icon': 'str',
        'required_cooldown_seconds': 'int',
        'required_items': 'list[DestinyItemActionRequiredItemDefinition]',
        'progression_rewards': 'list[DestinyProgressionRewardDefinition]',
        'action_type_label': 'str',
        'required_location': 'str',
        'required_cooldown_hash': 'int',
        'delete_on_action': 'bool',
        'consume_entire_stack': 'bool',
        'use_on_acquire': 'bool'
    }

    attribute_map = {
        'verb_name': 'verbName',
        'verb_description': 'verbDescription',
        'is_positive': 'isPositive',
        'overlay_screen_name': 'overlayScreenName',
        'overlay_icon': 'overlayIcon',
        'required_cooldown_seconds': 'requiredCooldownSeconds',
        'required_items': 'requiredItems',
        'progression_rewards': 'progressionRewards',
        'action_type_label': 'actionTypeLabel',
        'required_location': 'requiredLocation',
        'required_cooldown_hash': 'requiredCooldownHash',
        'delete_on_action': 'deleteOnAction',
        'consume_entire_stack': 'consumeEntireStack',
        'use_on_acquire': 'useOnAcquire'
    }

    def __init__(self, verb_name=None, verb_description=None, is_positive=None, overlay_screen_name=None, overlay_icon=None, required_cooldown_seconds=None, required_items=None, progression_rewards=None, action_type_label=None, required_location=None, required_cooldown_hash=None, delete_on_action=None, consume_entire_stack=None, use_on_acquire=None):  # noqa: E501
        """DestinyItemActionBlockDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._verb_name = None
        self._verb_description = None
        self._is_positive = None
        self._overlay_screen_name = None
        self._overlay_icon = None
        self._required_cooldown_seconds = None
        self._required_items = None
        self._progression_rewards = None
        self._action_type_label = None
        self._required_location = None
        self._required_cooldown_hash = None
        self._delete_on_action = None
        self._consume_entire_stack = None
        self._use_on_acquire = None
        self.discriminator = None

        if verb_name is not None:
            self.verb_name = verb_name
        if verb_description is not None:
            self.verb_description = verb_description
        if is_positive is not None:
            self.is_positive = is_positive
        if overlay_screen_name is not None:
            self.overlay_screen_name = overlay_screen_name
        if overlay_icon is not None:
            self.overlay_icon = overlay_icon
        if required_cooldown_seconds is not None:
            self.required_cooldown_seconds = required_cooldown_seconds
        if required_items is not None:
            self.required_items = required_items
        if progression_rewards is not None:
            self.progression_rewards = progression_rewards
        if action_type_label is not None:
            self.action_type_label = action_type_label
        if required_location is not None:
            self.required_location = required_location
        if required_cooldown_hash is not None:
            self.required_cooldown_hash = required_cooldown_hash
        if delete_on_action is not None:
            self.delete_on_action = delete_on_action
        if consume_entire_stack is not None:
            self.consume_entire_stack = consume_entire_stack
        if use_on_acquire is not None:
            self.use_on_acquire = use_on_acquire

    @property
    def verb_name(self):
        """Gets the verb_name of this DestinyItemActionBlockDefinition.  # noqa: E501

        Localized text for the verb of the action being performed.  # noqa: E501

        :return: The verb_name of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._verb_name

    @verb_name.setter
    def verb_name(self, verb_name):
        """Sets the verb_name of this DestinyItemActionBlockDefinition.

        Localized text for the verb of the action being performed.  # noqa: E501

        :param verb_name: The verb_name of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: str
        """

        self._verb_name = verb_name

    @property
    def verb_description(self):
        """Gets the verb_description of this DestinyItemActionBlockDefinition.  # noqa: E501

        Localized text describing the action being performed.  # noqa: E501

        :return: The verb_description of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._verb_description

    @verb_description.setter
    def verb_description(self, verb_description):
        """Sets the verb_description of this DestinyItemActionBlockDefinition.

        Localized text describing the action being performed.  # noqa: E501

        :param verb_description: The verb_description of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: str
        """

        self._verb_description = verb_description

    @property
    def is_positive(self):
        """Gets the is_positive of this DestinyItemActionBlockDefinition.  # noqa: E501

        The content has this property, however it's not entirely clear how it is used.  # noqa: E501

        :return: The is_positive of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_positive

    @is_positive.setter
    def is_positive(self, is_positive):
        """Sets the is_positive of this DestinyItemActionBlockDefinition.

        The content has this property, however it's not entirely clear how it is used.  # noqa: E501

        :param is_positive: The is_positive of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: bool
        """

        self._is_positive = is_positive

    @property
    def overlay_screen_name(self):
        """Gets the overlay_screen_name of this DestinyItemActionBlockDefinition.  # noqa: E501

        If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen's data itself.  # noqa: E501

        :return: The overlay_screen_name of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._overlay_screen_name

    @overlay_screen_name.setter
    def overlay_screen_name(self, overlay_screen_name):
        """Sets the overlay_screen_name of this DestinyItemActionBlockDefinition.

        If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen's data itself.  # noqa: E501

        :param overlay_screen_name: The overlay_screen_name of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: str
        """

        self._overlay_screen_name = overlay_screen_name

    @property
    def overlay_icon(self):
        """Gets the overlay_icon of this DestinyItemActionBlockDefinition.  # noqa: E501

        The icon associated with the overlay screen for the action, if any.  # noqa: E501

        :return: The overlay_icon of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._overlay_icon

    @overlay_icon.setter
    def overlay_icon(self, overlay_icon):
        """Sets the overlay_icon of this DestinyItemActionBlockDefinition.

        The icon associated with the overlay screen for the action, if any.  # noqa: E501

        :param overlay_icon: The overlay_icon of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: str
        """

        self._overlay_icon = overlay_icon

    @property
    def required_cooldown_seconds(self):
        """Gets the required_cooldown_seconds of this DestinyItemActionBlockDefinition.  # noqa: E501

        The number of seconds to delay before allowing this action to be performed again.  # noqa: E501

        :return: The required_cooldown_seconds of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._required_cooldown_seconds

    @required_cooldown_seconds.setter
    def required_cooldown_seconds(self, required_cooldown_seconds):
        """Sets the required_cooldown_seconds of this DestinyItemActionBlockDefinition.

        The number of seconds to delay before allowing this action to be performed again.  # noqa: E501

        :param required_cooldown_seconds: The required_cooldown_seconds of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: int
        """

        self._required_cooldown_seconds = required_cooldown_seconds

    @property
    def required_items(self):
        """Gets the required_items of this DestinyItemActionBlockDefinition.  # noqa: E501

        If the action requires other items to exist or be destroyed, this is the list of those items and requirements.  # noqa: E501

        :return: The required_items of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: list[DestinyItemActionRequiredItemDefinition]
        """
        return self._required_items

    @required_items.setter
    def required_items(self, required_items):
        """Sets the required_items of this DestinyItemActionBlockDefinition.

        If the action requires other items to exist or be destroyed, this is the list of those items and requirements.  # noqa: E501

        :param required_items: The required_items of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: list[DestinyItemActionRequiredItemDefinition]
        """

        self._required_items = required_items

    @property
    def progression_rewards(self):
        """Gets the progression_rewards of this DestinyItemActionBlockDefinition.  # noqa: E501

        If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.  # noqa: E501

        :return: The progression_rewards of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: list[DestinyProgressionRewardDefinition]
        """
        return self._progression_rewards

    @progression_rewards.setter
    def progression_rewards(self, progression_rewards):
        """Sets the progression_rewards of this DestinyItemActionBlockDefinition.

        If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.  # noqa: E501

        :param progression_rewards: The progression_rewards of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: list[DestinyProgressionRewardDefinition]
        """

        self._progression_rewards = progression_rewards

    @property
    def action_type_label(self):
        """Gets the action_type_label of this DestinyItemActionBlockDefinition.  # noqa: E501

        The internal identifier for the action.  # noqa: E501

        :return: The action_type_label of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._action_type_label

    @action_type_label.setter
    def action_type_label(self, action_type_label):
        """Sets the action_type_label of this DestinyItemActionBlockDefinition.

        The internal identifier for the action.  # noqa: E501

        :param action_type_label: The action_type_label of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: str
        """

        self._action_type_label = action_type_label

    @property
    def required_location(self):
        """Gets the required_location of this DestinyItemActionBlockDefinition.  # noqa: E501

        Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.  # noqa: E501

        :return: The required_location of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._required_location

    @required_location.setter
    def required_location(self, required_location):
        """Sets the required_location of this DestinyItemActionBlockDefinition.

        Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.  # noqa: E501

        :param required_location: The required_location of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: str
        """

        self._required_location = required_location

    @property
    def required_cooldown_hash(self):
        """Gets the required_cooldown_hash of this DestinyItemActionBlockDefinition.  # noqa: E501

        The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.  # noqa: E501

        :return: The required_cooldown_hash of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._required_cooldown_hash

    @required_cooldown_hash.setter
    def required_cooldown_hash(self, required_cooldown_hash):
        """Sets the required_cooldown_hash of this DestinyItemActionBlockDefinition.

        The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.  # noqa: E501

        :param required_cooldown_hash: The required_cooldown_hash of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: int
        """

        self._required_cooldown_hash = required_cooldown_hash

    @property
    def delete_on_action(self):
        """Gets the delete_on_action of this DestinyItemActionBlockDefinition.  # noqa: E501

        If true, the item is deleted when the action completes.  # noqa: E501

        :return: The delete_on_action of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._delete_on_action

    @delete_on_action.setter
    def delete_on_action(self, delete_on_action):
        """Sets the delete_on_action of this DestinyItemActionBlockDefinition.

        If true, the item is deleted when the action completes.  # noqa: E501

        :param delete_on_action: The delete_on_action of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: bool
        """

        self._delete_on_action = delete_on_action

    @property
    def consume_entire_stack(self):
        """Gets the consume_entire_stack of this DestinyItemActionBlockDefinition.  # noqa: E501

        If true, the entire stack is deleted when the action completes.  # noqa: E501

        :return: The consume_entire_stack of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._consume_entire_stack

    @consume_entire_stack.setter
    def consume_entire_stack(self, consume_entire_stack):
        """Sets the consume_entire_stack of this DestinyItemActionBlockDefinition.

        If true, the entire stack is deleted when the action completes.  # noqa: E501

        :param consume_entire_stack: The consume_entire_stack of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: bool
        """

        self._consume_entire_stack = consume_entire_stack

    @property
    def use_on_acquire(self):
        """Gets the use_on_acquire of this DestinyItemActionBlockDefinition.  # noqa: E501

        If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.  # noqa: E501

        :return: The use_on_acquire of this DestinyItemActionBlockDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._use_on_acquire

    @use_on_acquire.setter
    def use_on_acquire(self, use_on_acquire):
        """Sets the use_on_acquire of this DestinyItemActionBlockDefinition.

        If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.  # noqa: E501

        :param use_on_acquire: The use_on_acquire of this DestinyItemActionBlockDefinition.  # noqa: E501
        :type: bool
        """

        self._use_on_acquire = use_on_acquire

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemActionBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
