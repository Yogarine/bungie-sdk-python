# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyInsertPlugActionDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_execute_seconds': 'int',
        'action_type': 'int'
    }

    attribute_map = {
        'action_execute_seconds': 'actionExecuteSeconds',
        'action_type': 'actionType'
    }

    def __init__(self, action_execute_seconds=None, action_type=None):  # noqa: E501
        """DestinyInsertPlugActionDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._action_execute_seconds = None
        self._action_type = None
        self.discriminator = None

        if action_execute_seconds is not None:
            self.action_execute_seconds = action_execute_seconds
        if action_type is not None:
            self.action_type = action_type

    @property
    def action_execute_seconds(self):
        """Gets the action_execute_seconds of this DestinyInsertPlugActionDefinition.  # noqa: E501

        How long it takes for the Plugging of the item to be completed once it is initiated, if you care.  # noqa: E501

        :return: The action_execute_seconds of this DestinyInsertPlugActionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._action_execute_seconds

    @action_execute_seconds.setter
    def action_execute_seconds(self, action_execute_seconds):
        """Sets the action_execute_seconds of this DestinyInsertPlugActionDefinition.

        How long it takes for the Plugging of the item to be completed once it is initiated, if you care.  # noqa: E501

        :param action_execute_seconds: The action_execute_seconds of this DestinyInsertPlugActionDefinition.  # noqa: E501
        :type: int
        """

        self._action_execute_seconds = action_execute_seconds

    @property
    def action_type(self):
        """Gets the action_type of this DestinyInsertPlugActionDefinition.  # noqa: E501

        The type of action being performed when you act on this Socket Type. The most common value is \"insert plug\", but there are others as well (for instance, a \"Masterwork\" socket may allow for Re-initialization, and an Infusion socket allows for items to be consumed to upgrade the item)  # noqa: E501

        :return: The action_type of this DestinyInsertPlugActionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this DestinyInsertPlugActionDefinition.

        The type of action being performed when you act on this Socket Type. The most common value is \"insert plug\", but there are others as well (for instance, a \"Masterwork\" socket may allow for Re-initialization, and an Infusion socket allows for items to be consumed to upgrade the item)  # noqa: E501

        :param action_type: The action_type of this DestinyInsertPlugActionDefinition.  # noqa: E501
        :type: int
        """

        self._action_type = action_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyInsertPlugActionDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
