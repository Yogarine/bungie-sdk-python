# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyPlugWhitelistEntryDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category_hash': 'int',
        'category_identifier': 'str',
        'reinitialization_possible_plug_hashes': 'list[int]'
    }

    attribute_map = {
        'category_hash': 'categoryHash',
        'category_identifier': 'categoryIdentifier',
        'reinitialization_possible_plug_hashes': 'reinitializationPossiblePlugHashes'
    }

    def __init__(self, category_hash=None, category_identifier=None, reinitialization_possible_plug_hashes=None):  # noqa: E501
        """DestinyPlugWhitelistEntryDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._category_hash = None
        self._category_identifier = None
        self._reinitialization_possible_plug_hashes = None
        self.discriminator = None

        if category_hash is not None:
            self.category_hash = category_hash
        if category_identifier is not None:
            self.category_identifier = category_identifier
        if reinitialization_possible_plug_hashes is not None:
            self.reinitialization_possible_plug_hashes = reinitialization_possible_plug_hashes

    @property
    def category_hash(self):
        """Gets the category_hash of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501

        The hash identifier of the Plug Category to compare against the plug item's plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.  # noqa: E501

        :return: The category_hash of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501
        :rtype: int
        """
        return self._category_hash

    @category_hash.setter
    def category_hash(self, category_hash):
        """Sets the category_hash of this DestinyPlugWhitelistEntryDefinition.

        The hash identifier of the Plug Category to compare against the plug item's plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.  # noqa: E501

        :param category_hash: The category_hash of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501
        :type: int
        """

        self._category_hash = category_hash

    @property
    def category_identifier(self):
        """Gets the category_identifier of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501

        The string identifier for the category, which is here mostly for debug purposes.  # noqa: E501

        :return: The category_identifier of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._category_identifier

    @category_identifier.setter
    def category_identifier(self, category_identifier):
        """Sets the category_identifier of this DestinyPlugWhitelistEntryDefinition.

        The string identifier for the category, which is here mostly for debug purposes.  # noqa: E501

        :param category_identifier: The category_identifier of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501
        :type: str
        """

        self._category_identifier = category_identifier

    @property
    def reinitialization_possible_plug_hashes(self):
        """Gets the reinitialization_possible_plug_hashes of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501

        The list of all plug items (DestinyInventoryItemDefinition) that the socket may randomly be populated with when reinitialized.  Which ones you should actually show are determined by the plug being inserted into the socket, and the socket’s type.  When you inspect the plug that could go into a Masterwork Socket, look up the socket type of the socket being inspected and find the DestinySocketTypeDefinition.  Then, look at the Plugs that can fit in that socket. Find the Whitelist in the DestinySocketTypeDefinition that matches the plug item’s categoryhash.  That whitelist entry will potentially have a new “reinitializationPossiblePlugHashes” property.If it does, that means we know what it will roll if you try to insert this plug into this socket.  # noqa: E501

        :return: The reinitialization_possible_plug_hashes of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._reinitialization_possible_plug_hashes

    @reinitialization_possible_plug_hashes.setter
    def reinitialization_possible_plug_hashes(self, reinitialization_possible_plug_hashes):
        """Sets the reinitialization_possible_plug_hashes of this DestinyPlugWhitelistEntryDefinition.

        The list of all plug items (DestinyInventoryItemDefinition) that the socket may randomly be populated with when reinitialized.  Which ones you should actually show are determined by the plug being inserted into the socket, and the socket’s type.  When you inspect the plug that could go into a Masterwork Socket, look up the socket type of the socket being inspected and find the DestinySocketTypeDefinition.  Then, look at the Plugs that can fit in that socket. Find the Whitelist in the DestinySocketTypeDefinition that matches the plug item’s categoryhash.  That whitelist entry will potentially have a new “reinitializationPossiblePlugHashes” property.If it does, that means we know what it will roll if you try to insert this plug into this socket.  # noqa: E501

        :param reinitialization_possible_plug_hashes: The reinitialization_possible_plug_hashes of this DestinyPlugWhitelistEntryDefinition.  # noqa: E501
        :type: list[int]
        """

        self._reinitialization_possible_plug_hashes = reinitialization_possible_plug_hashes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyPlugWhitelistEntryDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
