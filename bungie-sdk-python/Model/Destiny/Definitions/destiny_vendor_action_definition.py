# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyVendorActionDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'execute_seconds': 'int',
        'icon': 'str',
        'name': 'str',
        'verb': 'str',
        'is_positive': 'bool',
        'action_id': 'str',
        'action_hash': 'int',
        'auto_perform_action': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'execute_seconds': 'executeSeconds',
        'icon': 'icon',
        'name': 'name',
        'verb': 'verb',
        'is_positive': 'isPositive',
        'action_id': 'actionId',
        'action_hash': 'actionHash',
        'auto_perform_action': 'autoPerformAction'
    }

    def __init__(self, description=None, execute_seconds=None, icon=None, name=None, verb=None, is_positive=None, action_id=None, action_hash=None, auto_perform_action=None):  # noqa: E501
        """DestinyVendorActionDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._description = None
        self._execute_seconds = None
        self._icon = None
        self._name = None
        self._verb = None
        self._is_positive = None
        self._action_id = None
        self._action_hash = None
        self._auto_perform_action = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if execute_seconds is not None:
            self.execute_seconds = execute_seconds
        if icon is not None:
            self.icon = icon
        if name is not None:
            self.name = name
        if verb is not None:
            self.verb = verb
        if is_positive is not None:
            self.is_positive = is_positive
        if action_id is not None:
            self.action_id = action_id
        if action_hash is not None:
            self.action_hash = action_hash
        if auto_perform_action is not None:
            self.auto_perform_action = auto_perform_action

    @property
    def description(self):
        """Gets the description of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The description of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinyVendorActionDefinition.


        :param description: The description of this DestinyVendorActionDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def execute_seconds(self):
        """Gets the execute_seconds of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The execute_seconds of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._execute_seconds

    @execute_seconds.setter
    def execute_seconds(self, execute_seconds):
        """Sets the execute_seconds of this DestinyVendorActionDefinition.


        :param execute_seconds: The execute_seconds of this DestinyVendorActionDefinition.  # noqa: E501
        :type: int
        """

        self._execute_seconds = execute_seconds

    @property
    def icon(self):
        """Gets the icon of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The icon of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DestinyVendorActionDefinition.


        :param icon: The icon of this DestinyVendorActionDefinition.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The name of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinyVendorActionDefinition.


        :param name: The name of this DestinyVendorActionDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def verb(self):
        """Gets the verb of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The verb of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this DestinyVendorActionDefinition.


        :param verb: The verb of this DestinyVendorActionDefinition.  # noqa: E501
        :type: str
        """

        self._verb = verb

    @property
    def is_positive(self):
        """Gets the is_positive of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The is_positive of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_positive

    @is_positive.setter
    def is_positive(self, is_positive):
        """Sets the is_positive of this DestinyVendorActionDefinition.


        :param is_positive: The is_positive of this DestinyVendorActionDefinition.  # noqa: E501
        :type: bool
        """

        self._is_positive = is_positive

    @property
    def action_id(self):
        """Gets the action_id of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The action_id of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this DestinyVendorActionDefinition.


        :param action_id: The action_id of this DestinyVendorActionDefinition.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    @property
    def action_hash(self):
        """Gets the action_hash of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The action_hash of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._action_hash

    @action_hash.setter
    def action_hash(self, action_hash):
        """Sets the action_hash of this DestinyVendorActionDefinition.


        :param action_hash: The action_hash of this DestinyVendorActionDefinition.  # noqa: E501
        :type: int
        """

        self._action_hash = action_hash

    @property
    def auto_perform_action(self):
        """Gets the auto_perform_action of this DestinyVendorActionDefinition.  # noqa: E501


        :return: The auto_perform_action of this DestinyVendorActionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._auto_perform_action

    @auto_perform_action.setter
    def auto_perform_action(self, auto_perform_action):
        """Sets the auto_perform_action of this DestinyVendorActionDefinition.


        :param auto_perform_action: The auto_perform_action of this DestinyVendorActionDefinition.  # noqa: E501
        :type: bool
        """

        self._auto_perform_action = auto_perform_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyVendorActionDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
