# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyStatDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_properties': 'DestinyDisplayPropertiesDefinition',
        'aggregation_type': 'int',
        'has_computed_block': 'bool',
        'stat_category': 'int',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'aggregation_type': 'aggregationType',
        'has_computed_block': 'hasComputedBlock',
        'stat_category': 'statCategory',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, aggregation_type=None, has_computed_block=None, stat_category=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyStatDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._display_properties = None
        self._aggregation_type = None
        self._has_computed_block = None
        self._stat_category = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if aggregation_type is not None:
            self.aggregation_type = aggregation_type
        if has_computed_block is not None:
            self.has_computed_block = has_computed_block
        if stat_category is not None:
            self.stat_category = stat_category
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyStatDefinition.  # noqa: E501


        :return: The display_properties of this DestinyStatDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyStatDefinition.


        :param display_properties: The display_properties of this DestinyStatDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this DestinyStatDefinition.  # noqa: E501

        Stats can exist on a character or an item, and they may potentially be aggregated in different ways. The DestinyStatAggregationType enum value indicates the way that this stat is being aggregated.  # noqa: E501

        :return: The aggregation_type of this DestinyStatDefinition.  # noqa: E501
        :rtype: int
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this DestinyStatDefinition.

        Stats can exist on a character or an item, and they may potentially be aggregated in different ways. The DestinyStatAggregationType enum value indicates the way that this stat is being aggregated.  # noqa: E501

        :param aggregation_type: The aggregation_type of this DestinyStatDefinition.  # noqa: E501
        :type: int
        """

        self._aggregation_type = aggregation_type

    @property
    def has_computed_block(self):
        """Gets the has_computed_block of this DestinyStatDefinition.  # noqa: E501

        True if the stat is computed rather than being delivered as a raw value on items.  For instance, the Light stat in Destiny 1 was a computed stat.  # noqa: E501

        :return: The has_computed_block of this DestinyStatDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._has_computed_block

    @has_computed_block.setter
    def has_computed_block(self, has_computed_block):
        """Sets the has_computed_block of this DestinyStatDefinition.

        True if the stat is computed rather than being delivered as a raw value on items.  For instance, the Light stat in Destiny 1 was a computed stat.  # noqa: E501

        :param has_computed_block: The has_computed_block of this DestinyStatDefinition.  # noqa: E501
        :type: bool
        """

        self._has_computed_block = has_computed_block

    @property
    def stat_category(self):
        """Gets the stat_category of this DestinyStatDefinition.  # noqa: E501

        The category of the stat, according to the game.  # noqa: E501

        :return: The stat_category of this DestinyStatDefinition.  # noqa: E501
        :rtype: int
        """
        return self._stat_category

    @stat_category.setter
    def stat_category(self, stat_category):
        """Sets the stat_category of this DestinyStatDefinition.

        The category of the stat, according to the game.  # noqa: E501

        :param stat_category: The stat_category of this DestinyStatDefinition.  # noqa: E501
        :type: int
        """

        self._stat_category = stat_category

    @property
    def hash(self):
        """Gets the hash of this DestinyStatDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyStatDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyStatDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyStatDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyStatDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyStatDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyStatDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyStatDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyStatDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyStatDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyStatDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyStatDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyStatDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
