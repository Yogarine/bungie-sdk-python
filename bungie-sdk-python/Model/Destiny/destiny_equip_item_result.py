# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyEquipItemResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_instance_id': 'int',
        'equip_status': 'int'
    }

    attribute_map = {
        'item_instance_id': 'itemInstanceId',
        'equip_status': 'equipStatus'
    }

    def __init__(self, item_instance_id=None, equip_status=None):  # noqa: E501
        """DestinyEquipItemResult - a model defined in OpenAPI"""  # noqa: E501

        self._item_instance_id = None
        self._equip_status = None
        self.discriminator = None

        if item_instance_id is not None:
            self.item_instance_id = item_instance_id
        if equip_status is not None:
            self.equip_status = equip_status

    @property
    def item_instance_id(self):
        """Gets the item_instance_id of this DestinyEquipItemResult.  # noqa: E501

        The instance ID of the item in question (all items that can be equipped must, but definition, be Instanced and thus have an Instance ID that you can use to refer to them)  # noqa: E501

        :return: The item_instance_id of this DestinyEquipItemResult.  # noqa: E501
        :rtype: int
        """
        return self._item_instance_id

    @item_instance_id.setter
    def item_instance_id(self, item_instance_id):
        """Sets the item_instance_id of this DestinyEquipItemResult.

        The instance ID of the item in question (all items that can be equipped must, but definition, be Instanced and thus have an Instance ID that you can use to refer to them)  # noqa: E501

        :param item_instance_id: The item_instance_id of this DestinyEquipItemResult.  # noqa: E501
        :type: int
        """

        self._item_instance_id = item_instance_id

    @property
    def equip_status(self):
        """Gets the equip_status of this DestinyEquipItemResult.  # noqa: E501

        A PlatformErrorCodes enum indicating whether it succeeded, and if it failed why.  # noqa: E501

        :return: The equip_status of this DestinyEquipItemResult.  # noqa: E501
        :rtype: int
        """
        return self._equip_status

    @equip_status.setter
    def equip_status(self, equip_status):
        """Sets the equip_status of this DestinyEquipItemResult.

        A PlatformErrorCodes enum indicating whether it succeeded, and if it failed why.  # noqa: E501

        :param equip_status: The equip_status of this DestinyEquipItemResult.  # noqa: E501
        :type: int
        """

        self._equip_status = equip_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyEquipItemResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
