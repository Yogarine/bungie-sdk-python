# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyMilestone(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'milestone_hash': 'int',
        'available_quests': 'list[DestinyMilestoneQuest]',
        'activities': 'list[DestinyMilestoneChallengeActivity]',
        'values': 'dict(str, float)',
        'vendor_hashes': 'list[int]',
        'vendors': 'list[DestinyMilestoneVendor]',
        'rewards': 'list[DestinyMilestoneRewardCategory]',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'order': 'int'
    }

    attribute_map = {
        'milestone_hash': 'milestoneHash',
        'available_quests': 'availableQuests',
        'activities': 'activities',
        'values': 'values',
        'vendor_hashes': 'vendorHashes',
        'vendors': 'vendors',
        'rewards': 'rewards',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'order': 'order'
    }

    def __init__(self, milestone_hash=None, available_quests=None, activities=None, values=None, vendor_hashes=None, vendors=None, rewards=None, start_date=None, end_date=None, order=None):  # noqa: E501
        """DestinyMilestone - a model defined in OpenAPI"""  # noqa: E501

        self._milestone_hash = None
        self._available_quests = None
        self._activities = None
        self._values = None
        self._vendor_hashes = None
        self._vendors = None
        self._rewards = None
        self._start_date = None
        self._end_date = None
        self._order = None
        self.discriminator = None

        if milestone_hash is not None:
            self.milestone_hash = milestone_hash
        if available_quests is not None:
            self.available_quests = available_quests
        if activities is not None:
            self.activities = activities
        if values is not None:
            self.values = values
        if vendor_hashes is not None:
            self.vendor_hashes = vendor_hashes
        if vendors is not None:
            self.vendors = vendors
        if rewards is not None:
            self.rewards = rewards
        self.start_date = start_date
        self.end_date = end_date
        if order is not None:
            self.order = order

    @property
    def milestone_hash(self):
        """Gets the milestone_hash of this DestinyMilestone.  # noqa: E501

        The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.  # noqa: E501

        :return: The milestone_hash of this DestinyMilestone.  # noqa: E501
        :rtype: int
        """
        return self._milestone_hash

    @milestone_hash.setter
    def milestone_hash(self, milestone_hash):
        """Sets the milestone_hash of this DestinyMilestone.

        The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.  # noqa: E501

        :param milestone_hash: The milestone_hash of this DestinyMilestone.  # noqa: E501
        :type: int
        """

        self._milestone_hash = milestone_hash

    @property
    def available_quests(self):
        """Gets the available_quests of this DestinyMilestone.  # noqa: E501

        Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.  # noqa: E501

        :return: The available_quests of this DestinyMilestone.  # noqa: E501
        :rtype: list[DestinyMilestoneQuest]
        """
        return self._available_quests

    @available_quests.setter
    def available_quests(self, available_quests):
        """Sets the available_quests of this DestinyMilestone.

        Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.  # noqa: E501

        :param available_quests: The available_quests of this DestinyMilestone.  # noqa: E501
        :type: list[DestinyMilestoneQuest]
        """

        self._available_quests = available_quests

    @property
    def activities(self):
        """Gets the activities of this DestinyMilestone.  # noqa: E501

        The currently active Activities in this milestone, when the Milestone is driven by Challenges.  Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.  # noqa: E501

        :return: The activities of this DestinyMilestone.  # noqa: E501
        :rtype: list[DestinyMilestoneChallengeActivity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this DestinyMilestone.

        The currently active Activities in this milestone, when the Milestone is driven by Challenges.  Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.  # noqa: E501

        :param activities: The activities of this DestinyMilestone.  # noqa: E501
        :type: list[DestinyMilestoneChallengeActivity]
        """

        self._activities = activities

    @property
    def values(self):
        """Gets the values of this DestinyMilestone.  # noqa: E501

        Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.  # noqa: E501

        :return: The values of this DestinyMilestone.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DestinyMilestone.

        Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.  # noqa: E501

        :param values: The values of this DestinyMilestone.  # noqa: E501
        :type: dict(str, float)
        """

        self._values = values

    @property
    def vendor_hashes(self):
        """Gets the vendor_hashes of this DestinyMilestone.  # noqa: E501

        A milestone may have one or more active vendors that are \"related\" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.  Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.  # noqa: E501

        :return: The vendor_hashes of this DestinyMilestone.  # noqa: E501
        :rtype: list[int]
        """
        return self._vendor_hashes

    @vendor_hashes.setter
    def vendor_hashes(self, vendor_hashes):
        """Sets the vendor_hashes of this DestinyMilestone.

        A milestone may have one or more active vendors that are \"related\" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.  Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.  # noqa: E501

        :param vendor_hashes: The vendor_hashes of this DestinyMilestone.  # noqa: E501
        :type: list[int]
        """

        self._vendor_hashes = vendor_hashes

    @property
    def vendors(self):
        """Gets the vendors of this DestinyMilestone.  # noqa: E501

        Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.  # noqa: E501

        :return: The vendors of this DestinyMilestone.  # noqa: E501
        :rtype: list[DestinyMilestoneVendor]
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this DestinyMilestone.

        Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.  # noqa: E501

        :param vendors: The vendors of this DestinyMilestone.  # noqa: E501
        :type: list[DestinyMilestoneVendor]
        """

        self._vendors = vendors

    @property
    def rewards(self):
        """Gets the rewards of this DestinyMilestone.  # noqa: E501

        If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as \"overview/checklist\" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.  # noqa: E501

        :return: The rewards of this DestinyMilestone.  # noqa: E501
        :rtype: list[DestinyMilestoneRewardCategory]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this DestinyMilestone.

        If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as \"overview/checklist\" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.  # noqa: E501

        :param rewards: The rewards of this DestinyMilestone.  # noqa: E501
        :type: list[DestinyMilestoneRewardCategory]
        """

        self._rewards = rewards

    @property
    def start_date(self):
        """Gets the start_date of this DestinyMilestone.  # noqa: E501

        If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.  # noqa: E501

        :return: The start_date of this DestinyMilestone.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DestinyMilestone.

        If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.  # noqa: E501

        :param start_date: The start_date of this DestinyMilestone.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DestinyMilestone.  # noqa: E501

        If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.  # noqa: E501

        :return: The end_date of this DestinyMilestone.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DestinyMilestone.

        If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.  # noqa: E501

        :param end_date: The end_date of this DestinyMilestone.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def order(self):
        """Gets the order of this DestinyMilestone.  # noqa: E501

        Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.  # noqa: E501

        :return: The order of this DestinyMilestone.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DestinyMilestone.

        Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.  # noqa: E501

        :param order: The order of this DestinyMilestone.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyMilestone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
