# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyEnvironmentLocationMapping(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location_hash': 'int',
        'activation_source': 'str',
        'item_hash': 'int',
        'objective_hash': 'int',
        'activity_hash': 'int'
    }

    attribute_map = {
        'location_hash': 'locationHash',
        'activation_source': 'activationSource',
        'item_hash': 'itemHash',
        'objective_hash': 'objectiveHash',
        'activity_hash': 'activityHash'
    }

    def __init__(self, location_hash=None, activation_source=None, item_hash=None, objective_hash=None, activity_hash=None):  # noqa: E501
        """DestinyEnvironmentLocationMapping - a model defined in OpenAPI"""  # noqa: E501

        self._location_hash = None
        self._activation_source = None
        self._item_hash = None
        self._objective_hash = None
        self._activity_hash = None
        self.discriminator = None

        if location_hash is not None:
            self.location_hash = location_hash
        if activation_source is not None:
            self.activation_source = activation_source
        self.item_hash = item_hash
        self.objective_hash = objective_hash
        self.activity_hash = activity_hash

    @property
    def location_hash(self):
        """Gets the location_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501

        The location that is revealed on the director by this mapping.  # noqa: E501

        :return: The location_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :rtype: int
        """
        return self._location_hash

    @location_hash.setter
    def location_hash(self, location_hash):
        """Sets the location_hash of this DestinyEnvironmentLocationMapping.

        The location that is revealed on the director by this mapping.  # noqa: E501

        :param location_hash: The location_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :type: int
        """

        self._location_hash = location_hash

    @property
    def activation_source(self):
        """Gets the activation_source of this DestinyEnvironmentLocationMapping.  # noqa: E501

        A hint that the UI uses to figure out how this location is activated by the player.  # noqa: E501

        :return: The activation_source of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :rtype: str
        """
        return self._activation_source

    @activation_source.setter
    def activation_source(self, activation_source):
        """Sets the activation_source of this DestinyEnvironmentLocationMapping.

        A hint that the UI uses to figure out how this location is activated by the player.  # noqa: E501

        :param activation_source: The activation_source of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :type: str
        """

        self._activation_source = activation_source

    @property
    def item_hash(self):
        """Gets the item_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501

        If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)  # noqa: E501

        :return: The item_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :rtype: int
        """
        return self._item_hash

    @item_hash.setter
    def item_hash(self, item_hash):
        """Sets the item_hash of this DestinyEnvironmentLocationMapping.

        If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)  # noqa: E501

        :param item_hash: The item_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :type: int
        """

        self._item_hash = item_hash

    @property
    def objective_hash(self):
        """Gets the objective_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501

        If this is populated, this is an objective related to the location.  # noqa: E501

        :return: The objective_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :rtype: int
        """
        return self._objective_hash

    @objective_hash.setter
    def objective_hash(self, objective_hash):
        """Sets the objective_hash of this DestinyEnvironmentLocationMapping.

        If this is populated, this is an objective related to the location.  # noqa: E501

        :param objective_hash: The objective_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :type: int
        """

        self._objective_hash = objective_hash

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501

        If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)  # noqa: E501

        :return: The activity_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyEnvironmentLocationMapping.

        If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)  # noqa: E501

        :param activity_hash: The activity_hash of this DestinyEnvironmentLocationMapping.  # noqa: E501
        :type: int
        """

        self._activity_hash = activity_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyEnvironmentLocationMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
