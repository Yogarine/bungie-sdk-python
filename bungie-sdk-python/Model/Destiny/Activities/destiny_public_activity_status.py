# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyPublicActivityStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'challenge_objective_hashes': 'list[int]',
        'modifier_hashes': 'list[int]',
        'reward_tooltip_items': 'list[DestinyItemQuantity]'
    }

    attribute_map = {
        'challenge_objective_hashes': 'challengeObjectiveHashes',
        'modifier_hashes': 'modifierHashes',
        'reward_tooltip_items': 'rewardTooltipItems'
    }

    def __init__(self, challenge_objective_hashes=None, modifier_hashes=None, reward_tooltip_items=None):  # noqa: E501
        """DestinyPublicActivityStatus - a model defined in OpenAPI"""  # noqa: E501

        self._challenge_objective_hashes = None
        self._modifier_hashes = None
        self._reward_tooltip_items = None
        self.discriminator = None

        if challenge_objective_hashes is not None:
            self.challenge_objective_hashes = challenge_objective_hashes
        if modifier_hashes is not None:
            self.modifier_hashes = modifier_hashes
        if reward_tooltip_items is not None:
            self.reward_tooltip_items = reward_tooltip_items

    @property
    def challenge_objective_hashes(self):
        """Gets the challenge_objective_hashes of this DestinyPublicActivityStatus.  # noqa: E501

        Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.  # noqa: E501

        :return: The challenge_objective_hashes of this DestinyPublicActivityStatus.  # noqa: E501
        :rtype: list[int]
        """
        return self._challenge_objective_hashes

    @challenge_objective_hashes.setter
    def challenge_objective_hashes(self, challenge_objective_hashes):
        """Sets the challenge_objective_hashes of this DestinyPublicActivityStatus.

        Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.  # noqa: E501

        :param challenge_objective_hashes: The challenge_objective_hashes of this DestinyPublicActivityStatus.  # noqa: E501
        :type: list[int]
        """

        self._challenge_objective_hashes = challenge_objective_hashes

    @property
    def modifier_hashes(self):
        """Gets the modifier_hashes of this DestinyPublicActivityStatus.  # noqa: E501

        The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.  # noqa: E501

        :return: The modifier_hashes of this DestinyPublicActivityStatus.  # noqa: E501
        :rtype: list[int]
        """
        return self._modifier_hashes

    @modifier_hashes.setter
    def modifier_hashes(self, modifier_hashes):
        """Sets the modifier_hashes of this DestinyPublicActivityStatus.

        The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.  # noqa: E501

        :param modifier_hashes: The modifier_hashes of this DestinyPublicActivityStatus.  # noqa: E501
        :type: list[int]
        """

        self._modifier_hashes = modifier_hashes

    @property
    def reward_tooltip_items(self):
        """Gets the reward_tooltip_items of this DestinyPublicActivityStatus.  # noqa: E501

        If the activity itself provides any specific \"mock\" rewards, this will be the items and their quantity.  Why \"mock\", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.  These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.  # noqa: E501

        :return: The reward_tooltip_items of this DestinyPublicActivityStatus.  # noqa: E501
        :rtype: list[DestinyItemQuantity]
        """
        return self._reward_tooltip_items

    @reward_tooltip_items.setter
    def reward_tooltip_items(self, reward_tooltip_items):
        """Sets the reward_tooltip_items of this DestinyPublicActivityStatus.

        If the activity itself provides any specific \"mock\" rewards, this will be the items and their quantity.  Why \"mock\", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.  These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.  # noqa: E501

        :param reward_tooltip_items: The reward_tooltip_items of this DestinyPublicActivityStatus.  # noqa: E501
        :type: list[DestinyItemQuantity]
        """

        self._reward_tooltip_items = reward_tooltip_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyPublicActivityStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
