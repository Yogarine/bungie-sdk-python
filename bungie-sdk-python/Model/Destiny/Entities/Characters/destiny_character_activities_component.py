# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyCharacterActivitiesComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_activity_started': 'datetime',
        'available_activities': 'list[DestinyActivity]',
        'current_activity_hash': 'int',
        'current_activity_mode_hash': 'int',
        'current_activity_mode_type': 'int',
        'current_activity_mode_hashes': 'list[int]',
        'current_activity_mode_types': 'list[int]',
        'current_playlist_activity_hash': 'int',
        'last_completed_story_hash': 'int'
    }

    attribute_map = {
        'date_activity_started': 'dateActivityStarted',
        'available_activities': 'availableActivities',
        'current_activity_hash': 'currentActivityHash',
        'current_activity_mode_hash': 'currentActivityModeHash',
        'current_activity_mode_type': 'currentActivityModeType',
        'current_activity_mode_hashes': 'currentActivityModeHashes',
        'current_activity_mode_types': 'currentActivityModeTypes',
        'current_playlist_activity_hash': 'currentPlaylistActivityHash',
        'last_completed_story_hash': 'lastCompletedStoryHash'
    }

    def __init__(self, date_activity_started=None, available_activities=None, current_activity_hash=None, current_activity_mode_hash=None, current_activity_mode_type=None, current_activity_mode_hashes=None, current_activity_mode_types=None, current_playlist_activity_hash=None, last_completed_story_hash=None):  # noqa: E501
        """DestinyCharacterActivitiesComponent - a model defined in OpenAPI"""  # noqa: E501

        self._date_activity_started = None
        self._available_activities = None
        self._current_activity_hash = None
        self._current_activity_mode_hash = None
        self._current_activity_mode_type = None
        self._current_activity_mode_hashes = None
        self._current_activity_mode_types = None
        self._current_playlist_activity_hash = None
        self._last_completed_story_hash = None
        self.discriminator = None

        if date_activity_started is not None:
            self.date_activity_started = date_activity_started
        if available_activities is not None:
            self.available_activities = available_activities
        if current_activity_hash is not None:
            self.current_activity_hash = current_activity_hash
        if current_activity_mode_hash is not None:
            self.current_activity_mode_hash = current_activity_mode_hash
        self.current_activity_mode_type = current_activity_mode_type
        if current_activity_mode_hashes is not None:
            self.current_activity_mode_hashes = current_activity_mode_hashes
        if current_activity_mode_types is not None:
            self.current_activity_mode_types = current_activity_mode_types
        self.current_playlist_activity_hash = current_playlist_activity_hash
        if last_completed_story_hash is not None:
            self.last_completed_story_hash = last_completed_story_hash

    @property
    def date_activity_started(self):
        """Gets the date_activity_started of this DestinyCharacterActivitiesComponent.  # noqa: E501

        The last date that the user started playing an activity.  # noqa: E501

        :return: The date_activity_started of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._date_activity_started

    @date_activity_started.setter
    def date_activity_started(self, date_activity_started):
        """Sets the date_activity_started of this DestinyCharacterActivitiesComponent.

        The last date that the user started playing an activity.  # noqa: E501

        :param date_activity_started: The date_activity_started of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: datetime
        """

        self._date_activity_started = date_activity_started

    @property
    def available_activities(self):
        """Gets the available_activities of this DestinyCharacterActivitiesComponent.  # noqa: E501

        The list of activities that the user can play.  # noqa: E501

        :return: The available_activities of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: list[DestinyActivity]
        """
        return self._available_activities

    @available_activities.setter
    def available_activities(self, available_activities):
        """Sets the available_activities of this DestinyCharacterActivitiesComponent.

        The list of activities that the user can play.  # noqa: E501

        :param available_activities: The available_activities of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: list[DestinyActivity]
        """

        self._available_activities = available_activities

    @property
    def current_activity_hash(self):
        """Gets the current_activity_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501

        If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \"Activities\" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.  # noqa: E501

        :return: The current_activity_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: int
        """
        return self._current_activity_hash

    @current_activity_hash.setter
    def current_activity_hash(self, current_activity_hash):
        """Sets the current_activity_hash of this DestinyCharacterActivitiesComponent.

        If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \"Activities\" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.  # noqa: E501

        :param current_activity_hash: The current_activity_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: int
        """

        self._current_activity_hash = current_activity_hash

    @property
    def current_activity_mode_hash(self):
        """Gets the current_activity_mode_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501

        If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.  # noqa: E501

        :return: The current_activity_mode_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: int
        """
        return self._current_activity_mode_hash

    @current_activity_mode_hash.setter
    def current_activity_mode_hash(self, current_activity_mode_hash):
        """Sets the current_activity_mode_hash of this DestinyCharacterActivitiesComponent.

        If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.  # noqa: E501

        :param current_activity_mode_hash: The current_activity_mode_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: int
        """

        self._current_activity_mode_hash = current_activity_mode_hash

    @property
    def current_activity_mode_type(self):
        """Gets the current_activity_mode_type of this DestinyCharacterActivitiesComponent.  # noqa: E501

        And the current activity's most specific mode type, if it can be found.  # noqa: E501

        :return: The current_activity_mode_type of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: int
        """
        return self._current_activity_mode_type

    @current_activity_mode_type.setter
    def current_activity_mode_type(self, current_activity_mode_type):
        """Sets the current_activity_mode_type of this DestinyCharacterActivitiesComponent.

        And the current activity's most specific mode type, if it can be found.  # noqa: E501

        :param current_activity_mode_type: The current_activity_mode_type of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]  # noqa: E501
        if current_activity_mode_type not in allowed_values:
            raise ValueError(
                "Invalid value for `current_activity_mode_type` ({0}), must be one of {1}"  # noqa: E501
                .format(current_activity_mode_type, allowed_values)
            )

        self._current_activity_mode_type = current_activity_mode_type

    @property
    def current_activity_mode_hashes(self):
        """Gets the current_activity_mode_hashes of this DestinyCharacterActivitiesComponent.  # noqa: E501

        If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.  # noqa: E501

        :return: The current_activity_mode_hashes of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: list[int]
        """
        return self._current_activity_mode_hashes

    @current_activity_mode_hashes.setter
    def current_activity_mode_hashes(self, current_activity_mode_hashes):
        """Sets the current_activity_mode_hashes of this DestinyCharacterActivitiesComponent.

        If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.  # noqa: E501

        :param current_activity_mode_hashes: The current_activity_mode_hashes of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: list[int]
        """

        self._current_activity_mode_hashes = current_activity_mode_hashes

    @property
    def current_activity_mode_types(self):
        """Gets the current_activity_mode_types of this DestinyCharacterActivitiesComponent.  # noqa: E501

        All Activity Modes that apply to the current activity being played, in enum form.  # noqa: E501

        :return: The current_activity_mode_types of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: list[int]
        """
        return self._current_activity_mode_types

    @current_activity_mode_types.setter
    def current_activity_mode_types(self, current_activity_mode_types):
        """Sets the current_activity_mode_types of this DestinyCharacterActivitiesComponent.

        All Activity Modes that apply to the current activity being played, in enum form.  # noqa: E501

        :param current_activity_mode_types: The current_activity_mode_types of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: list[int]
        """

        self._current_activity_mode_types = current_activity_mode_types

    @property
    def current_playlist_activity_hash(self):
        """Gets the current_playlist_activity_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501

        If the user is in a playlist, this is the hash identifier for the playlist that they chose.  # noqa: E501

        :return: The current_playlist_activity_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: int
        """
        return self._current_playlist_activity_hash

    @current_playlist_activity_hash.setter
    def current_playlist_activity_hash(self, current_playlist_activity_hash):
        """Sets the current_playlist_activity_hash of this DestinyCharacterActivitiesComponent.

        If the user is in a playlist, this is the hash identifier for the playlist that they chose.  # noqa: E501

        :param current_playlist_activity_hash: The current_playlist_activity_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: int
        """

        self._current_playlist_activity_hash = current_playlist_activity_hash

    @property
    def last_completed_story_hash(self):
        """Gets the last_completed_story_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501

        This will have the activity hash of the last completed story/campaign mission, in case you care about that.  # noqa: E501

        :return: The last_completed_story_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :rtype: int
        """
        return self._last_completed_story_hash

    @last_completed_story_hash.setter
    def last_completed_story_hash(self, last_completed_story_hash):
        """Sets the last_completed_story_hash of this DestinyCharacterActivitiesComponent.

        This will have the activity hash of the last completed story/campaign mission, in case you care about that.  # noqa: E501

        :param last_completed_story_hash: The last_completed_story_hash of this DestinyCharacterActivitiesComponent.  # noqa: E501
        :type: int
        """

        self._last_completed_story_hash = last_completed_story_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyCharacterActivitiesComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
