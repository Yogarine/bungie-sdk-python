# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemPlugComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'plug_item_hash': 'int',
        'plug_objectives': 'list[DestinyObjectiveProgress]',
        'can_insert': 'bool',
        'enabled': 'bool',
        'insert_fail_indexes': 'list[int]',
        'enable_fail_indexes': 'list[int]'
    }

    attribute_map = {
        'plug_item_hash': 'plugItemHash',
        'plug_objectives': 'plugObjectives',
        'can_insert': 'canInsert',
        'enabled': 'enabled',
        'insert_fail_indexes': 'insertFailIndexes',
        'enable_fail_indexes': 'enableFailIndexes'
    }

    def __init__(self, plug_item_hash=None, plug_objectives=None, can_insert=None, enabled=None, insert_fail_indexes=None, enable_fail_indexes=None):  # noqa: E501
        """DestinyItemPlugComponent - a model defined in OpenAPI"""  # noqa: E501

        self._plug_item_hash = None
        self._plug_objectives = None
        self._can_insert = None
        self._enabled = None
        self._insert_fail_indexes = None
        self._enable_fail_indexes = None
        self.discriminator = None

        if plug_item_hash is not None:
            self.plug_item_hash = plug_item_hash
        if plug_objectives is not None:
            self.plug_objectives = plug_objectives
        if can_insert is not None:
            self.can_insert = can_insert
        if enabled is not None:
            self.enabled = enabled
        if insert_fail_indexes is not None:
            self.insert_fail_indexes = insert_fail_indexes
        if enable_fail_indexes is not None:
            self.enable_fail_indexes = enable_fail_indexes

    @property
    def plug_item_hash(self):
        """Gets the plug_item_hash of this DestinyItemPlugComponent.  # noqa: E501

        The hash identifier of the DestinyInventoryItemDefinition that represents this plug.  # noqa: E501

        :return: The plug_item_hash of this DestinyItemPlugComponent.  # noqa: E501
        :rtype: int
        """
        return self._plug_item_hash

    @plug_item_hash.setter
    def plug_item_hash(self, plug_item_hash):
        """Sets the plug_item_hash of this DestinyItemPlugComponent.

        The hash identifier of the DestinyInventoryItemDefinition that represents this plug.  # noqa: E501

        :param plug_item_hash: The plug_item_hash of this DestinyItemPlugComponent.  # noqa: E501
        :type: int
        """

        self._plug_item_hash = plug_item_hash

    @property
    def plug_objectives(self):
        """Gets the plug_objectives of this DestinyItemPlugComponent.  # noqa: E501

        Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the \"gating\" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.  # noqa: E501

        :return: The plug_objectives of this DestinyItemPlugComponent.  # noqa: E501
        :rtype: list[DestinyObjectiveProgress]
        """
        return self._plug_objectives

    @plug_objectives.setter
    def plug_objectives(self, plug_objectives):
        """Sets the plug_objectives of this DestinyItemPlugComponent.

        Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the \"gating\" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.  # noqa: E501

        :param plug_objectives: The plug_objectives of this DestinyItemPlugComponent.  # noqa: E501
        :type: list[DestinyObjectiveProgress]
        """

        self._plug_objectives = plug_objectives

    @property
    def can_insert(self):
        """Gets the can_insert of this DestinyItemPlugComponent.  # noqa: E501

        If true, this plug has met all of its insertion requirements. Big if true.  # noqa: E501

        :return: The can_insert of this DestinyItemPlugComponent.  # noqa: E501
        :rtype: bool
        """
        return self._can_insert

    @can_insert.setter
    def can_insert(self, can_insert):
        """Sets the can_insert of this DestinyItemPlugComponent.

        If true, this plug has met all of its insertion requirements. Big if true.  # noqa: E501

        :param can_insert: The can_insert of this DestinyItemPlugComponent.  # noqa: E501
        :type: bool
        """

        self._can_insert = can_insert

    @property
    def enabled(self):
        """Gets the enabled of this DestinyItemPlugComponent.  # noqa: E501

        If true, this plug will provide its benefits while inserted.  # noqa: E501

        :return: The enabled of this DestinyItemPlugComponent.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DestinyItemPlugComponent.

        If true, this plug will provide its benefits while inserted.  # noqa: E501

        :param enabled: The enabled of this DestinyItemPlugComponent.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def insert_fail_indexes(self):
        """Gets the insert_fail_indexes of this DestinyItemPlugComponent.  # noqa: E501

        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.  # noqa: E501

        :return: The insert_fail_indexes of this DestinyItemPlugComponent.  # noqa: E501
        :rtype: list[int]
        """
        return self._insert_fail_indexes

    @insert_fail_indexes.setter
    def insert_fail_indexes(self, insert_fail_indexes):
        """Sets the insert_fail_indexes of this DestinyItemPlugComponent.

        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.  # noqa: E501

        :param insert_fail_indexes: The insert_fail_indexes of this DestinyItemPlugComponent.  # noqa: E501
        :type: list[int]
        """

        self._insert_fail_indexes = insert_fail_indexes

    @property
    def enable_fail_indexes(self):
        """Gets the enable_fail_indexes of this DestinyItemPlugComponent.  # noqa: E501

        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.  # noqa: E501

        :return: The enable_fail_indexes of this DestinyItemPlugComponent.  # noqa: E501
        :rtype: list[int]
        """
        return self._enable_fail_indexes

    @enable_fail_indexes.setter
    def enable_fail_indexes(self, enable_fail_indexes):
        """Sets the enable_fail_indexes of this DestinyItemPlugComponent.

        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.  # noqa: E501

        :param enable_fail_indexes: The enable_fail_indexes of this DestinyItemPlugComponent.  # noqa: E501
        :type: list[int]
        """

        self._enable_fail_indexes = enable_fail_indexes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemPlugComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
