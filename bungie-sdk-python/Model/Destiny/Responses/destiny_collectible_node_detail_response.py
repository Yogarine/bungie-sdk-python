# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyCollectibleNodeDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collectibles': 'SingleComponentResponseOfDestinyCollectiblesComponent',
        'collectible_item_components': 'DestinyItemComponentSetOfuint32'
    }

    attribute_map = {
        'collectibles': 'collectibles',
        'collectible_item_components': 'collectibleItemComponents'
    }

    def __init__(self, collectibles=None, collectible_item_components=None):  # noqa: E501
        """DestinyCollectibleNodeDetailResponse - a model defined in OpenAPI"""  # noqa: E501

        self._collectibles = None
        self._collectible_item_components = None
        self.discriminator = None

        if collectibles is not None:
            self.collectibles = collectibles
        if collectible_item_components is not None:
            self.collectible_item_components = collectible_item_components

    @property
    def collectibles(self):
        """Gets the collectibles of this DestinyCollectibleNodeDetailResponse.  # noqa: E501

        COMPONENT TYPE: Collectibles  # noqa: E501

        :return: The collectibles of this DestinyCollectibleNodeDetailResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCollectiblesComponent
        """
        return self._collectibles

    @collectibles.setter
    def collectibles(self, collectibles):
        """Sets the collectibles of this DestinyCollectibleNodeDetailResponse.

        COMPONENT TYPE: Collectibles  # noqa: E501

        :param collectibles: The collectibles of this DestinyCollectibleNodeDetailResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCollectiblesComponent
        """

        self._collectibles = collectibles

    @property
    def collectible_item_components(self):
        """Gets the collectible_item_components of this DestinyCollectibleNodeDetailResponse.  # noqa: E501

        Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.  NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.  We may all come to regret this decision. We will see.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :return: The collectible_item_components of this DestinyCollectibleNodeDetailResponse.  # noqa: E501
        :rtype: DestinyItemComponentSetOfuint32
        """
        return self._collectible_item_components

    @collectible_item_components.setter
    def collectible_item_components(self, collectible_item_components):
        """Sets the collectible_item_components of this DestinyCollectibleNodeDetailResponse.

        Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.  NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.  We may all come to regret this decision. We will see.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :param collectible_item_components: The collectible_item_components of this DestinyCollectibleNodeDetailResponse.  # noqa: E501
        :type: DestinyItemComponentSetOfuint32
        """

        self._collectible_item_components = collectible_item_components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyCollectibleNodeDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
