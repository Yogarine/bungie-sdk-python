# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyLinkedProfilesResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profiles': 'list[DestinyProfileUserInfoCard]',
        'bnet_membership': 'UserInfoCard',
        'profiles_with_errors': 'list[DestinyErrorProfile]'
    }

    attribute_map = {
        'profiles': 'profiles',
        'bnet_membership': 'bnetMembership',
        'profiles_with_errors': 'profilesWithErrors'
    }

    def __init__(self, profiles=None, bnet_membership=None, profiles_with_errors=None):  # noqa: E501
        """DestinyLinkedProfilesResponse - a model defined in OpenAPI"""  # noqa: E501

        self._profiles = None
        self._bnet_membership = None
        self._profiles_with_errors = None
        self.discriminator = None

        if profiles is not None:
            self.profiles = profiles
        if bnet_membership is not None:
            self.bnet_membership = bnet_membership
        if profiles_with_errors is not None:
            self.profiles_with_errors = profiles_with_errors

    @property
    def profiles(self):
        """Gets the profiles of this DestinyLinkedProfilesResponse.  # noqa: E501

        Any Destiny account for whom we could successfully pull characters will be returned here, as the Platform-level summary of user data. (no character data, no Destiny account data other than the Membership ID and Type so you can make further queries)  # noqa: E501

        :return: The profiles of this DestinyLinkedProfilesResponse.  # noqa: E501
        :rtype: list[DestinyProfileUserInfoCard]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this DestinyLinkedProfilesResponse.

        Any Destiny account for whom we could successfully pull characters will be returned here, as the Platform-level summary of user data. (no character data, no Destiny account data other than the Membership ID and Type so you can make further queries)  # noqa: E501

        :param profiles: The profiles of this DestinyLinkedProfilesResponse.  # noqa: E501
        :type: list[DestinyProfileUserInfoCard]
        """

        self._profiles = profiles

    @property
    def bnet_membership(self):
        """Gets the bnet_membership of this DestinyLinkedProfilesResponse.  # noqa: E501

        If the requested membership had a linked Bungie.Net membership ID, this is the basic information about that BNet account.  I know, Tetron; I know this is mixing UserServices concerns with DestinyServices concerns. But it's so damn convenient! https://www.youtube.com/watch?v=X5R-bB-gKVI  # noqa: E501

        :return: The bnet_membership of this DestinyLinkedProfilesResponse.  # noqa: E501
        :rtype: UserInfoCard
        """
        return self._bnet_membership

    @bnet_membership.setter
    def bnet_membership(self, bnet_membership):
        """Sets the bnet_membership of this DestinyLinkedProfilesResponse.

        If the requested membership had a linked Bungie.Net membership ID, this is the basic information about that BNet account.  I know, Tetron; I know this is mixing UserServices concerns with DestinyServices concerns. But it's so damn convenient! https://www.youtube.com/watch?v=X5R-bB-gKVI  # noqa: E501

        :param bnet_membership: The bnet_membership of this DestinyLinkedProfilesResponse.  # noqa: E501
        :type: UserInfoCard
        """

        self._bnet_membership = bnet_membership

    @property
    def profiles_with_errors(self):
        """Gets the profiles_with_errors of this DestinyLinkedProfilesResponse.  # noqa: E501

        This is brief summary info for profiles that we believe have valid Destiny info, but who failed to return data for some other reason and thus we know that subsequent calls for their info will also fail.  # noqa: E501

        :return: The profiles_with_errors of this DestinyLinkedProfilesResponse.  # noqa: E501
        :rtype: list[DestinyErrorProfile]
        """
        return self._profiles_with_errors

    @profiles_with_errors.setter
    def profiles_with_errors(self, profiles_with_errors):
        """Sets the profiles_with_errors of this DestinyLinkedProfilesResponse.

        This is brief summary info for profiles that we believe have valid Destiny info, but who failed to return data for some other reason and thus we know that subsequent calls for their info will also fail.  # noqa: E501

        :param profiles_with_errors: The profiles_with_errors of this DestinyLinkedProfilesResponse.  # noqa: E501
        :type: list[DestinyErrorProfile]
        """

        self._profiles_with_errors = profiles_with_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyLinkedProfilesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
