# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyObjectiveProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'objective_hash': 'int',
        'destination_hash': 'int',
        'activity_hash': 'int',
        'progress': 'int',
        'completion_value': 'int',
        'complete': 'bool',
        'visible': 'bool'
    }

    attribute_map = {
        'objective_hash': 'objectiveHash',
        'destination_hash': 'destinationHash',
        'activity_hash': 'activityHash',
        'progress': 'progress',
        'completion_value': 'completionValue',
        'complete': 'complete',
        'visible': 'visible'
    }

    def __init__(self, objective_hash=None, destination_hash=None, activity_hash=None, progress=None, completion_value=None, complete=None, visible=None):  # noqa: E501
        """DestinyObjectiveProgress - a model defined in OpenAPI"""  # noqa: E501

        self._objective_hash = None
        self._destination_hash = None
        self._activity_hash = None
        self._progress = None
        self._completion_value = None
        self._complete = None
        self._visible = None
        self.discriminator = None

        if objective_hash is not None:
            self.objective_hash = objective_hash
        self.destination_hash = destination_hash
        self.activity_hash = activity_hash
        self.progress = progress
        if completion_value is not None:
            self.completion_value = completion_value
        if complete is not None:
            self.complete = complete
        if visible is not None:
            self.visible = visible

    @property
    def objective_hash(self):
        """Gets the objective_hash of this DestinyObjectiveProgress.  # noqa: E501

        The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.  # noqa: E501

        :return: The objective_hash of this DestinyObjectiveProgress.  # noqa: E501
        :rtype: int
        """
        return self._objective_hash

    @objective_hash.setter
    def objective_hash(self, objective_hash):
        """Sets the objective_hash of this DestinyObjectiveProgress.

        The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.  # noqa: E501

        :param objective_hash: The objective_hash of this DestinyObjectiveProgress.  # noqa: E501
        :type: int
        """

        self._objective_hash = objective_hash

    @property
    def destination_hash(self):
        """Gets the destination_hash of this DestinyObjectiveProgress.  # noqa: E501

        If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.  # noqa: E501

        :return: The destination_hash of this DestinyObjectiveProgress.  # noqa: E501
        :rtype: int
        """
        return self._destination_hash

    @destination_hash.setter
    def destination_hash(self, destination_hash):
        """Sets the destination_hash of this DestinyObjectiveProgress.

        If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.  # noqa: E501

        :param destination_hash: The destination_hash of this DestinyObjectiveProgress.  # noqa: E501
        :type: int
        """

        self._destination_hash = destination_hash

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyObjectiveProgress.  # noqa: E501

        If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.  # noqa: E501

        :return: The activity_hash of this DestinyObjectiveProgress.  # noqa: E501
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyObjectiveProgress.

        If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.  # noqa: E501

        :param activity_hash: The activity_hash of this DestinyObjectiveProgress.  # noqa: E501
        :type: int
        """

        self._activity_hash = activity_hash

    @property
    def progress(self):
        """Gets the progress of this DestinyObjectiveProgress.  # noqa: E501

        If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.valueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.valueStyle before rendering progress.  # noqa: E501

        :return: The progress of this DestinyObjectiveProgress.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DestinyObjectiveProgress.

        If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.valueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.valueStyle before rendering progress.  # noqa: E501

        :param progress: The progress of this DestinyObjectiveProgress.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def completion_value(self):
        """Gets the completion_value of this DestinyObjectiveProgress.  # noqa: E501

        As of Forsaken, objectives' completion value is determined dynamically at runtime.  This value represents the threshold of progress you need to surpass in order for this objective to be considered \"complete\".  If you were using objective data, switch from using the DestinyObjectiveDefinition's \"completionValue\" to this value.  # noqa: E501

        :return: The completion_value of this DestinyObjectiveProgress.  # noqa: E501
        :rtype: int
        """
        return self._completion_value

    @completion_value.setter
    def completion_value(self, completion_value):
        """Sets the completion_value of this DestinyObjectiveProgress.

        As of Forsaken, objectives' completion value is determined dynamically at runtime.  This value represents the threshold of progress you need to surpass in order for this objective to be considered \"complete\".  If you were using objective data, switch from using the DestinyObjectiveDefinition's \"completionValue\" to this value.  # noqa: E501

        :param completion_value: The completion_value of this DestinyObjectiveProgress.  # noqa: E501
        :type: int
        """

        self._completion_value = completion_value

    @property
    def complete(self):
        """Gets the complete of this DestinyObjectiveProgress.  # noqa: E501

        Whether or not the Objective is completed.  # noqa: E501

        :return: The complete of this DestinyObjectiveProgress.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this DestinyObjectiveProgress.

        Whether or not the Objective is completed.  # noqa: E501

        :param complete: The complete of this DestinyObjectiveProgress.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def visible(self):
        """Gets the visible of this DestinyObjectiveProgress.  # noqa: E501

        If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property.  # noqa: E501

        :return: The visible of this DestinyObjectiveProgress.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DestinyObjectiveProgress.

        If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property.  # noqa: E501

        :param visible: The visible of this DestinyObjectiveProgress.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyObjectiveProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
