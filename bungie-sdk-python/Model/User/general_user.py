# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GeneralUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'membership_id': 'int',
        'unique_name': 'str',
        'normalized_name': 'str',
        'display_name': 'str',
        'profile_picture': 'int',
        'profile_theme': 'int',
        'user_title': 'int',
        'success_message_flags': 'int',
        'is_deleted': 'bool',
        'about': 'str',
        'first_access': 'datetime',
        'last_update': 'datetime',
        'legacy_portal_uid': 'int',
        'context': 'UserToUserContext',
        'psn_display_name': 'str',
        'xbox_display_name': 'str',
        'fb_display_name': 'str',
        'show_activity': 'bool',
        'locale': 'str',
        'locale_inherit_default': 'bool',
        'last_ban_report_id': 'int',
        'show_group_messaging': 'bool',
        'profile_picture_path': 'str',
        'profile_picture_wide_path': 'str',
        'profile_theme_name': 'str',
        'user_title_display': 'str',
        'status_text': 'str',
        'status_date': 'datetime',
        'profile_ban_expire': 'datetime',
        'blizzard_display_name': 'str'
    }

    attribute_map = {
        'membership_id': 'membershipId',
        'unique_name': 'uniqueName',
        'normalized_name': 'normalizedName',
        'display_name': 'displayName',
        'profile_picture': 'profilePicture',
        'profile_theme': 'profileTheme',
        'user_title': 'userTitle',
        'success_message_flags': 'successMessageFlags',
        'is_deleted': 'isDeleted',
        'about': 'about',
        'first_access': 'firstAccess',
        'last_update': 'lastUpdate',
        'legacy_portal_uid': 'legacyPortalUID',
        'context': 'context',
        'psn_display_name': 'psnDisplayName',
        'xbox_display_name': 'xboxDisplayName',
        'fb_display_name': 'fbDisplayName',
        'show_activity': 'showActivity',
        'locale': 'locale',
        'locale_inherit_default': 'localeInheritDefault',
        'last_ban_report_id': 'lastBanReportId',
        'show_group_messaging': 'showGroupMessaging',
        'profile_picture_path': 'profilePicturePath',
        'profile_picture_wide_path': 'profilePictureWidePath',
        'profile_theme_name': 'profileThemeName',
        'user_title_display': 'userTitleDisplay',
        'status_text': 'statusText',
        'status_date': 'statusDate',
        'profile_ban_expire': 'profileBanExpire',
        'blizzard_display_name': 'blizzardDisplayName'
    }

    def __init__(self, membership_id=None, unique_name=None, normalized_name=None, display_name=None, profile_picture=None, profile_theme=None, user_title=None, success_message_flags=None, is_deleted=None, about=None, first_access=None, last_update=None, legacy_portal_uid=None, context=None, psn_display_name=None, xbox_display_name=None, fb_display_name=None, show_activity=None, locale=None, locale_inherit_default=None, last_ban_report_id=None, show_group_messaging=None, profile_picture_path=None, profile_picture_wide_path=None, profile_theme_name=None, user_title_display=None, status_text=None, status_date=None, profile_ban_expire=None, blizzard_display_name=None):  # noqa: E501
        """GeneralUser - a model defined in OpenAPI"""  # noqa: E501

        self._membership_id = None
        self._unique_name = None
        self._normalized_name = None
        self._display_name = None
        self._profile_picture = None
        self._profile_theme = None
        self._user_title = None
        self._success_message_flags = None
        self._is_deleted = None
        self._about = None
        self._first_access = None
        self._last_update = None
        self._legacy_portal_uid = None
        self._context = None
        self._psn_display_name = None
        self._xbox_display_name = None
        self._fb_display_name = None
        self._show_activity = None
        self._locale = None
        self._locale_inherit_default = None
        self._last_ban_report_id = None
        self._show_group_messaging = None
        self._profile_picture_path = None
        self._profile_picture_wide_path = None
        self._profile_theme_name = None
        self._user_title_display = None
        self._status_text = None
        self._status_date = None
        self._profile_ban_expire = None
        self._blizzard_display_name = None
        self.discriminator = None

        if membership_id is not None:
            self.membership_id = membership_id
        if unique_name is not None:
            self.unique_name = unique_name
        if normalized_name is not None:
            self.normalized_name = normalized_name
        if display_name is not None:
            self.display_name = display_name
        if profile_picture is not None:
            self.profile_picture = profile_picture
        if profile_theme is not None:
            self.profile_theme = profile_theme
        if user_title is not None:
            self.user_title = user_title
        if success_message_flags is not None:
            self.success_message_flags = success_message_flags
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if about is not None:
            self.about = about
        self.first_access = first_access
        self.last_update = last_update
        self.legacy_portal_uid = legacy_portal_uid
        if context is not None:
            self.context = context
        if psn_display_name is not None:
            self.psn_display_name = psn_display_name
        if xbox_display_name is not None:
            self.xbox_display_name = xbox_display_name
        if fb_display_name is not None:
            self.fb_display_name = fb_display_name
        self.show_activity = show_activity
        if locale is not None:
            self.locale = locale
        if locale_inherit_default is not None:
            self.locale_inherit_default = locale_inherit_default
        self.last_ban_report_id = last_ban_report_id
        if show_group_messaging is not None:
            self.show_group_messaging = show_group_messaging
        if profile_picture_path is not None:
            self.profile_picture_path = profile_picture_path
        if profile_picture_wide_path is not None:
            self.profile_picture_wide_path = profile_picture_wide_path
        if profile_theme_name is not None:
            self.profile_theme_name = profile_theme_name
        if user_title_display is not None:
            self.user_title_display = user_title_display
        if status_text is not None:
            self.status_text = status_text
        if status_date is not None:
            self.status_date = status_date
        self.profile_ban_expire = profile_ban_expire
        if blizzard_display_name is not None:
            self.blizzard_display_name = blizzard_display_name

    @property
    def membership_id(self):
        """Gets the membership_id of this GeneralUser.  # noqa: E501


        :return: The membership_id of this GeneralUser.  # noqa: E501
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this GeneralUser.


        :param membership_id: The membership_id of this GeneralUser.  # noqa: E501
        :type: int
        """

        self._membership_id = membership_id

    @property
    def unique_name(self):
        """Gets the unique_name of this GeneralUser.  # noqa: E501


        :return: The unique_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this GeneralUser.


        :param unique_name: The unique_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._unique_name = unique_name

    @property
    def normalized_name(self):
        """Gets the normalized_name of this GeneralUser.  # noqa: E501


        :return: The normalized_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._normalized_name

    @normalized_name.setter
    def normalized_name(self, normalized_name):
        """Sets the normalized_name of this GeneralUser.


        :param normalized_name: The normalized_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._normalized_name = normalized_name

    @property
    def display_name(self):
        """Gets the display_name of this GeneralUser.  # noqa: E501


        :return: The display_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GeneralUser.


        :param display_name: The display_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def profile_picture(self):
        """Gets the profile_picture of this GeneralUser.  # noqa: E501


        :return: The profile_picture of this GeneralUser.  # noqa: E501
        :rtype: int
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this GeneralUser.


        :param profile_picture: The profile_picture of this GeneralUser.  # noqa: E501
        :type: int
        """

        self._profile_picture = profile_picture

    @property
    def profile_theme(self):
        """Gets the profile_theme of this GeneralUser.  # noqa: E501


        :return: The profile_theme of this GeneralUser.  # noqa: E501
        :rtype: int
        """
        return self._profile_theme

    @profile_theme.setter
    def profile_theme(self, profile_theme):
        """Sets the profile_theme of this GeneralUser.


        :param profile_theme: The profile_theme of this GeneralUser.  # noqa: E501
        :type: int
        """

        self._profile_theme = profile_theme

    @property
    def user_title(self):
        """Gets the user_title of this GeneralUser.  # noqa: E501


        :return: The user_title of this GeneralUser.  # noqa: E501
        :rtype: int
        """
        return self._user_title

    @user_title.setter
    def user_title(self, user_title):
        """Sets the user_title of this GeneralUser.


        :param user_title: The user_title of this GeneralUser.  # noqa: E501
        :type: int
        """

        self._user_title = user_title

    @property
    def success_message_flags(self):
        """Gets the success_message_flags of this GeneralUser.  # noqa: E501


        :return: The success_message_flags of this GeneralUser.  # noqa: E501
        :rtype: int
        """
        return self._success_message_flags

    @success_message_flags.setter
    def success_message_flags(self, success_message_flags):
        """Sets the success_message_flags of this GeneralUser.


        :param success_message_flags: The success_message_flags of this GeneralUser.  # noqa: E501
        :type: int
        """

        self._success_message_flags = success_message_flags

    @property
    def is_deleted(self):
        """Gets the is_deleted of this GeneralUser.  # noqa: E501


        :return: The is_deleted of this GeneralUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this GeneralUser.


        :param is_deleted: The is_deleted of this GeneralUser.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def about(self):
        """Gets the about of this GeneralUser.  # noqa: E501


        :return: The about of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this GeneralUser.


        :param about: The about of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._about = about

    @property
    def first_access(self):
        """Gets the first_access of this GeneralUser.  # noqa: E501


        :return: The first_access of this GeneralUser.  # noqa: E501
        :rtype: datetime
        """
        return self._first_access

    @first_access.setter
    def first_access(self, first_access):
        """Sets the first_access of this GeneralUser.


        :param first_access: The first_access of this GeneralUser.  # noqa: E501
        :type: datetime
        """

        self._first_access = first_access

    @property
    def last_update(self):
        """Gets the last_update of this GeneralUser.  # noqa: E501


        :return: The last_update of this GeneralUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this GeneralUser.


        :param last_update: The last_update of this GeneralUser.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def legacy_portal_uid(self):
        """Gets the legacy_portal_uid of this GeneralUser.  # noqa: E501


        :return: The legacy_portal_uid of this GeneralUser.  # noqa: E501
        :rtype: int
        """
        return self._legacy_portal_uid

    @legacy_portal_uid.setter
    def legacy_portal_uid(self, legacy_portal_uid):
        """Sets the legacy_portal_uid of this GeneralUser.


        :param legacy_portal_uid: The legacy_portal_uid of this GeneralUser.  # noqa: E501
        :type: int
        """

        self._legacy_portal_uid = legacy_portal_uid

    @property
    def context(self):
        """Gets the context of this GeneralUser.  # noqa: E501


        :return: The context of this GeneralUser.  # noqa: E501
        :rtype: UserToUserContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GeneralUser.


        :param context: The context of this GeneralUser.  # noqa: E501
        :type: UserToUserContext
        """

        self._context = context

    @property
    def psn_display_name(self):
        """Gets the psn_display_name of this GeneralUser.  # noqa: E501


        :return: The psn_display_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._psn_display_name

    @psn_display_name.setter
    def psn_display_name(self, psn_display_name):
        """Sets the psn_display_name of this GeneralUser.


        :param psn_display_name: The psn_display_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._psn_display_name = psn_display_name

    @property
    def xbox_display_name(self):
        """Gets the xbox_display_name of this GeneralUser.  # noqa: E501


        :return: The xbox_display_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._xbox_display_name

    @xbox_display_name.setter
    def xbox_display_name(self, xbox_display_name):
        """Sets the xbox_display_name of this GeneralUser.


        :param xbox_display_name: The xbox_display_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._xbox_display_name = xbox_display_name

    @property
    def fb_display_name(self):
        """Gets the fb_display_name of this GeneralUser.  # noqa: E501


        :return: The fb_display_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._fb_display_name

    @fb_display_name.setter
    def fb_display_name(self, fb_display_name):
        """Sets the fb_display_name of this GeneralUser.


        :param fb_display_name: The fb_display_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._fb_display_name = fb_display_name

    @property
    def show_activity(self):
        """Gets the show_activity of this GeneralUser.  # noqa: E501


        :return: The show_activity of this GeneralUser.  # noqa: E501
        :rtype: bool
        """
        return self._show_activity

    @show_activity.setter
    def show_activity(self, show_activity):
        """Sets the show_activity of this GeneralUser.


        :param show_activity: The show_activity of this GeneralUser.  # noqa: E501
        :type: bool
        """

        self._show_activity = show_activity

    @property
    def locale(self):
        """Gets the locale of this GeneralUser.  # noqa: E501


        :return: The locale of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this GeneralUser.


        :param locale: The locale of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def locale_inherit_default(self):
        """Gets the locale_inherit_default of this GeneralUser.  # noqa: E501


        :return: The locale_inherit_default of this GeneralUser.  # noqa: E501
        :rtype: bool
        """
        return self._locale_inherit_default

    @locale_inherit_default.setter
    def locale_inherit_default(self, locale_inherit_default):
        """Sets the locale_inherit_default of this GeneralUser.


        :param locale_inherit_default: The locale_inherit_default of this GeneralUser.  # noqa: E501
        :type: bool
        """

        self._locale_inherit_default = locale_inherit_default

    @property
    def last_ban_report_id(self):
        """Gets the last_ban_report_id of this GeneralUser.  # noqa: E501


        :return: The last_ban_report_id of this GeneralUser.  # noqa: E501
        :rtype: int
        """
        return self._last_ban_report_id

    @last_ban_report_id.setter
    def last_ban_report_id(self, last_ban_report_id):
        """Sets the last_ban_report_id of this GeneralUser.


        :param last_ban_report_id: The last_ban_report_id of this GeneralUser.  # noqa: E501
        :type: int
        """

        self._last_ban_report_id = last_ban_report_id

    @property
    def show_group_messaging(self):
        """Gets the show_group_messaging of this GeneralUser.  # noqa: E501


        :return: The show_group_messaging of this GeneralUser.  # noqa: E501
        :rtype: bool
        """
        return self._show_group_messaging

    @show_group_messaging.setter
    def show_group_messaging(self, show_group_messaging):
        """Sets the show_group_messaging of this GeneralUser.


        :param show_group_messaging: The show_group_messaging of this GeneralUser.  # noqa: E501
        :type: bool
        """

        self._show_group_messaging = show_group_messaging

    @property
    def profile_picture_path(self):
        """Gets the profile_picture_path of this GeneralUser.  # noqa: E501


        :return: The profile_picture_path of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture_path

    @profile_picture_path.setter
    def profile_picture_path(self, profile_picture_path):
        """Sets the profile_picture_path of this GeneralUser.


        :param profile_picture_path: The profile_picture_path of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._profile_picture_path = profile_picture_path

    @property
    def profile_picture_wide_path(self):
        """Gets the profile_picture_wide_path of this GeneralUser.  # noqa: E501


        :return: The profile_picture_wide_path of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture_wide_path

    @profile_picture_wide_path.setter
    def profile_picture_wide_path(self, profile_picture_wide_path):
        """Sets the profile_picture_wide_path of this GeneralUser.


        :param profile_picture_wide_path: The profile_picture_wide_path of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._profile_picture_wide_path = profile_picture_wide_path

    @property
    def profile_theme_name(self):
        """Gets the profile_theme_name of this GeneralUser.  # noqa: E501


        :return: The profile_theme_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._profile_theme_name

    @profile_theme_name.setter
    def profile_theme_name(self, profile_theme_name):
        """Sets the profile_theme_name of this GeneralUser.


        :param profile_theme_name: The profile_theme_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._profile_theme_name = profile_theme_name

    @property
    def user_title_display(self):
        """Gets the user_title_display of this GeneralUser.  # noqa: E501


        :return: The user_title_display of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._user_title_display

    @user_title_display.setter
    def user_title_display(self, user_title_display):
        """Sets the user_title_display of this GeneralUser.


        :param user_title_display: The user_title_display of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._user_title_display = user_title_display

    @property
    def status_text(self):
        """Gets the status_text of this GeneralUser.  # noqa: E501


        :return: The status_text of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this GeneralUser.


        :param status_text: The status_text of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._status_text = status_text

    @property
    def status_date(self):
        """Gets the status_date of this GeneralUser.  # noqa: E501


        :return: The status_date of this GeneralUser.  # noqa: E501
        :rtype: datetime
        """
        return self._status_date

    @status_date.setter
    def status_date(self, status_date):
        """Sets the status_date of this GeneralUser.


        :param status_date: The status_date of this GeneralUser.  # noqa: E501
        :type: datetime
        """

        self._status_date = status_date

    @property
    def profile_ban_expire(self):
        """Gets the profile_ban_expire of this GeneralUser.  # noqa: E501


        :return: The profile_ban_expire of this GeneralUser.  # noqa: E501
        :rtype: datetime
        """
        return self._profile_ban_expire

    @profile_ban_expire.setter
    def profile_ban_expire(self, profile_ban_expire):
        """Sets the profile_ban_expire of this GeneralUser.


        :param profile_ban_expire: The profile_ban_expire of this GeneralUser.  # noqa: E501
        :type: datetime
        """

        self._profile_ban_expire = profile_ban_expire

    @property
    def blizzard_display_name(self):
        """Gets the blizzard_display_name of this GeneralUser.  # noqa: E501


        :return: The blizzard_display_name of this GeneralUser.  # noqa: E501
        :rtype: str
        """
        return self._blizzard_display_name

    @blizzard_display_name.setter
    def blizzard_display_name(self, blizzard_display_name):
        """Sets the blizzard_display_name of this GeneralUser.


        :param blizzard_display_name: The blizzard_display_name of this GeneralUser.  # noqa: E501
        :type: str
        """

        self._blizzard_display_name = blizzard_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
