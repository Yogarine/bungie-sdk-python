# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bungie-sdk-python.api_client import ApiClient


class PreviewApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_clan_aggregate_stats(self, group_id, **kwargs):  # noqa: E501
        """get_clan_aggregate_stats  # noqa: E501

        Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clan_aggregate_stats(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_clan_aggregate_stats_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_clan_aggregate_stats_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_clan_aggregate_stats_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_clan_aggregate_stats  # noqa: E501

        Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clan_aggregate_stats_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'modes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clan_aggregate_stats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_clan_aggregate_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/AggregateClanStats/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_clan_leaderboards(self, group_id, **kwargs):  # noqa: E501
        """get_clan_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clan_leaderboards(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_clan_leaderboards_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_clan_leaderboards_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_clan_leaderboards_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_clan_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clan_leaderboards_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clan_leaderboards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_clan_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []
        if 'maxtop' in local_var_params:
            query_params.append(('maxtop', local_var_params['maxtop']))  # noqa: E501
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
        if 'statid' in local_var_params:
            query_params.append(('statid', local_var_params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leaderboards(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """get_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards(destiny_membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def get_leaderboards_with_http_info(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """get_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_with_http_info(destiny_membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leaderboards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_leaderboards`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []
        if 'maxtop' in local_var_params:
            query_params.append(('maxtop', local_var_params['maxtop']))  # noqa: E501
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
        if 'statid' in local_var_params:
            query_params.append(('statid', local_var_params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leaderboards_for_character(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """get_leaderboards_for_character  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_for_character(character_id, destiny_membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def get_leaderboards_for_character_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """get_leaderboards_for_character  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leaderboards_for_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_leaderboards_for_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []
        if 'maxtop' in local_var_params:
            query_params.append(('maxtop', local_var_params['maxtop']))  # noqa: E501
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
        if 'statid' in local_var_params:
            query_params.append(('statid', local_var_params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_vendors(self, **kwargs):  # noqa: E501
        """get_public_vendors  # noqa: E501

        Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_vendors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_vendors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_public_vendors_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_public_vendors_with_http_info(self, **kwargs):  # noqa: E501
        """get_public_vendors  # noqa: E501

        Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_vendors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['components']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_vendors" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'components' in local_var_params:
            query_params.append(('components', local_var_params['components']))  # noqa: E501
            collection_formats['components'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2//Vendors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_socket_plug(self, destiny_insert_plugs_action_request, **kwargs):  # noqa: E501
        """insert_socket_plug  # noqa: E501

        Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_socket_plug(destiny_insert_plugs_action_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Destiny.Requests.Actions.DestinyInsertPlugsActionRequest destiny_insert_plugs_action_request: (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_socket_plug_with_http_info(destiny_insert_plugs_action_request, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_socket_plug_with_http_info(destiny_insert_plugs_action_request, **kwargs)  # noqa: E501
            return data

    def insert_socket_plug_with_http_info(self, destiny_insert_plugs_action_request, **kwargs):  # noqa: E501
        """insert_socket_plug  # noqa: E501

        Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_socket_plug_with_http_info(destiny_insert_plugs_action_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Destiny.Requests.Actions.DestinyInsertPlugsActionRequest destiny_insert_plugs_action_request: (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['destiny_insert_plugs_action_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_socket_plug" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'destiny_insert_plugs_action_request' is set
        if ('destiny_insert_plugs_action_request' not in local_var_params or
                local_var_params['destiny_insert_plugs_action_request'] is None):
            raise ValueError("Missing the required parameter `destiny_insert_plugs_action_request` when calling `insert_socket_plug`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'destiny_insert_plugs_action_request' in local_var_params:
            body_params = local_var_params['destiny_insert_plugs_action_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/InsertSocketPlug/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
