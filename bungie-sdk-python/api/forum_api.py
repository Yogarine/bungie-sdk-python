# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bungie-sdk-python.api_client import ApiClient


class ForumApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_core_topics_paged(self, category_filter, page, quick_date, sort, **kwargs):  # noqa: E501
        """get_core_topics_paged  # noqa: E501

        Gets a listing of all topics marked as part of the core group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_core_topics_paged(category_filter, page, quick_date, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_filter: The category filter. (required)
        :param int page: Zero base page (required)
        :param int quick_date: The date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_core_topics_paged_with_http_info(category_filter, page, quick_date, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_core_topics_paged_with_http_info(category_filter, page, quick_date, sort, **kwargs)  # noqa: E501
            return data

    def get_core_topics_paged_with_http_info(self, category_filter, page, quick_date, sort, **kwargs):  # noqa: E501
        """get_core_topics_paged  # noqa: E501

        Gets a listing of all topics marked as part of the core group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_core_topics_paged_with_http_info(category_filter, page, quick_date, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_filter: The category filter. (required)
        :param int page: Zero base page (required)
        :param int quick_date: The date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['category_filter', 'page', 'quick_date', 'sort', 'locales']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_core_topics_paged" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'category_filter' is set
        if ('category_filter' not in local_var_params or
                local_var_params['category_filter'] is None):
            raise ValueError("Missing the required parameter `category_filter` when calling `get_core_topics_paged`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_core_topics_paged`")  # noqa: E501
        # verify the required parameter 'quick_date' is set
        if ('quick_date' not in local_var_params or
                local_var_params['quick_date'] is None):
            raise ValueError("Missing the required parameter `quick_date` when calling `get_core_topics_paged`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in local_var_params or
                local_var_params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_core_topics_paged`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_filter' in local_var_params:
            path_params['categoryFilter'] = local_var_params['category_filter']  # noqa: E501
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'quick_date' in local_var_params:
            path_params['quickDate'] = local_var_params['quick_date']  # noqa: E501
        if 'sort' in local_var_params:
            path_params['sort'] = local_var_params['sort']  # noqa: E501

        query_params = []
        if 'locales' in local_var_params:
            query_params.append(('locales', local_var_params['locales']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forum_tag_suggestions(self, **kwargs):  # noqa: E501
        """get_forum_tag_suggestions  # noqa: E501

        Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forum_tag_suggestions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partialtag: The partial tag input to generate suggestions from.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forum_tag_suggestions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_forum_tag_suggestions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_forum_tag_suggestions_with_http_info(self, **kwargs):  # noqa: E501
        """get_forum_tag_suggestions  # noqa: E501

        Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forum_tag_suggestions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partialtag: The partial tag input to generate suggestions from.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['partialtag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forum_tag_suggestions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'partialtag' in local_var_params:
            query_params.append(('partialtag', local_var_params['partialtag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetForumTagSuggestions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_poll(self, topic_id, **kwargs):  # noqa: E501
        """get_poll  # noqa: E501

        Gets the specified forum poll.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_poll(topic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int topic_id: The post id of the topic that has the poll. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_poll_with_http_info(topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_poll_with_http_info(topic_id, **kwargs)  # noqa: E501
            return data

    def get_poll_with_http_info(self, topic_id, **kwargs):  # noqa: E501
        """get_poll  # noqa: E501

        Gets the specified forum poll.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_poll_with_http_info(topic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int topic_id: The post id of the topic that has the poll. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topic_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_poll" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topic_id' is set
        if ('topic_id' not in local_var_params or
                local_var_params['topic_id'] is None):
            raise ValueError("Missing the required parameter `topic_id` when calling `get_poll`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Poll/{topicId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_post_and_parent(self, child_post_id, **kwargs):  # noqa: E501
        """get_post_and_parent  # noqa: E501

        Returns the post specified and its immediate parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_and_parent(child_post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int child_post_id: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_post_and_parent_with_http_info(child_post_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_post_and_parent_with_http_info(child_post_id, **kwargs)  # noqa: E501
            return data

    def get_post_and_parent_with_http_info(self, child_post_id, **kwargs):  # noqa: E501
        """get_post_and_parent  # noqa: E501

        Returns the post specified and its immediate parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_and_parent_with_http_info(child_post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int child_post_id: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['child_post_id', 'showbanned']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_post_and_parent" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'child_post_id' is set
        if ('child_post_id' not in local_var_params or
                local_var_params['child_post_id'] is None):
            raise ValueError("Missing the required parameter `child_post_id` when calling `get_post_and_parent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'child_post_id' in local_var_params:
            path_params['childPostId'] = local_var_params['child_post_id']  # noqa: E501

        query_params = []
        if 'showbanned' in local_var_params:
            query_params.append(('showbanned', local_var_params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostAndParent/{childPostId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_post_and_parent_awaiting_approval(self, child_post_id, **kwargs):  # noqa: E501
        """get_post_and_parent_awaiting_approval  # noqa: E501

        Returns the post specified and its immediate parent of posts that are awaiting approval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_and_parent_awaiting_approval(child_post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int child_post_id: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_post_and_parent_awaiting_approval_with_http_info(child_post_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_post_and_parent_awaiting_approval_with_http_info(child_post_id, **kwargs)  # noqa: E501
            return data

    def get_post_and_parent_awaiting_approval_with_http_info(self, child_post_id, **kwargs):  # noqa: E501
        """get_post_and_parent_awaiting_approval  # noqa: E501

        Returns the post specified and its immediate parent of posts that are awaiting approval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_and_parent_awaiting_approval_with_http_info(child_post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int child_post_id: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['child_post_id', 'showbanned']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_post_and_parent_awaiting_approval" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'child_post_id' is set
        if ('child_post_id' not in local_var_params or
                local_var_params['child_post_id'] is None):
            raise ValueError("Missing the required parameter `child_post_id` when calling `get_post_and_parent_awaiting_approval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'child_post_id' in local_var_params:
            path_params['childPostId'] = local_var_params['child_post_id']  # noqa: E501

        query_params = []
        if 'showbanned' in local_var_params:
            query_params.append(('showbanned', local_var_params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_posts_threaded_paged(self, get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """get_posts_threaded_paged  # noqa: E501

        Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_posts_threaded_paged(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool get_parent_post: (required)
        :param int page: (required)
        :param int page_size: (required)
        :param int parent_post_id: (required)
        :param int reply_size: (required)
        :param bool root_thread_mode: (required)
        :param int sort_mode: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_posts_threaded_paged_with_http_info(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
        else:
            (data) = self.get_posts_threaded_paged_with_http_info(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
            return data

    def get_posts_threaded_paged_with_http_info(self, get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """get_posts_threaded_paged  # noqa: E501

        Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_posts_threaded_paged_with_http_info(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool get_parent_post: (required)
        :param int page: (required)
        :param int page_size: (required)
        :param int parent_post_id: (required)
        :param int reply_size: (required)
        :param bool root_thread_mode: (required)
        :param int sort_mode: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['get_parent_post', 'page', 'page_size', 'parent_post_id', 'reply_size', 'root_thread_mode', 'sort_mode', 'showbanned']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_posts_threaded_paged" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'get_parent_post' is set
        if ('get_parent_post' not in local_var_params or
                local_var_params['get_parent_post'] is None):
            raise ValueError("Missing the required parameter `get_parent_post` when calling `get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in local_var_params or
                local_var_params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'parent_post_id' is set
        if ('parent_post_id' not in local_var_params or
                local_var_params['parent_post_id'] is None):
            raise ValueError("Missing the required parameter `parent_post_id` when calling `get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'reply_size' is set
        if ('reply_size' not in local_var_params or
                local_var_params['reply_size'] is None):
            raise ValueError("Missing the required parameter `reply_size` when calling `get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'root_thread_mode' is set
        if ('root_thread_mode' not in local_var_params or
                local_var_params['root_thread_mode'] is None):
            raise ValueError("Missing the required parameter `root_thread_mode` when calling `get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'sort_mode' is set
        if ('sort_mode' not in local_var_params or
                local_var_params['sort_mode'] is None):
            raise ValueError("Missing the required parameter `sort_mode` when calling `get_posts_threaded_paged`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'get_parent_post' in local_var_params:
            path_params['getParentPost'] = local_var_params['get_parent_post']  # noqa: E501
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'page_size' in local_var_params:
            path_params['pageSize'] = local_var_params['page_size']  # noqa: E501
        if 'parent_post_id' in local_var_params:
            path_params['parentPostId'] = local_var_params['parent_post_id']  # noqa: E501
        if 'reply_size' in local_var_params:
            path_params['replySize'] = local_var_params['reply_size']  # noqa: E501
        if 'root_thread_mode' in local_var_params:
            path_params['rootThreadMode'] = local_var_params['root_thread_mode']  # noqa: E501
        if 'sort_mode' in local_var_params:
            path_params['sortMode'] = local_var_params['sort_mode']  # noqa: E501

        query_params = []
        if 'showbanned' in local_var_params:
            query_params.append(('showbanned', local_var_params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_posts_threaded_paged_from_child(self, child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """get_posts_threaded_paged_from_child  # noqa: E501

        Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_posts_threaded_paged_from_child(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int child_post_id: (required)
        :param int page: (required)
        :param int page_size: (required)
        :param int reply_size: (required)
        :param bool root_thread_mode: (required)
        :param int sort_mode: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_posts_threaded_paged_from_child_with_http_info(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
        else:
            (data) = self.get_posts_threaded_paged_from_child_with_http_info(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
            return data

    def get_posts_threaded_paged_from_child_with_http_info(self, child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """get_posts_threaded_paged_from_child  # noqa: E501

        Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_posts_threaded_paged_from_child_with_http_info(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int child_post_id: (required)
        :param int page: (required)
        :param int page_size: (required)
        :param int reply_size: (required)
        :param bool root_thread_mode: (required)
        :param int sort_mode: (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['child_post_id', 'page', 'page_size', 'reply_size', 'root_thread_mode', 'sort_mode', 'showbanned']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_posts_threaded_paged_from_child" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'child_post_id' is set
        if ('child_post_id' not in local_var_params or
                local_var_params['child_post_id'] is None):
            raise ValueError("Missing the required parameter `child_post_id` when calling `get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in local_var_params or
                local_var_params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'reply_size' is set
        if ('reply_size' not in local_var_params or
                local_var_params['reply_size'] is None):
            raise ValueError("Missing the required parameter `reply_size` when calling `get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'root_thread_mode' is set
        if ('root_thread_mode' not in local_var_params or
                local_var_params['root_thread_mode'] is None):
            raise ValueError("Missing the required parameter `root_thread_mode` when calling `get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'sort_mode' is set
        if ('sort_mode' not in local_var_params or
                local_var_params['sort_mode'] is None):
            raise ValueError("Missing the required parameter `sort_mode` when calling `get_posts_threaded_paged_from_child`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'child_post_id' in local_var_params:
            path_params['childPostId'] = local_var_params['child_post_id']  # noqa: E501
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'page_size' in local_var_params:
            path_params['pageSize'] = local_var_params['page_size']  # noqa: E501
        if 'reply_size' in local_var_params:
            path_params['replySize'] = local_var_params['reply_size']  # noqa: E501
        if 'root_thread_mode' in local_var_params:
            path_params['rootThreadMode'] = local_var_params['root_thread_mode']  # noqa: E501
        if 'sort_mode' in local_var_params:
            path_params['sortMode'] = local_var_params['sort_mode']  # noqa: E501

        query_params = []
        if 'showbanned' in local_var_params:
            query_params.append(('showbanned', local_var_params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recruitment_thread_summaries(self, request_body, **kwargs):  # noqa: E501
        """get_recruitment_thread_summaries  # noqa: E501

        Allows the caller to get a list of to 25 recruitment thread summary information objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recruitment_thread_summaries(request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] request_body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recruitment_thread_summaries_with_http_info(request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recruitment_thread_summaries_with_http_info(request_body, **kwargs)  # noqa: E501
            return data

    def get_recruitment_thread_summaries_with_http_info(self, request_body, **kwargs):  # noqa: E501
        """get_recruitment_thread_summaries  # noqa: E501

        Allows the caller to get a list of to 25 recruitment thread summary information objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recruitment_thread_summaries_with_http_info(request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] request_body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recruitment_thread_summaries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'request_body' is set
        if ('request_body' not in local_var_params or
                local_var_params['request_body'] is None):
            raise ValueError("Missing the required parameter `request_body` when calling `get_recruitment_thread_summaries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Recruit/Summaries/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic_for_content(self, content_id, **kwargs):  # noqa: E501
        """get_topic_for_content  # noqa: E501

        Gets the post Id for the given content item's comments, if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_for_content(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int content_id: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_topic_for_content_with_http_info(content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topic_for_content_with_http_info(content_id, **kwargs)  # noqa: E501
            return data

    def get_topic_for_content_with_http_info(self, content_id, **kwargs):  # noqa: E501
        """get_topic_for_content  # noqa: E501

        Gets the post Id for the given content item's comments, if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_for_content_with_http_info(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int content_id: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['content_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_for_content" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'content_id' is set
        if ('content_id' not in local_var_params or
                local_var_params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `get_topic_for_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_id' in local_var_params:
            path_params['contentId'] = local_var_params['content_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetTopicForContent/{contentId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topics_paged(self, category_filter, group, page, page_size, quick_date, sort, **kwargs):  # noqa: E501
        """get_topics_paged  # noqa: E501

        Get topics from any forum.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topics_paged(category_filter, group, page, page_size, quick_date, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_filter: A category filter (required)
        :param int group: The group, if any. (required)
        :param int page: Zero paged page number (required)
        :param int page_size: Unused (required)
        :param int quick_date: A date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :param str tagstring: The tags to search, if any.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_topics_paged_with_http_info(category_filter, group, page, page_size, quick_date, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topics_paged_with_http_info(category_filter, group, page, page_size, quick_date, sort, **kwargs)  # noqa: E501
            return data

    def get_topics_paged_with_http_info(self, category_filter, group, page, page_size, quick_date, sort, **kwargs):  # noqa: E501
        """get_topics_paged  # noqa: E501

        Get topics from any forum.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topics_paged_with_http_info(category_filter, group, page, page_size, quick_date, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_filter: A category filter (required)
        :param int group: The group, if any. (required)
        :param int page: Zero paged page number (required)
        :param int page_size: Unused (required)
        :param int quick_date: A date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :param str tagstring: The tags to search, if any.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['category_filter', 'group', 'page', 'page_size', 'quick_date', 'sort', 'locales', 'tagstring']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topics_paged" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'category_filter' is set
        if ('category_filter' not in local_var_params or
                local_var_params['category_filter'] is None):
            raise ValueError("Missing the required parameter `category_filter` when calling `get_topics_paged`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in local_var_params or
                local_var_params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_topics_paged`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_topics_paged`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in local_var_params or
                local_var_params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_topics_paged`")  # noqa: E501
        # verify the required parameter 'quick_date' is set
        if ('quick_date' not in local_var_params or
                local_var_params['quick_date'] is None):
            raise ValueError("Missing the required parameter `quick_date` when calling `get_topics_paged`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in local_var_params or
                local_var_params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_topics_paged`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_filter' in local_var_params:
            path_params['categoryFilter'] = local_var_params['category_filter']  # noqa: E501
        if 'group' in local_var_params:
            path_params['group'] = local_var_params['group']  # noqa: E501
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'page_size' in local_var_params:
            path_params['pageSize'] = local_var_params['page_size']  # noqa: E501
        if 'quick_date' in local_var_params:
            path_params['quickDate'] = local_var_params['quick_date']  # noqa: E501
        if 'sort' in local_var_params:
            path_params['sort'] = local_var_params['sort']  # noqa: E501

        query_params = []
        if 'locales' in local_var_params:
            query_params.append(('locales', local_var_params['locales']))  # noqa: E501
        if 'tagstring' in local_var_params:
            query_params.append(('tagstring', local_var_params['tagstring']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
