# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bungie-sdk-python.api_client import ApiClient


class GroupV2Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def abdicate_foundership(self, founder_id_new, group_id, membership_type, **kwargs):  # noqa: E501
        """abdicate_foundership  # noqa: E501

        An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abdicate_foundership(founder_id_new, group_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int founder_id_new: The new founder for this group. Must already be a group admin. (required)
        :param int group_id: The target group id. (required)
        :param int membership_type: Membership type of the provided founderIdNew. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.abdicate_foundership_with_http_info(founder_id_new, group_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.abdicate_foundership_with_http_info(founder_id_new, group_id, membership_type, **kwargs)  # noqa: E501
            return data

    def abdicate_foundership_with_http_info(self, founder_id_new, group_id, membership_type, **kwargs):  # noqa: E501
        """abdicate_foundership  # noqa: E501

        An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abdicate_foundership_with_http_info(founder_id_new, group_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int founder_id_new: The new founder for this group. Must already be a group admin. (required)
        :param int group_id: The target group id. (required)
        :param int membership_type: Membership type of the provided founderIdNew. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['founder_id_new', 'group_id', 'membership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method abdicate_foundership" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'founder_id_new' is set
        if ('founder_id_new' not in local_var_params or
                local_var_params['founder_id_new'] is None):
            raise ValueError("Missing the required parameter `founder_id_new` when calling `abdicate_foundership`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `abdicate_foundership`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `abdicate_foundership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'founder_id_new' in local_var_params:
            path_params['founderIdNew'] = local_var_params['founder_id_new']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_optional_conversation(self, group_id, group_optional_conversation_add_request, **kwargs):  # noqa: E501
        """add_optional_conversation  # noqa: E501

        Add a new optional conversation/chat channel. Requires admin permissions to the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_optional_conversation(group_id, group_optional_conversation_add_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupOptionalConversationAddRequest group_optional_conversation_add_request: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_optional_conversation_with_http_info(group_id, group_optional_conversation_add_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_optional_conversation_with_http_info(group_id, group_optional_conversation_add_request, **kwargs)  # noqa: E501
            return data

    def add_optional_conversation_with_http_info(self, group_id, group_optional_conversation_add_request, **kwargs):  # noqa: E501
        """add_optional_conversation  # noqa: E501

        Add a new optional conversation/chat channel. Requires admin permissions to the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_optional_conversation_with_http_info(group_id, group_optional_conversation_add_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupOptionalConversationAddRequest group_optional_conversation_add_request: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'group_optional_conversation_add_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_optional_conversation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_optional_conversation`")  # noqa: E501
        # verify the required parameter 'group_optional_conversation_add_request' is set
        if ('group_optional_conversation_add_request' not in local_var_params or
                local_var_params['group_optional_conversation_add_request'] is None):
            raise ValueError("Missing the required parameter `group_optional_conversation_add_request` when calling `add_optional_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_optional_conversation_add_request' in local_var_params:
            body_params = local_var_params['group_optional_conversation_add_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/OptionalConversations/Add/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_all_pending(self, group_id, group_application_request, **kwargs):  # noqa: E501
        """approve_all_pending  # noqa: E501

        Approve all of the pending users for the given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_all_pending(group_id, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_all_pending_with_http_info(group_id, group_application_request, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_all_pending_with_http_info(group_id, group_application_request, **kwargs)  # noqa: E501
            return data

    def approve_all_pending_with_http_info(self, group_id, group_application_request, **kwargs):  # noqa: E501
        """approve_all_pending  # noqa: E501

        Approve all of the pending users for the given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_all_pending_with_http_info(group_id, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'group_application_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_all_pending" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `approve_all_pending`")  # noqa: E501
        # verify the required parameter 'group_application_request' is set
        if ('group_application_request' not in local_var_params or
                local_var_params['group_application_request'] is None):
            raise ValueError("Missing the required parameter `group_application_request` when calling `approve_all_pending`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_application_request' in local_var_params:
            body_params = local_var_params['group_application_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/ApproveAll/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_pending(self, group_id, membership_id, membership_type, group_application_request, **kwargs):  # noqa: E501
        """approve_pending  # noqa: E501

        Approve the given membershipId to join the group/clan as long as they have applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_pending(group_id, membership_id, membership_type, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param int membership_id: The membership id being approved. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_pending_with_http_info(group_id, membership_id, membership_type, group_application_request, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_pending_with_http_info(group_id, membership_id, membership_type, group_application_request, **kwargs)  # noqa: E501
            return data

    def approve_pending_with_http_info(self, group_id, membership_id, membership_type, group_application_request, **kwargs):  # noqa: E501
        """approve_pending  # noqa: E501

        Approve the given membershipId to join the group/clan as long as they have applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_pending_with_http_info(group_id, membership_id, membership_type, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param int membership_id: The membership id being approved. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'membership_id', 'membership_type', 'group_application_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_pending" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `approve_pending`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `approve_pending`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `approve_pending`")  # noqa: E501
        # verify the required parameter 'group_application_request' is set
        if ('group_application_request' not in local_var_params or
                local_var_params['group_application_request'] is None):
            raise ValueError("Missing the required parameter `group_application_request` when calling `approve_pending`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_application_request' in local_var_params:
            body_params = local_var_params['group_application_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_pending_for_list(self, group_id, group_application_list_request, **kwargs):  # noqa: E501
        """approve_pending_for_list  # noqa: E501

        Approve all of the pending users for the given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_pending_for_list(group_id, group_application_list_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationListRequest group_application_list_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_pending_for_list_with_http_info(group_id, group_application_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_pending_for_list_with_http_info(group_id, group_application_list_request, **kwargs)  # noqa: E501
            return data

    def approve_pending_for_list_with_http_info(self, group_id, group_application_list_request, **kwargs):  # noqa: E501
        """approve_pending_for_list  # noqa: E501

        Approve all of the pending users for the given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_pending_for_list_with_http_info(group_id, group_application_list_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationListRequest group_application_list_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'group_application_list_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_pending_for_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `approve_pending_for_list`")  # noqa: E501
        # verify the required parameter 'group_application_list_request' is set
        if ('group_application_list_request' not in local_var_params or
                local_var_params['group_application_list_request'] is None):
            raise ValueError("Missing the required parameter `group_application_list_request` when calling `approve_pending_for_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_application_list_request' in local_var_params:
            body_params = local_var_params['group_application_list_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/ApproveList/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ban_member(self, group_id, membership_id, membership_type, group_ban_request, **kwargs):  # noqa: E501
        """ban_member  # noqa: E501

        Bans the requested member from the requested group for the specified period of time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ban_member(group_id, membership_id, membership_type, group_ban_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID that has the member to ban. (required)
        :param int membership_id: Membership ID of the member to ban from the group. (required)
        :param int membership_type: Membership type of the provided membership ID. (required)
        :param GroupsV2.GroupBanRequest group_ban_request: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ban_member_with_http_info(group_id, membership_id, membership_type, group_ban_request, **kwargs)  # noqa: E501
        else:
            (data) = self.ban_member_with_http_info(group_id, membership_id, membership_type, group_ban_request, **kwargs)  # noqa: E501
            return data

    def ban_member_with_http_info(self, group_id, membership_id, membership_type, group_ban_request, **kwargs):  # noqa: E501
        """ban_member  # noqa: E501

        Bans the requested member from the requested group for the specified period of time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ban_member_with_http_info(group_id, membership_id, membership_type, group_ban_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID that has the member to ban. (required)
        :param int membership_id: Membership ID of the member to ban from the group. (required)
        :param int membership_type: Membership type of the provided membership ID. (required)
        :param GroupsV2.GroupBanRequest group_ban_request: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'membership_id', 'membership_type', 'group_ban_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ban_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `ban_member`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `ban_member`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `ban_member`")  # noqa: E501
        # verify the required parameter 'group_ban_request' is set
        if ('group_ban_request' not in local_var_params or
                local_var_params['group_ban_request'] is None):
            raise ValueError("Missing the required parameter `group_ban_request` when calling `ban_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_ban_request' in local_var_params:
            body_params = local_var_params['group_ban_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deny_all_pending(self, group_id, group_application_request, **kwargs):  # noqa: E501
        """deny_all_pending  # noqa: E501

        Deny all of the pending users for the given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_all_pending(group_id, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deny_all_pending_with_http_info(group_id, group_application_request, **kwargs)  # noqa: E501
        else:
            (data) = self.deny_all_pending_with_http_info(group_id, group_application_request, **kwargs)  # noqa: E501
            return data

    def deny_all_pending_with_http_info(self, group_id, group_application_request, **kwargs):  # noqa: E501
        """deny_all_pending  # noqa: E501

        Deny all of the pending users for the given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_all_pending_with_http_info(group_id, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'group_application_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deny_all_pending" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `deny_all_pending`")  # noqa: E501
        # verify the required parameter 'group_application_request' is set
        if ('group_application_request' not in local_var_params or
                local_var_params['group_application_request'] is None):
            raise ValueError("Missing the required parameter `group_application_request` when calling `deny_all_pending`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_application_request' in local_var_params:
            body_params = local_var_params['group_application_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/DenyAll/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deny_pending_for_list(self, group_id, group_application_list_request, **kwargs):  # noqa: E501
        """deny_pending_for_list  # noqa: E501

        Deny all of the pending users for the given group that match the passed-in .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_pending_for_list(group_id, group_application_list_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationListRequest group_application_list_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deny_pending_for_list_with_http_info(group_id, group_application_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.deny_pending_for_list_with_http_info(group_id, group_application_list_request, **kwargs)  # noqa: E501
            return data

    def deny_pending_for_list_with_http_info(self, group_id, group_application_list_request, **kwargs):  # noqa: E501
        """deny_pending_for_list  # noqa: E501

        Deny all of the pending users for the given group that match the passed-in .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_pending_for_list_with_http_info(group_id, group_application_list_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group. (required)
        :param GroupsV2.GroupApplicationListRequest group_application_list_request: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'group_application_list_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deny_pending_for_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `deny_pending_for_list`")  # noqa: E501
        # verify the required parameter 'group_application_list_request' is set
        if ('group_application_list_request' not in local_var_params or
                local_var_params['group_application_list_request'] is None):
            raise ValueError("Missing the required parameter `group_application_list_request` when calling `deny_pending_for_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_application_list_request' in local_var_params:
            body_params = local_var_params['group_application_list_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/DenyList/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_clan_banner(self, group_id, clan_banner, **kwargs):  # noqa: E501
        """edit_clan_banner  # noqa: E501

        Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_clan_banner(group_id, clan_banner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.ClanBanner clan_banner: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_clan_banner_with_http_info(group_id, clan_banner, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_clan_banner_with_http_info(group_id, clan_banner, **kwargs)  # noqa: E501
            return data

    def edit_clan_banner_with_http_info(self, group_id, clan_banner, **kwargs):  # noqa: E501
        """edit_clan_banner  # noqa: E501

        Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_clan_banner_with_http_info(group_id, clan_banner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.ClanBanner clan_banner: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'clan_banner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_clan_banner" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `edit_clan_banner`")  # noqa: E501
        # verify the required parameter 'clan_banner' is set
        if ('clan_banner' not in local_var_params or
                local_var_params['clan_banner'] is None):
            raise ValueError("Missing the required parameter `clan_banner` when calling `edit_clan_banner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'clan_banner' in local_var_params:
            body_params = local_var_params['clan_banner']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/EditClanBanner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_founder_options(self, group_id, group_options_edit_action, **kwargs):  # noqa: E501
        """edit_founder_options  # noqa: E501

        Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_founder_options(group_id, group_options_edit_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupOptionsEditAction group_options_edit_action: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_founder_options_with_http_info(group_id, group_options_edit_action, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_founder_options_with_http_info(group_id, group_options_edit_action, **kwargs)  # noqa: E501
            return data

    def edit_founder_options_with_http_info(self, group_id, group_options_edit_action, **kwargs):  # noqa: E501
        """edit_founder_options  # noqa: E501

        Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_founder_options_with_http_info(group_id, group_options_edit_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupOptionsEditAction group_options_edit_action: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'group_options_edit_action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_founder_options" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `edit_founder_options`")  # noqa: E501
        # verify the required parameter 'group_options_edit_action' is set
        if ('group_options_edit_action' not in local_var_params or
                local_var_params['group_options_edit_action'] is None):
            raise ValueError("Missing the required parameter `group_options_edit_action` when calling `edit_founder_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_options_edit_action' in local_var_params:
            body_params = local_var_params['group_options_edit_action']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/EditFounderOptions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_group(self, group_id, group_edit_action, **kwargs):  # noqa: E501
        """edit_group  # noqa: E501

        Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_group(group_id, group_edit_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupEditAction group_edit_action: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_group_with_http_info(group_id, group_edit_action, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_group_with_http_info(group_id, group_edit_action, **kwargs)  # noqa: E501
            return data

    def edit_group_with_http_info(self, group_id, group_edit_action, **kwargs):  # noqa: E501
        """edit_group  # noqa: E501

        Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_group_with_http_info(group_id, group_edit_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupEditAction group_edit_action: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'group_edit_action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `edit_group`")  # noqa: E501
        # verify the required parameter 'group_edit_action' is set
        if ('group_edit_action' not in local_var_params or
                local_var_params['group_edit_action'] is None):
            raise ValueError("Missing the required parameter `group_edit_action` when calling `edit_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_edit_action' in local_var_params:
            body_params = local_var_params['group_edit_action']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Edit/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_group_membership(self, group_id, membership_id, membership_type, member_type, **kwargs):  # noqa: E501
        """edit_group_membership  # noqa: E501

        Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_group_membership(group_id, membership_id, membership_type, member_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group to which the member belongs. (required)
        :param int membership_id: Membership ID to modify. (required)
        :param int membership_type: Membership type of the provide membership ID. (required)
        :param int member_type: New membertype for the specified member. (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_group_membership_with_http_info(group_id, membership_id, membership_type, member_type, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_group_membership_with_http_info(group_id, membership_id, membership_type, member_type, **kwargs)  # noqa: E501
            return data

    def edit_group_membership_with_http_info(self, group_id, membership_id, membership_type, member_type, **kwargs):  # noqa: E501
        """edit_group_membership  # noqa: E501

        Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_group_membership_with_http_info(group_id, membership_id, membership_type, member_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group to which the member belongs. (required)
        :param int membership_id: Membership ID to modify. (required)
        :param int membership_type: Membership type of the provide membership ID. (required)
        :param int member_type: New membertype for the specified member. (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'membership_id', 'membership_type', 'member_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_group_membership" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `edit_group_membership`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `edit_group_membership`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `edit_group_membership`")  # noqa: E501
        # verify the required parameter 'member_type' is set
        if ('member_type' not in local_var_params or
                local_var_params['member_type'] is None):
            raise ValueError("Missing the required parameter `member_type` when calling `edit_group_membership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'member_type' in local_var_params:
            path_params['memberType'] = local_var_params['member_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_optional_conversation(self, conversation_id, group_id, group_optional_conversation_edit_request, **kwargs):  # noqa: E501
        """edit_optional_conversation  # noqa: E501

        Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_optional_conversation(conversation_id, group_id, group_optional_conversation_edit_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_id: Conversation Id of the channel being edited. (required)
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupOptionalConversationEditRequest group_optional_conversation_edit_request: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_optional_conversation_with_http_info(conversation_id, group_id, group_optional_conversation_edit_request, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_optional_conversation_with_http_info(conversation_id, group_id, group_optional_conversation_edit_request, **kwargs)  # noqa: E501
            return data

    def edit_optional_conversation_with_http_info(self, conversation_id, group_id, group_optional_conversation_edit_request, **kwargs):  # noqa: E501
        """edit_optional_conversation  # noqa: E501

        Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_optional_conversation_with_http_info(conversation_id, group_id, group_optional_conversation_edit_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_id: Conversation Id of the channel being edited. (required)
        :param int group_id: Group ID of the group to edit. (required)
        :param GroupsV2.GroupOptionalConversationEditRequest group_optional_conversation_edit_request: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['conversation_id', 'group_id', 'group_optional_conversation_edit_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_optional_conversation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'conversation_id' is set
        if ('conversation_id' not in local_var_params or
                local_var_params['conversation_id'] is None):
            raise ValueError("Missing the required parameter `conversation_id` when calling `edit_optional_conversation`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `edit_optional_conversation`")  # noqa: E501
        # verify the required parameter 'group_optional_conversation_edit_request' is set
        if ('group_optional_conversation_edit_request' not in local_var_params or
                local_var_params['group_optional_conversation_edit_request'] is None):
            raise ValueError("Missing the required parameter `group_optional_conversation_edit_request` when calling `edit_optional_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_id' in local_var_params:
            path_params['conversationId'] = local_var_params['conversation_id']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_optional_conversation_edit_request' in local_var_params:
            body_params = local_var_params['group_optional_conversation_edit_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_admins_and_founder_of_group(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_admins_and_founder_of_group  # noqa: E501

        Get the list of members in a given group who are of admin level or higher.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admins_and_founder_of_group(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: The ID of the group. (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_admins_and_founder_of_group_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_admins_and_founder_of_group_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
            return data

    def get_admins_and_founder_of_group_with_http_info(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_admins_and_founder_of_group  # noqa: E501

        Get the list of members in a given group who are of admin level or higher.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admins_and_founder_of_group_with_http_info(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: The ID of the group. (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currentpage', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_admins_and_founder_of_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'currentpage' is set
        if ('currentpage' not in local_var_params or
                local_var_params['currentpage'] is None):
            raise ValueError("Missing the required parameter `currentpage` when calling `get_admins_and_founder_of_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_admins_and_founder_of_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'currentpage' in local_var_params:
            path_params['currentpage'] = local_var_params['currentpage']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/AdminsAndFounder/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_available_avatars(self, **kwargs):  # noqa: E501
        """get_available_avatars  # noqa: E501

        Returns a list of all available group avatars for the signed-in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_avatars(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_available_avatars_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_available_avatars_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_available_avatars_with_http_info(self, **kwargs):  # noqa: E501
        """get_available_avatars  # noqa: E501

        Returns a list of all available group avatars for the signed-in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_avatars_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_avatars" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/GetAvailableAvatars/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_available_themes(self, **kwargs):  # noqa: E501
        """get_available_themes  # noqa: E501

        Returns a list of all available group themes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_themes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_available_themes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_available_themes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_available_themes_with_http_info(self, **kwargs):  # noqa: E501
        """get_available_themes  # noqa: E501

        Returns a list of all available group themes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_themes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_themes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/GetAvailableThemes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_banned_members_of_group(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_banned_members_of_group  # noqa: E501

        Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_banned_members_of_group(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 entries. (required)
        :param int group_id: Group ID whose banned members you are fetching (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_banned_members_of_group_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_banned_members_of_group_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
            return data

    def get_banned_members_of_group_with_http_info(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_banned_members_of_group  # noqa: E501

        Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_banned_members_of_group_with_http_info(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 entries. (required)
        :param int group_id: Group ID whose banned members you are fetching (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currentpage', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_banned_members_of_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'currentpage' is set
        if ('currentpage' not in local_var_params or
                local_var_params['currentpage'] is None):
            raise ValueError("Missing the required parameter `currentpage` when calling `get_banned_members_of_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_banned_members_of_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'currentpage' in local_var_params:
            path_params['currentpage'] = local_var_params['currentpage']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Banned/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group(self, group_id, **kwargs):  # noqa: E501
        """get_group  # noqa: E501

        Get information about a specific group of the given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Requested group's id. (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_group_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_group  # noqa: E501

        Get information about a specific group of the given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Requested group's id. (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group_by_name(self, group_name, group_type, **kwargs):  # noqa: E501
        """get_group_by_name  # noqa: E501

        Get information about a specific group with the given name and type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_by_name(group_name, group_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_name: Exact name of the group to find. (required)
        :param int group_type: Type of group to find. (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_by_name_with_http_info(group_name, group_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_by_name_with_http_info(group_name, group_type, **kwargs)  # noqa: E501
            return data

    def get_group_by_name_with_http_info(self, group_name, group_type, **kwargs):  # noqa: E501
        """get_group_by_name  # noqa: E501

        Get information about a specific group with the given name and type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_by_name_with_http_info(group_name, group_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_name: Exact name of the group to find. (required)
        :param int group_type: Type of group to find. (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_name', 'group_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_name' is set
        if ('group_name' not in local_var_params or
                local_var_params['group_name'] is None):
            raise ValueError("Missing the required parameter `group_name` when calling `get_group_by_name`")  # noqa: E501
        # verify the required parameter 'group_type' is set
        if ('group_type' not in local_var_params or
                local_var_params['group_type'] is None):
            raise ValueError("Missing the required parameter `group_type` when calling `get_group_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_name' in local_var_params:
            path_params['groupName'] = local_var_params['group_name']  # noqa: E501
        if 'group_type' in local_var_params:
            path_params['groupType'] = local_var_params['group_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/Name/{groupName}/{groupType}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group_by_name_v2(self, group_name_search_request, **kwargs):  # noqa: E501
        """get_group_by_name_v2  # noqa: E501

        Get information about a specific group with the given name and type. The POST version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_by_name_v2(group_name_search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupsV2.GroupNameSearchRequest group_name_search_request: (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_by_name_v2_with_http_info(group_name_search_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_by_name_v2_with_http_info(group_name_search_request, **kwargs)  # noqa: E501
            return data

    def get_group_by_name_v2_with_http_info(self, group_name_search_request, **kwargs):  # noqa: E501
        """get_group_by_name_v2  # noqa: E501

        Get information about a specific group with the given name and type. The POST version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_by_name_v2_with_http_info(group_name_search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupsV2.GroupNameSearchRequest group_name_search_request: (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_name_search_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_by_name_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_name_search_request' is set
        if ('group_name_search_request' not in local_var_params or
                local_var_params['group_name_search_request'] is None):
            raise ValueError("Missing the required parameter `group_name_search_request` when calling `get_group_by_name_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_name_search_request' in local_var_params:
            body_params = local_var_params['group_name_search_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/NameV2/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group_optional_conversations(self, group_id, **kwargs):  # noqa: E501
        """get_group_optional_conversations  # noqa: E501

        Gets a list of available optional conversation channels and their settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_optional_conversations(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Requested group's id. (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_optional_conversations_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_optional_conversations_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_group_optional_conversations_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_group_optional_conversations  # noqa: E501

        Gets a list of available optional conversation channels and their settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_optional_conversations_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Requested group's id. (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_optional_conversations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_optional_conversations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/OptionalConversations/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_groups_for_member(self, filter, group_type, membership_id, membership_type, **kwargs):  # noqa: E501
        """get_groups_for_member  # noqa: E501

        Get information about the groups that a given member has joined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups_for_member(filter, group_type, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter: Filter apply to list of joined groups. (required)
        :param int group_type: Type of group the supplied member founded. (required)
        :param int membership_id: Membership ID to for which to find founded groups. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_groups_for_member_with_http_info(filter, group_type, membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_groups_for_member_with_http_info(filter, group_type, membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def get_groups_for_member_with_http_info(self, filter, group_type, membership_id, membership_type, **kwargs):  # noqa: E501
        """get_groups_for_member  # noqa: E501

        Get information about the groups that a given member has joined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups_for_member_with_http_info(filter, group_type, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter: Filter apply to list of joined groups. (required)
        :param int group_type: Type of group the supplied member founded. (required)
        :param int membership_id: Membership ID to for which to find founded groups. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['filter', 'group_type', 'membership_id', 'membership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups_for_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in local_var_params or
                local_var_params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_groups_for_member`")  # noqa: E501
        # verify the required parameter 'group_type' is set
        if ('group_type' not in local_var_params or
                local_var_params['group_type'] is None):
            raise ValueError("Missing the required parameter `group_type` when calling `get_groups_for_member`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `get_groups_for_member`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_groups_for_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter' in local_var_params:
            path_params['filter'] = local_var_params['filter']  # noqa: E501
        if 'group_type' in local_var_params:
            path_params['groupType'] = local_var_params['group_type']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invited_individuals(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_invited_individuals  # noqa: E501

        Get the list of users who have been invited into the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invited_individuals(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: ID of the group. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invited_individuals_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invited_individuals_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
            return data

    def get_invited_individuals_with_http_info(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_invited_individuals  # noqa: E501

        Get the list of users who have been invited into the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invited_individuals_with_http_info(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: ID of the group. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currentpage', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invited_individuals" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'currentpage' is set
        if ('currentpage' not in local_var_params or
                local_var_params['currentpage'] is None):
            raise ValueError("Missing the required parameter `currentpage` when calling `get_invited_individuals`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_invited_individuals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'currentpage' in local_var_params:
            path_params['currentpage'] = local_var_params['currentpage']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/InvitedIndividuals/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_of_group(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_members_of_group  # noqa: E501

        Get the list of members in a given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_of_group(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: The ID of the group. (required)
        :param int member_type: Filter out other member types. Use None for all members.
        :param str name_search: The name fragment upon which a search should be executed for members with matching display or unique names.
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_of_group_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_of_group_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
            return data

    def get_members_of_group_with_http_info(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_members_of_group  # noqa: E501

        Get the list of members in a given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_of_group_with_http_info(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: The ID of the group. (required)
        :param int member_type: Filter out other member types. Use None for all members.
        :param str name_search: The name fragment upon which a search should be executed for members with matching display or unique names.
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currentpage', 'group_id', 'member_type', 'name_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_of_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'currentpage' is set
        if ('currentpage' not in local_var_params or
                local_var_params['currentpage'] is None):
            raise ValueError("Missing the required parameter `currentpage` when calling `get_members_of_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_members_of_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'currentpage' in local_var_params:
            path_params['currentpage'] = local_var_params['currentpage']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []
        if 'member_type' in local_var_params:
            query_params.append(('memberType', local_var_params['member_type']))  # noqa: E501
        if 'name_search' in local_var_params:
            query_params.append(('nameSearch', local_var_params['name_search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pending_memberships(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_pending_memberships  # noqa: E501

        Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pending_memberships(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: ID of the group. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pending_memberships_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pending_memberships_with_http_info(currentpage, group_id, **kwargs)  # noqa: E501
            return data

    def get_pending_memberships_with_http_info(self, currentpage, group_id, **kwargs):  # noqa: E501
        """get_pending_memberships  # noqa: E501

        Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pending_memberships_with_http_info(currentpage, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int currentpage: Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
        :param int group_id: ID of the group. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currentpage', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pending_memberships" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'currentpage' is set
        if ('currentpage' not in local_var_params or
                local_var_params['currentpage'] is None):
            raise ValueError("Missing the required parameter `currentpage` when calling `get_pending_memberships`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_pending_memberships`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'currentpage' in local_var_params:
            path_params['currentpage'] = local_var_params['currentpage']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/Pending/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_potential_groups_for_member(self, filter, group_type, membership_id, membership_type, **kwargs):  # noqa: E501
        """get_potential_groups_for_member  # noqa: E501

        Get information about the groups that a given member has applied to or been invited to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_potential_groups_for_member(filter, group_type, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter: Filter apply to list of potential joined groups. (required)
        :param int group_type: Type of group the supplied member applied. (required)
        :param int membership_id: Membership ID to for which to find applied groups. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_potential_groups_for_member_with_http_info(filter, group_type, membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_potential_groups_for_member_with_http_info(filter, group_type, membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def get_potential_groups_for_member_with_http_info(self, filter, group_type, membership_id, membership_type, **kwargs):  # noqa: E501
        """get_potential_groups_for_member  # noqa: E501

        Get information about the groups that a given member has applied to or been invited to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_potential_groups_for_member_with_http_info(filter, group_type, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter: Filter apply to list of potential joined groups. (required)
        :param int group_type: Type of group the supplied member applied. (required)
        :param int membership_id: Membership ID to for which to find applied groups. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['filter', 'group_type', 'membership_id', 'membership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_potential_groups_for_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in local_var_params or
                local_var_params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_potential_groups_for_member`")  # noqa: E501
        # verify the required parameter 'group_type' is set
        if ('group_type' not in local_var_params or
                local_var_params['group_type'] is None):
            raise ValueError("Missing the required parameter `group_type` when calling `get_potential_groups_for_member`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `get_potential_groups_for_member`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_potential_groups_for_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter' in local_var_params:
            path_params['filter'] = local_var_params['filter']  # noqa: E501
        if 'group_type' in local_var_params:
            path_params['groupType'] = local_var_params['group_type']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recommended_groups(self, create_date_range, group_type, **kwargs):  # noqa: E501
        """get_recommended_groups  # noqa: E501

        Gets groups recommended for you based on the groups to whom those you follow belong.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommended_groups(create_date_range, group_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int create_date_range: Requested range in which to pull recommended groups (required)
        :param int group_type: Type of groups requested (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommended_groups_with_http_info(create_date_range, group_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recommended_groups_with_http_info(create_date_range, group_type, **kwargs)  # noqa: E501
            return data

    def get_recommended_groups_with_http_info(self, create_date_range, group_type, **kwargs):  # noqa: E501
        """get_recommended_groups  # noqa: E501

        Gets groups recommended for you based on the groups to whom those you follow belong.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommended_groups_with_http_info(create_date_range, group_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int create_date_range: Requested range in which to pull recommended groups (required)
        :param int group_type: Type of groups requested (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_date_range', 'group_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_groups" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_date_range' is set
        if ('create_date_range' not in local_var_params or
                local_var_params['create_date_range'] is None):
            raise ValueError("Missing the required parameter `create_date_range` when calling `get_recommended_groups`")  # noqa: E501
        # verify the required parameter 'group_type' is set
        if ('group_type' not in local_var_params or
                local_var_params['group_type'] is None):
            raise ValueError("Missing the required parameter `group_type` when calling `get_recommended_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'create_date_range' in local_var_params:
            path_params['createDateRange'] = local_var_params['create_date_range']  # noqa: E501
        if 'group_type' in local_var_params:
            path_params['groupType'] = local_var_params['group_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/Recommended/{groupType}/{createDateRange}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_clan_invite_setting(self, m_type, **kwargs):  # noqa: E501
        """get_user_clan_invite_setting  # noqa: E501

        Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_clan_invite_setting(m_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int m_type: The Destiny membership type of the account we wish to access settings. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_clan_invite_setting_with_http_info(m_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_clan_invite_setting_with_http_info(m_type, **kwargs)  # noqa: E501
            return data

    def get_user_clan_invite_setting_with_http_info(self, m_type, **kwargs):  # noqa: E501
        """get_user_clan_invite_setting  # noqa: E501

        Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_clan_invite_setting_with_http_info(m_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int m_type: The Destiny membership type of the account we wish to access settings. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['m_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_clan_invite_setting" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'm_type' is set
        if ('m_type' not in local_var_params or
                local_var_params['m_type'] is None):
            raise ValueError("Missing the required parameter `m_type` when calling `get_user_clan_invite_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'm_type' in local_var_params:
            path_params['mType'] = local_var_params['m_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/GetUserClanInviteSetting/{mType}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_search(self, group_query, **kwargs):  # noqa: E501
        """group_search  # noqa: E501

        Search for Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_search(group_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupsV2.GroupQuery group_query: (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_search_with_http_info(group_query, **kwargs)  # noqa: E501
        else:
            (data) = self.group_search_with_http_info(group_query, **kwargs)  # noqa: E501
            return data

    def group_search_with_http_info(self, group_query, **kwargs):  # noqa: E501
        """group_search  # noqa: E501

        Search for Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_search_with_http_info(group_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupsV2.GroupQuery group_query: (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_query' is set
        if ('group_query' not in local_var_params or
                local_var_params['group_query'] is None):
            raise ValueError("Missing the required parameter `group_query` when calling `group_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_query' in local_var_params:
            body_params = local_var_params['group_query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/Search/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def individual_group_invite(self, group_id, membership_id, membership_type, group_application_request, **kwargs):  # noqa: E501
        """individual_group_invite  # noqa: E501

        Invite a user to join this group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.individual_group_invite(group_id, membership_id, membership_type, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group you would like to join. (required)
        :param int membership_id: Membership id of the account being invited. (required)
        :param int membership_type: MembershipType of the account being invited. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.individual_group_invite_with_http_info(group_id, membership_id, membership_type, group_application_request, **kwargs)  # noqa: E501
        else:
            (data) = self.individual_group_invite_with_http_info(group_id, membership_id, membership_type, group_application_request, **kwargs)  # noqa: E501
            return data

    def individual_group_invite_with_http_info(self, group_id, membership_id, membership_type, group_application_request, **kwargs):  # noqa: E501
        """individual_group_invite  # noqa: E501

        Invite a user to join this group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.individual_group_invite_with_http_info(group_id, membership_id, membership_type, group_application_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group you would like to join. (required)
        :param int membership_id: Membership id of the account being invited. (required)
        :param int membership_type: MembershipType of the account being invited. (required)
        :param GroupsV2.GroupApplicationRequest group_application_request: (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'membership_id', 'membership_type', 'group_application_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method individual_group_invite" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `individual_group_invite`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `individual_group_invite`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `individual_group_invite`")  # noqa: E501
        # verify the required parameter 'group_application_request' is set
        if ('group_application_request' not in local_var_params or
                local_var_params['group_application_request'] is None):
            raise ValueError("Missing the required parameter `group_application_request` when calling `individual_group_invite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_application_request' in local_var_params:
            body_params = local_var_params['group_application_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def individual_group_invite_cancel(self, group_id, membership_id, membership_type, **kwargs):  # noqa: E501
        """individual_group_invite_cancel  # noqa: E501

        Cancels a pending invitation to join a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.individual_group_invite_cancel(group_id, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group you would like to join. (required)
        :param int membership_id: Membership id of the account being cancelled. (required)
        :param int membership_type: MembershipType of the account being cancelled. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.individual_group_invite_cancel_with_http_info(group_id, membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.individual_group_invite_cancel_with_http_info(group_id, membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def individual_group_invite_cancel_with_http_info(self, group_id, membership_id, membership_type, **kwargs):  # noqa: E501
        """individual_group_invite_cancel  # noqa: E501

        Cancels a pending invitation to join a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.individual_group_invite_cancel_with_http_info(group_id, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: ID of the group you would like to join. (required)
        :param int membership_id: Membership id of the account being cancelled. (required)
        :param int membership_type: MembershipType of the account being cancelled. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'membership_id', 'membership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method individual_group_invite_cancel" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `individual_group_invite_cancel`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `individual_group_invite_cancel`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `individual_group_invite_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kick_member(self, group_id, membership_id, membership_type, **kwargs):  # noqa: E501
        """kick_member  # noqa: E501

        Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kick_member(group_id, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID to kick the user from. (required)
        :param int membership_id: Membership ID to kick. (required)
        :param int membership_type: Membership type of the provided membership ID. (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kick_member_with_http_info(group_id, membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.kick_member_with_http_info(group_id, membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def kick_member_with_http_info(self, group_id, membership_id, membership_type, **kwargs):  # noqa: E501
        """kick_member  # noqa: E501

        Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kick_member_with_http_info(group_id, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group ID to kick the user from. (required)
        :param int membership_id: Membership ID to kick. (required)
        :param int membership_type: Membership type of the provided membership ID. (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'membership_id', 'membership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kick_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `kick_member`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `kick_member`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `kick_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recover_group_for_founder(self, group_type, membership_id, membership_type, **kwargs):  # noqa: E501
        """recover_group_for_founder  # noqa: E501

        Allows a founder to manually recover a group they can see in game but not on bungie.net  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recover_group_for_founder(group_type, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_type: Type of group the supplied member founded. (required)
        :param int membership_id: Membership ID to for which to find founded groups. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recover_group_for_founder_with_http_info(group_type, membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.recover_group_for_founder_with_http_info(group_type, membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def recover_group_for_founder_with_http_info(self, group_type, membership_id, membership_type, **kwargs):  # noqa: E501
        """recover_group_for_founder  # noqa: E501

        Allows a founder to manually recover a group they can see in game but not on bungie.net  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recover_group_for_founder_with_http_info(group_type, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_type: Type of group the supplied member founded. (required)
        :param int membership_id: Membership ID to for which to find founded groups. (required)
        :param int membership_type: Membership type of the supplied membership ID. (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_type', 'membership_id', 'membership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recover_group_for_founder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_type' is set
        if ('group_type' not in local_var_params or
                local_var_params['group_type'] is None):
            raise ValueError("Missing the required parameter `group_type` when calling `recover_group_for_founder`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `recover_group_for_founder`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `recover_group_for_founder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_type' in local_var_params:
            path_params['groupType'] = local_var_params['group_type']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unban_member(self, group_id, membership_id, membership_type, **kwargs):  # noqa: E501
        """unban_member  # noqa: E501

        Unbans the requested member, allowing them to re-apply for membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unban_member(group_id, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int membership_id: Membership ID of the member to unban from the group (required)
        :param int membership_type: Membership type of the provided membership ID. (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unban_member_with_http_info(group_id, membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.unban_member_with_http_info(group_id, membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def unban_member_with_http_info(self, group_id, membership_id, membership_type, **kwargs):  # noqa: E501
        """unban_member  # noqa: E501

        Unbans the requested member, allowing them to re-apply for membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unban_member_with_http_info(group_id, membership_id, membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int membership_id: Membership ID of the member to unban from the group (required)
        :param int membership_type: Membership type of the provided membership ID. (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'membership_id', 'membership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unban_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `unban_member`")  # noqa: E501
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `unban_member`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `unban_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
