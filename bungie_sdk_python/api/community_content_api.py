# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bungie_sdk_python.api_client import ApiClient


class CommunityContentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_community_content(self, media_filter, page, sort, **kwargs):  # noqa: E501
        """get_community_content  # noqa: E501

        Returns community content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_content(media_filter, page, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int media_filter: The type of media to get (required)
        :param int page: Zero based page (required)
        :param int sort: The sort mode. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_community_content_with_http_info(media_filter, page, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_community_content_with_http_info(media_filter, page, sort, **kwargs)  # noqa: E501
            return data

    def get_community_content_with_http_info(self, media_filter, page, sort, **kwargs):  # noqa: E501
        """get_community_content  # noqa: E501

        Returns community content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_content_with_http_info(media_filter, page, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int media_filter: The type of media to get (required)
        :param int page: Zero based page (required)
        :param int sort: The sort mode. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['media_filter', 'page', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_community_content" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'media_filter' is set
        if ('media_filter' not in local_var_params or
                local_var_params['media_filter'] is None):
            raise ValueError("Missing the required parameter `media_filter` when calling `get_community_content`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_community_content`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in local_var_params or
                local_var_params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_community_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_filter' in local_var_params:
            path_params['mediaFilter'] = local_var_params['media_filter']  # noqa: E501
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'sort' in local_var_params:
            path_params['sort'] = local_var_params['sort']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/CommunityContent/Get/{sort}/{mediaFilter}/{page}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_community_live_statuses(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_community_live_statuses  # noqa: E501

        Returns info about community members who are live streaming.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_live_statuses(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :param int mode_hash: The hash of the Activity Mode for which streams should be retrieved. Don't pass it in or pass 0 to not filter by mode.
        :param str stream_locale: The locale for streams you'd like to see. Don't pass this to fall back on your BNet locale. Pass 'ALL' to not filter by locale.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
            return data

    def get_community_live_statuses_with_http_info(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_community_live_statuses  # noqa: E501

        Returns info about community members who are live streaming.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_live_statuses_with_http_info(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :param int mode_hash: The hash of the Activity Mode for which streams should be retrieved. Don't pass it in or pass 0 to not filter by mode.
        :param str stream_locale: The locale for streams you'd like to see. Don't pass this to fall back on your BNet locale. Pass 'ALL' to not filter by locale.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'partnership_type', 'sort', 'mode_hash', 'stream_locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_community_live_statuses" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_community_live_statuses`")  # noqa: E501
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in local_var_params or
                local_var_params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `get_community_live_statuses`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in local_var_params or
                local_var_params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_community_live_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'partnership_type' in local_var_params:
            path_params['partnershipType'] = local_var_params['partnership_type']  # noqa: E501
        if 'sort' in local_var_params:
            path_params['sort'] = local_var_params['sort']  # noqa: E501

        query_params = []
        if 'mode_hash' in local_var_params:
            query_params.append(('modeHash', local_var_params['mode_hash']))  # noqa: E501
        if 'stream_locale' in local_var_params:
            query_params.append(('streamLocale', local_var_params['stream_locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/CommunityContent/Live/All/{partnershipType}/{sort}/{page}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_community_live_statuses_for_clanmates(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_community_live_statuses_for_clanmates  # noqa: E501

        Returns info about community members who are live streaming in your clans.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_live_statuses_for_clanmates(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_community_live_statuses_for_clanmates_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_community_live_statuses_for_clanmates_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
            return data

    def get_community_live_statuses_for_clanmates_with_http_info(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_community_live_statuses_for_clanmates  # noqa: E501

        Returns info about community members who are live streaming in your clans.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_live_statuses_for_clanmates_with_http_info(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'partnership_type', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_community_live_statuses_for_clanmates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_community_live_statuses_for_clanmates`")  # noqa: E501
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in local_var_params or
                local_var_params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `get_community_live_statuses_for_clanmates`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in local_var_params or
                local_var_params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_community_live_statuses_for_clanmates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'partnership_type' in local_var_params:
            path_params['partnershipType'] = local_var_params['partnership_type']  # noqa: E501
        if 'sort' in local_var_params:
            path_params['sort'] = local_var_params['sort']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/CommunityContent/Live/Clan/{partnershipType}/{sort}/{page}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_community_live_statuses_for_friends(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_community_live_statuses_for_friends  # noqa: E501

        Returns info about community members who are live streaming among your friends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_live_statuses_for_friends(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_community_live_statuses_for_friends_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_community_live_statuses_for_friends_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
            return data

    def get_community_live_statuses_for_friends_with_http_info(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_community_live_statuses_for_friends  # noqa: E501

        Returns info about community members who are live streaming among your friends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_live_statuses_for_friends_with_http_info(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'partnership_type', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_community_live_statuses_for_friends" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_community_live_statuses_for_friends`")  # noqa: E501
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in local_var_params or
                local_var_params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `get_community_live_statuses_for_friends`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in local_var_params or
                local_var_params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_community_live_statuses_for_friends`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'partnership_type' in local_var_params:
            path_params['partnershipType'] = local_var_params['partnership_type']  # noqa: E501
        if 'sort' in local_var_params:
            path_params['sort'] = local_var_params['sort']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/CommunityContent/Live/Friends/{partnershipType}/{sort}/{page}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featured_community_live_statuses(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_featured_community_live_statuses  # noqa: E501

        Returns info about Featured live streams.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_community_live_statuses(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :param str stream_locale: The locale for streams you'd like to see. Don't pass this to fall back on your BNet locale. Pass 'ALL' to not filter by locale.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featured_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featured_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)  # noqa: E501
            return data

    def get_featured_community_live_statuses_with_http_info(self, page, partnership_type, sort, **kwargs):  # noqa: E501
        """get_featured_community_live_statuses  # noqa: E501

        Returns info about Featured live streams.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_community_live_statuses_with_http_info(page, partnership_type, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero based page. (required)
        :param int partnership_type: The type of partnership for which the status should be returned. (required)
        :param int sort: The sort mode. (required)
        :param str stream_locale: The locale for streams you'd like to see. Don't pass this to fall back on your BNet locale. Pass 'ALL' to not filter by locale.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'partnership_type', 'sort', 'stream_locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featured_community_live_statuses" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in local_var_params or
                local_var_params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_featured_community_live_statuses`")  # noqa: E501
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in local_var_params or
                local_var_params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `get_featured_community_live_statuses`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in local_var_params or
                local_var_params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_featured_community_live_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'partnership_type' in local_var_params:
            path_params['partnershipType'] = local_var_params['partnership_type']  # noqa: E501
        if 'sort' in local_var_params:
            path_params['sort'] = local_var_params['sort']  # noqa: E501

        query_params = []
        if 'stream_locale' in local_var_params:
            query_params.append(('streamLocale', local_var_params['stream_locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/CommunityContent/Live/Featured/{partnershipType}/{sort}/{page}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_streaming_status_for_member(self, membership_id, membership_type, partnership_type, **kwargs):  # noqa: E501
        """get_streaming_status_for_member  # noqa: E501

        Gets the Live Streaming status of a particular Account and Membership Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streaming_status_for_member(membership_id, membership_type, partnership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int membership_id: The membershipId related to that type. (required)
        :param int membership_type: The type of account for which info will be extracted. (required)
        :param int partnership_type: The type of partnership for which info will be extracted. (required)
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_streaming_status_for_member_with_http_info(membership_id, membership_type, partnership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_streaming_status_for_member_with_http_info(membership_id, membership_type, partnership_type, **kwargs)  # noqa: E501
            return data

    def get_streaming_status_for_member_with_http_info(self, membership_id, membership_type, partnership_type, **kwargs):  # noqa: E501
        """get_streaming_status_for_member  # noqa: E501

        Gets the Live Streaming status of a particular Account and Membership Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streaming_status_for_member_with_http_info(membership_id, membership_type, partnership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int membership_id: The membershipId related to that type. (required)
        :param int membership_type: The type of account for which info will be extracted. (required)
        :param int partnership_type: The type of partnership for which info will be extracted. (required)
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_id', 'membership_type', 'partnership_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_streaming_status_for_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in local_var_params or
                local_var_params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `get_streaming_status_for_member`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_streaming_status_for_member`")  # noqa: E501
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in local_var_params or
                local_var_params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `get_streaming_status_for_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_id' in local_var_params:
            path_params['membershipId'] = local_var_params['membership_id']  # noqa: E501
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'partnership_type' in local_var_params:
            path_params['partnershipType'] = local_var_params['partnership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/CommunityContent/Live/Users/{partnershipType}/{membershipType}/{membershipId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
