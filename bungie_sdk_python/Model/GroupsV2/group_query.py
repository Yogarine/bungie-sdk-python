# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GroupQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'group_type': 'int',
        'creation_date': 'int',
        'sort_by': 'int',
        'group_member_count_filter': 'int',
        'locale_filter': 'str',
        'tag_text': 'str',
        'items_per_page': 'int',
        'current_page': 'int',
        'request_continuation_token': 'str'
    }

    attribute_map = {
        'name': 'name',
        'group_type': 'groupType',
        'creation_date': 'creationDate',
        'sort_by': 'sortBy',
        'group_member_count_filter': 'groupMemberCountFilter',
        'locale_filter': 'localeFilter',
        'tag_text': 'tagText',
        'items_per_page': 'itemsPerPage',
        'current_page': 'currentPage',
        'request_continuation_token': 'requestContinuationToken'
    }

    def __init__(self, name=None, group_type=None, creation_date=None, sort_by=None, group_member_count_filter=None, locale_filter=None, tag_text=None, items_per_page=None, current_page=None, request_continuation_token=None):  # noqa: E501
        """GroupQuery - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._group_type = None
        self._creation_date = None
        self._sort_by = None
        self._group_member_count_filter = None
        self._locale_filter = None
        self._tag_text = None
        self._items_per_page = None
        self._current_page = None
        self._request_continuation_token = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if group_type is not None:
            self.group_type = group_type
        if creation_date is not None:
            self.creation_date = creation_date
        if sort_by is not None:
            self.sort_by = sort_by
        self.group_member_count_filter = group_member_count_filter
        if locale_filter is not None:
            self.locale_filter = locale_filter
        if tag_text is not None:
            self.tag_text = tag_text
        if items_per_page is not None:
            self.items_per_page = items_per_page
        if current_page is not None:
            self.current_page = current_page
        if request_continuation_token is not None:
            self.request_continuation_token = request_continuation_token

    @property
    def name(self):
        """Gets the name of this GroupQuery.  # noqa: E501


        :return: The name of this GroupQuery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupQuery.


        :param name: The name of this GroupQuery.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group_type(self):
        """Gets the group_type of this GroupQuery.  # noqa: E501


        :return: The group_type of this GroupQuery.  # noqa: E501
        :rtype: int
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this GroupQuery.


        :param group_type: The group_type of this GroupQuery.  # noqa: E501
        :type: int
        """

        self._group_type = group_type

    @property
    def creation_date(self):
        """Gets the creation_date of this GroupQuery.  # noqa: E501


        :return: The creation_date of this GroupQuery.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GroupQuery.


        :param creation_date: The creation_date of this GroupQuery.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def sort_by(self):
        """Gets the sort_by of this GroupQuery.  # noqa: E501


        :return: The sort_by of this GroupQuery.  # noqa: E501
        :rtype: int
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this GroupQuery.


        :param sort_by: The sort_by of this GroupQuery.  # noqa: E501
        :type: int
        """

        self._sort_by = sort_by

    @property
    def group_member_count_filter(self):
        """Gets the group_member_count_filter of this GroupQuery.  # noqa: E501


        :return: The group_member_count_filter of this GroupQuery.  # noqa: E501
        :rtype: int
        """
        return self._group_member_count_filter

    @group_member_count_filter.setter
    def group_member_count_filter(self, group_member_count_filter):
        """Sets the group_member_count_filter of this GroupQuery.


        :param group_member_count_filter: The group_member_count_filter of this GroupQuery.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if group_member_count_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `group_member_count_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(group_member_count_filter, allowed_values)
            )

        self._group_member_count_filter = group_member_count_filter

    @property
    def locale_filter(self):
        """Gets the locale_filter of this GroupQuery.  # noqa: E501


        :return: The locale_filter of this GroupQuery.  # noqa: E501
        :rtype: str
        """
        return self._locale_filter

    @locale_filter.setter
    def locale_filter(self, locale_filter):
        """Sets the locale_filter of this GroupQuery.


        :param locale_filter: The locale_filter of this GroupQuery.  # noqa: E501
        :type: str
        """

        self._locale_filter = locale_filter

    @property
    def tag_text(self):
        """Gets the tag_text of this GroupQuery.  # noqa: E501


        :return: The tag_text of this GroupQuery.  # noqa: E501
        :rtype: str
        """
        return self._tag_text

    @tag_text.setter
    def tag_text(self, tag_text):
        """Sets the tag_text of this GroupQuery.


        :param tag_text: The tag_text of this GroupQuery.  # noqa: E501
        :type: str
        """

        self._tag_text = tag_text

    @property
    def items_per_page(self):
        """Gets the items_per_page of this GroupQuery.  # noqa: E501


        :return: The items_per_page of this GroupQuery.  # noqa: E501
        :rtype: int
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this GroupQuery.


        :param items_per_page: The items_per_page of this GroupQuery.  # noqa: E501
        :type: int
        """

        self._items_per_page = items_per_page

    @property
    def current_page(self):
        """Gets the current_page of this GroupQuery.  # noqa: E501


        :return: The current_page of this GroupQuery.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this GroupQuery.


        :param current_page: The current_page of this GroupQuery.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def request_continuation_token(self):
        """Gets the request_continuation_token of this GroupQuery.  # noqa: E501


        :return: The request_continuation_token of this GroupQuery.  # noqa: E501
        :rtype: str
        """
        return self._request_continuation_token

    @request_continuation_token.setter
    def request_continuation_token(self, request_continuation_token):
        """Sets the request_continuation_token of this GroupQuery.


        :param request_continuation_token: The request_continuation_token of this GroupQuery.  # noqa: E501
        :type: str
        """

        self._request_continuation_token = request_continuation_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
