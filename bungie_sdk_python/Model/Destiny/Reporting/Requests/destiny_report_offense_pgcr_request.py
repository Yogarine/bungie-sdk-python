# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyReportOffensePgcrRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reason_category_hashes': 'list[int]',
        'reason_hashes': 'list[int]',
        'offending_character_id': 'int'
    }

    attribute_map = {
        'reason_category_hashes': 'reasonCategoryHashes',
        'reason_hashes': 'reasonHashes',
        'offending_character_id': 'offendingCharacterId'
    }

    def __init__(self, reason_category_hashes=None, reason_hashes=None, offending_character_id=None):  # noqa: E501
        """DestinyReportOffensePgcrRequest - a model defined in OpenAPI"""  # noqa: E501

        self._reason_category_hashes = None
        self._reason_hashes = None
        self._offending_character_id = None
        self.discriminator = None

        if reason_category_hashes is not None:
            self.reason_category_hashes = reason_category_hashes
        if reason_hashes is not None:
            self.reason_hashes = reason_hashes
        if offending_character_id is not None:
            self.offending_character_id = offending_character_id

    @property
    def reason_category_hashes(self):
        """Gets the reason_category_hashes of this DestinyReportOffensePgcrRequest.  # noqa: E501

        So you've decided to report someone instead of cursing them and their descendants. Well, okay then. This is the category or categorie(s) of infractions for which you are reporting the user. These are hash identifiers that map to DestinyReportReasonCategoryDefinition entries.  # noqa: E501

        :return: The reason_category_hashes of this DestinyReportOffensePgcrRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._reason_category_hashes

    @reason_category_hashes.setter
    def reason_category_hashes(self, reason_category_hashes):
        """Sets the reason_category_hashes of this DestinyReportOffensePgcrRequest.

        So you've decided to report someone instead of cursing them and their descendants. Well, okay then. This is the category or categorie(s) of infractions for which you are reporting the user. These are hash identifiers that map to DestinyReportReasonCategoryDefinition entries.  # noqa: E501

        :param reason_category_hashes: The reason_category_hashes of this DestinyReportOffensePgcrRequest.  # noqa: E501
        :type: list[int]
        """

        self._reason_category_hashes = reason_category_hashes

    @property
    def reason_hashes(self):
        """Gets the reason_hashes of this DestinyReportOffensePgcrRequest.  # noqa: E501

        If applicable, provide a more specific reason(s) within the general category of problems provided by the reasonHash. This is also an identifier for a reason. All reasonHashes provided must be children of at least one the reasonCategoryHashes provided.  # noqa: E501

        :return: The reason_hashes of this DestinyReportOffensePgcrRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._reason_hashes

    @reason_hashes.setter
    def reason_hashes(self, reason_hashes):
        """Sets the reason_hashes of this DestinyReportOffensePgcrRequest.

        If applicable, provide a more specific reason(s) within the general category of problems provided by the reasonHash. This is also an identifier for a reason. All reasonHashes provided must be children of at least one the reasonCategoryHashes provided.  # noqa: E501

        :param reason_hashes: The reason_hashes of this DestinyReportOffensePgcrRequest.  # noqa: E501
        :type: list[int]
        """

        self._reason_hashes = reason_hashes

    @property
    def offending_character_id(self):
        """Gets the offending_character_id of this DestinyReportOffensePgcrRequest.  # noqa: E501

        Within the PGCR provided when calling the Reporting endpoint, this should be the character ID of the user that you thought was violating terms of use. They must exist in the PGCR provided.  # noqa: E501

        :return: The offending_character_id of this DestinyReportOffensePgcrRequest.  # noqa: E501
        :rtype: int
        """
        return self._offending_character_id

    @offending_character_id.setter
    def offending_character_id(self, offending_character_id):
        """Sets the offending_character_id of this DestinyReportOffensePgcrRequest.

        Within the PGCR provided when calling the Reporting endpoint, this should be the character ID of the user that you thought was violating terms of use. They must exist in the PGCR provided.  # noqa: E501

        :param offending_character_id: The offending_character_id of this DestinyReportOffensePgcrRequest.  # noqa: E501
        :type: int
        """

        self._offending_character_id = offending_character_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyReportOffensePgcrRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
