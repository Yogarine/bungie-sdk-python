# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyMilestoneChallengeActivity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'activity_hash': 'int',
        'challenges': 'list[DestinyChallengeStatus]',
        'modifier_hashes': 'list[int]',
        'boolean_activity_options': 'dict(str, bool)',
        'loadout_requirement_index': 'int',
        'phases': 'list[DestinyMilestoneActivityPhase]'
    }

    attribute_map = {
        'activity_hash': 'activityHash',
        'challenges': 'challenges',
        'modifier_hashes': 'modifierHashes',
        'boolean_activity_options': 'booleanActivityOptions',
        'loadout_requirement_index': 'loadoutRequirementIndex',
        'phases': 'phases'
    }

    def __init__(self, activity_hash=None, challenges=None, modifier_hashes=None, boolean_activity_options=None, loadout_requirement_index=None, phases=None):  # noqa: E501
        """DestinyMilestoneChallengeActivity - a model defined in OpenAPI"""  # noqa: E501

        self._activity_hash = None
        self._challenges = None
        self._modifier_hashes = None
        self._boolean_activity_options = None
        self._loadout_requirement_index = None
        self._phases = None
        self.discriminator = None

        if activity_hash is not None:
            self.activity_hash = activity_hash
        if challenges is not None:
            self.challenges = challenges
        if modifier_hashes is not None:
            self.modifier_hashes = modifier_hashes
        if boolean_activity_options is not None:
            self.boolean_activity_options = boolean_activity_options
        self.loadout_requirement_index = loadout_requirement_index
        if phases is not None:
            self.phases = phases

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyMilestoneChallengeActivity.  # noqa: E501


        :return: The activity_hash of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyMilestoneChallengeActivity.


        :param activity_hash: The activity_hash of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :type: int
        """

        self._activity_hash = activity_hash

    @property
    def challenges(self):
        """Gets the challenges of this DestinyMilestoneChallengeActivity.  # noqa: E501


        :return: The challenges of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :rtype: list[DestinyChallengeStatus]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this DestinyMilestoneChallengeActivity.


        :param challenges: The challenges of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :type: list[DestinyChallengeStatus]
        """

        self._challenges = challenges

    @property
    def modifier_hashes(self):
        """Gets the modifier_hashes of this DestinyMilestoneChallengeActivity.  # noqa: E501

        If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.  # noqa: E501

        :return: The modifier_hashes of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :rtype: list[int]
        """
        return self._modifier_hashes

    @modifier_hashes.setter
    def modifier_hashes(self, modifier_hashes):
        """Sets the modifier_hashes of this DestinyMilestoneChallengeActivity.

        If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.  # noqa: E501

        :param modifier_hashes: The modifier_hashes of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :type: list[int]
        """

        self._modifier_hashes = modifier_hashes

    @property
    def boolean_activity_options(self):
        """Gets the boolean_activity_options of this DestinyMilestoneChallengeActivity.  # noqa: E501

        The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.  # noqa: E501

        :return: The boolean_activity_options of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._boolean_activity_options

    @boolean_activity_options.setter
    def boolean_activity_options(self, boolean_activity_options):
        """Sets the boolean_activity_options of this DestinyMilestoneChallengeActivity.

        The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.  # noqa: E501

        :param boolean_activity_options: The boolean_activity_options of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :type: dict(str, bool)
        """

        self._boolean_activity_options = boolean_activity_options

    @property
    def loadout_requirement_index(self):
        """Gets the loadout_requirement_index of this DestinyMilestoneChallengeActivity.  # noqa: E501

        If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.  # noqa: E501

        :return: The loadout_requirement_index of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :rtype: int
        """
        return self._loadout_requirement_index

    @loadout_requirement_index.setter
    def loadout_requirement_index(self, loadout_requirement_index):
        """Sets the loadout_requirement_index of this DestinyMilestoneChallengeActivity.

        If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.  # noqa: E501

        :param loadout_requirement_index: The loadout_requirement_index of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :type: int
        """

        self._loadout_requirement_index = loadout_requirement_index

    @property
    def phases(self):
        """Gets the phases of this DestinyMilestoneChallengeActivity.  # noqa: E501

        If the Activity has discrete \"phases\" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.  # noqa: E501

        :return: The phases of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :rtype: list[DestinyMilestoneActivityPhase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this DestinyMilestoneChallengeActivity.

        If the Activity has discrete \"phases\" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.  # noqa: E501

        :param phases: The phases of this DestinyMilestoneChallengeActivity.  # noqa: E501
        :type: list[DestinyMilestoneActivityPhase]
        """

        self._phases = phases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyMilestoneChallengeActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
