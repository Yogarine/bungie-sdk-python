# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyPublicMilestone(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'milestone_hash': 'int',
        'available_quests': 'list[DestinyPublicMilestoneQuest]',
        'activities': 'list[DestinyPublicMilestoneChallengeActivity]',
        'vendor_hashes': 'list[int]',
        'vendors': 'list[DestinyPublicMilestoneVendor]',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'order': 'int'
    }

    attribute_map = {
        'milestone_hash': 'milestoneHash',
        'available_quests': 'availableQuests',
        'activities': 'activities',
        'vendor_hashes': 'vendorHashes',
        'vendors': 'vendors',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'order': 'order'
    }

    def __init__(self, milestone_hash=None, available_quests=None, activities=None, vendor_hashes=None, vendors=None, start_date=None, end_date=None, order=None):  # noqa: E501
        """DestinyPublicMilestone - a model defined in OpenAPI"""  # noqa: E501

        self._milestone_hash = None
        self._available_quests = None
        self._activities = None
        self._vendor_hashes = None
        self._vendors = None
        self._start_date = None
        self._end_date = None
        self._order = None
        self.discriminator = None

        if milestone_hash is not None:
            self.milestone_hash = milestone_hash
        if available_quests is not None:
            self.available_quests = available_quests
        if activities is not None:
            self.activities = activities
        if vendor_hashes is not None:
            self.vendor_hashes = vendor_hashes
        if vendors is not None:
            self.vendors = vendors
        self.start_date = start_date
        self.end_date = end_date
        if order is not None:
            self.order = order

    @property
    def milestone_hash(self):
        """Gets the milestone_hash of this DestinyPublicMilestone.  # noqa: E501

        The hash identifier for the milestone. Use it to look up the DestinyMilestoneDefinition for static data about the Milestone.  # noqa: E501

        :return: The milestone_hash of this DestinyPublicMilestone.  # noqa: E501
        :rtype: int
        """
        return self._milestone_hash

    @milestone_hash.setter
    def milestone_hash(self, milestone_hash):
        """Sets the milestone_hash of this DestinyPublicMilestone.

        The hash identifier for the milestone. Use it to look up the DestinyMilestoneDefinition for static data about the Milestone.  # noqa: E501

        :param milestone_hash: The milestone_hash of this DestinyPublicMilestone.  # noqa: E501
        :type: int
        """

        self._milestone_hash = milestone_hash

    @property
    def available_quests(self):
        """Gets the available_quests of this DestinyPublicMilestone.  # noqa: E501

        A milestone not need have even a single quest, but if there are active quests they will be returned here.  # noqa: E501

        :return: The available_quests of this DestinyPublicMilestone.  # noqa: E501
        :rtype: list[DestinyPublicMilestoneQuest]
        """
        return self._available_quests

    @available_quests.setter
    def available_quests(self, available_quests):
        """Sets the available_quests of this DestinyPublicMilestone.

        A milestone not need have even a single quest, but if there are active quests they will be returned here.  # noqa: E501

        :param available_quests: The available_quests of this DestinyPublicMilestone.  # noqa: E501
        :type: list[DestinyPublicMilestoneQuest]
        """

        self._available_quests = available_quests

    @property
    def activities(self):
        """Gets the activities of this DestinyPublicMilestone.  # noqa: E501


        :return: The activities of this DestinyPublicMilestone.  # noqa: E501
        :rtype: list[DestinyPublicMilestoneChallengeActivity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this DestinyPublicMilestone.


        :param activities: The activities of this DestinyPublicMilestone.  # noqa: E501
        :type: list[DestinyPublicMilestoneChallengeActivity]
        """

        self._activities = activities

    @property
    def vendor_hashes(self):
        """Gets the vendor_hashes of this DestinyPublicMilestone.  # noqa: E501

        Sometimes milestones - or activities active in milestones - will have relevant vendors. These are the vendors that are currently relevant.  Deprecated, already, for the sake of the new \"vendors\" property that has more data. What was I thinking.  # noqa: E501

        :return: The vendor_hashes of this DestinyPublicMilestone.  # noqa: E501
        :rtype: list[int]
        """
        return self._vendor_hashes

    @vendor_hashes.setter
    def vendor_hashes(self, vendor_hashes):
        """Sets the vendor_hashes of this DestinyPublicMilestone.

        Sometimes milestones - or activities active in milestones - will have relevant vendors. These are the vendors that are currently relevant.  Deprecated, already, for the sake of the new \"vendors\" property that has more data. What was I thinking.  # noqa: E501

        :param vendor_hashes: The vendor_hashes of this DestinyPublicMilestone.  # noqa: E501
        :type: list[int]
        """

        self._vendor_hashes = vendor_hashes

    @property
    def vendors(self):
        """Gets the vendors of this DestinyPublicMilestone.  # noqa: E501

        This is why we can't have nice things. This is the ordered list of vendors to be shown that relate to this milestone, potentially along with other interesting data.  # noqa: E501

        :return: The vendors of this DestinyPublicMilestone.  # noqa: E501
        :rtype: list[DestinyPublicMilestoneVendor]
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this DestinyPublicMilestone.

        This is why we can't have nice things. This is the ordered list of vendors to be shown that relate to this milestone, potentially along with other interesting data.  # noqa: E501

        :param vendors: The vendors of this DestinyPublicMilestone.  # noqa: E501
        :type: list[DestinyPublicMilestoneVendor]
        """

        self._vendors = vendors

    @property
    def start_date(self):
        """Gets the start_date of this DestinyPublicMilestone.  # noqa: E501

        If known, this is the date when the Milestone started/became active.  # noqa: E501

        :return: The start_date of this DestinyPublicMilestone.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DestinyPublicMilestone.

        If known, this is the date when the Milestone started/became active.  # noqa: E501

        :param start_date: The start_date of this DestinyPublicMilestone.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DestinyPublicMilestone.  # noqa: E501

        If known, this is the date when the Milestone will expire/recycle/end.  # noqa: E501

        :return: The end_date of this DestinyPublicMilestone.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DestinyPublicMilestone.

        If known, this is the date when the Milestone will expire/recycle/end.  # noqa: E501

        :param end_date: The end_date of this DestinyPublicMilestone.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def order(self):
        """Gets the order of this DestinyPublicMilestone.  # noqa: E501

        Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.  # noqa: E501

        :return: The order of this DestinyPublicMilestone.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DestinyPublicMilestone.

        Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.  # noqa: E501

        :param order: The order of this DestinyPublicMilestone.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyPublicMilestone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
