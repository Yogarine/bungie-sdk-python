# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyPresentationNodeComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'state': 'int',
        'objective': 'DestinyObjectiveProgress',
        'progress_value': 'int',
        'completion_value': 'int'
    }

    attribute_map = {
        'state': 'state',
        'objective': 'objective',
        'progress_value': 'progressValue',
        'completion_value': 'completionValue'
    }

    def __init__(self, state=None, objective=None, progress_value=None, completion_value=None):  # noqa: E501
        """DestinyPresentationNodeComponent - a model defined in OpenAPI"""  # noqa: E501

        self._state = None
        self._objective = None
        self._progress_value = None
        self._completion_value = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if objective is not None:
            self.objective = objective
        if progress_value is not None:
            self.progress_value = progress_value
        if completion_value is not None:
            self.completion_value = completion_value

    @property
    def state(self):
        """Gets the state of this DestinyPresentationNodeComponent.  # noqa: E501


        :return: The state of this DestinyPresentationNodeComponent.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DestinyPresentationNodeComponent.


        :param state: The state of this DestinyPresentationNodeComponent.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def objective(self):
        """Gets the objective of this DestinyPresentationNodeComponent.  # noqa: E501

        An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.  # noqa: E501

        :return: The objective of this DestinyPresentationNodeComponent.  # noqa: E501
        :rtype: DestinyObjectiveProgress
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this DestinyPresentationNodeComponent.

        An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.  # noqa: E501

        :param objective: The objective of this DestinyPresentationNodeComponent.  # noqa: E501
        :type: DestinyObjectiveProgress
        """

        self._objective = objective

    @property
    def progress_value(self):
        """Gets the progress_value of this DestinyPresentationNodeComponent.  # noqa: E501

        How much of the presentation node is considered to be completed so far by the given character/profile.  # noqa: E501

        :return: The progress_value of this DestinyPresentationNodeComponent.  # noqa: E501
        :rtype: int
        """
        return self._progress_value

    @progress_value.setter
    def progress_value(self, progress_value):
        """Sets the progress_value of this DestinyPresentationNodeComponent.

        How much of the presentation node is considered to be completed so far by the given character/profile.  # noqa: E501

        :param progress_value: The progress_value of this DestinyPresentationNodeComponent.  # noqa: E501
        :type: int
        """

        self._progress_value = progress_value

    @property
    def completion_value(self):
        """Gets the completion_value of this DestinyPresentationNodeComponent.  # noqa: E501

        The value at which the presentation ode is considered to be completed.  # noqa: E501

        :return: The completion_value of this DestinyPresentationNodeComponent.  # noqa: E501
        :rtype: int
        """
        return self._completion_value

    @completion_value.setter
    def completion_value(self, completion_value):
        """Sets the completion_value of this DestinyPresentationNodeComponent.

        The value at which the presentation ode is considered to be completed.  # noqa: E501

        :param completion_value: The completion_value of this DestinyPresentationNodeComponent.  # noqa: E501
        :type: int
        """

        self._completion_value = completion_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyPresentationNodeComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
