# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyHistoricalStatsValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stat_id': 'str',
        'basic': 'DestinyHistoricalStatsValuePair',
        'pga': 'DestinyHistoricalStatsValuePair',
        'weighted': 'DestinyHistoricalStatsValuePair',
        'activity_id': 'int'
    }

    attribute_map = {
        'stat_id': 'statId',
        'basic': 'basic',
        'pga': 'pga',
        'weighted': 'weighted',
        'activity_id': 'activityId'
    }

    def __init__(self, stat_id=None, basic=None, pga=None, weighted=None, activity_id=None):  # noqa: E501
        """DestinyHistoricalStatsValue - a model defined in OpenAPI"""  # noqa: E501

        self._stat_id = None
        self._basic = None
        self._pga = None
        self._weighted = None
        self._activity_id = None
        self.discriminator = None

        if stat_id is not None:
            self.stat_id = stat_id
        if basic is not None:
            self.basic = basic
        if pga is not None:
            self.pga = pga
        if weighted is not None:
            self.weighted = weighted
        self.activity_id = activity_id

    @property
    def stat_id(self):
        """Gets the stat_id of this DestinyHistoricalStatsValue.  # noqa: E501

        Unique ID for this stat  # noqa: E501

        :return: The stat_id of this DestinyHistoricalStatsValue.  # noqa: E501
        :rtype: str
        """
        return self._stat_id

    @stat_id.setter
    def stat_id(self, stat_id):
        """Sets the stat_id of this DestinyHistoricalStatsValue.

        Unique ID for this stat  # noqa: E501

        :param stat_id: The stat_id of this DestinyHistoricalStatsValue.  # noqa: E501
        :type: str
        """

        self._stat_id = stat_id

    @property
    def basic(self):
        """Gets the basic of this DestinyHistoricalStatsValue.  # noqa: E501

        Basic stat value.  # noqa: E501

        :return: The basic of this DestinyHistoricalStatsValue.  # noqa: E501
        :rtype: DestinyHistoricalStatsValuePair
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this DestinyHistoricalStatsValue.

        Basic stat value.  # noqa: E501

        :param basic: The basic of this DestinyHistoricalStatsValue.  # noqa: E501
        :type: DestinyHistoricalStatsValuePair
        """

        self._basic = basic

    @property
    def pga(self):
        """Gets the pga of this DestinyHistoricalStatsValue.  # noqa: E501

        Per game average for the statistic, if applicable  # noqa: E501

        :return: The pga of this DestinyHistoricalStatsValue.  # noqa: E501
        :rtype: DestinyHistoricalStatsValuePair
        """
        return self._pga

    @pga.setter
    def pga(self, pga):
        """Sets the pga of this DestinyHistoricalStatsValue.

        Per game average for the statistic, if applicable  # noqa: E501

        :param pga: The pga of this DestinyHistoricalStatsValue.  # noqa: E501
        :type: DestinyHistoricalStatsValuePair
        """

        self._pga = pga

    @property
    def weighted(self):
        """Gets the weighted of this DestinyHistoricalStatsValue.  # noqa: E501

        Weighted value of the stat if a weight greater than 1 has been assigned.  # noqa: E501

        :return: The weighted of this DestinyHistoricalStatsValue.  # noqa: E501
        :rtype: DestinyHistoricalStatsValuePair
        """
        return self._weighted

    @weighted.setter
    def weighted(self, weighted):
        """Sets the weighted of this DestinyHistoricalStatsValue.

        Weighted value of the stat if a weight greater than 1 has been assigned.  # noqa: E501

        :param weighted: The weighted of this DestinyHistoricalStatsValue.  # noqa: E501
        :type: DestinyHistoricalStatsValuePair
        """

        self._weighted = weighted

    @property
    def activity_id(self):
        """Gets the activity_id of this DestinyHistoricalStatsValue.  # noqa: E501

        When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.  # noqa: E501

        :return: The activity_id of this DestinyHistoricalStatsValue.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this DestinyHistoricalStatsValue.

        When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.  # noqa: E501

        :param activity_id: The activity_id of this DestinyHistoricalStatsValue.  # noqa: E501
        :type: int
        """

        self._activity_id = activity_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyHistoricalStatsValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
