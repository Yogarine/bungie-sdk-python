# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyCharacterComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'membership_id': 'int',
        'membership_type': 'int',
        'character_id': 'int',
        'date_last_played': 'datetime',
        'minutes_played_this_session': 'int',
        'minutes_played_total': 'int',
        'light': 'int',
        'stats': 'dict(str, int)',
        'race_hash': 'int',
        'gender_hash': 'int',
        'class_hash': 'int',
        'race_type': 'int',
        'class_type': 'int',
        'gender_type': 'int',
        'emblem_path': 'str',
        'emblem_background_path': 'str',
        'emblem_hash': 'int',
        'emblem_color': 'DestinyColor',
        'level_progression': 'DestinyProgression',
        'base_character_level': 'int',
        'percent_to_next_level': 'float',
        'title_record_hash': 'int'
    }

    attribute_map = {
        'membership_id': 'membershipId',
        'membership_type': 'membershipType',
        'character_id': 'characterId',
        'date_last_played': 'dateLastPlayed',
        'minutes_played_this_session': 'minutesPlayedThisSession',
        'minutes_played_total': 'minutesPlayedTotal',
        'light': 'light',
        'stats': 'stats',
        'race_hash': 'raceHash',
        'gender_hash': 'genderHash',
        'class_hash': 'classHash',
        'race_type': 'raceType',
        'class_type': 'classType',
        'gender_type': 'genderType',
        'emblem_path': 'emblemPath',
        'emblem_background_path': 'emblemBackgroundPath',
        'emblem_hash': 'emblemHash',
        'emblem_color': 'emblemColor',
        'level_progression': 'levelProgression',
        'base_character_level': 'baseCharacterLevel',
        'percent_to_next_level': 'percentToNextLevel',
        'title_record_hash': 'titleRecordHash'
    }

    def __init__(self, membership_id=None, membership_type=None, character_id=None, date_last_played=None, minutes_played_this_session=None, minutes_played_total=None, light=None, stats=None, race_hash=None, gender_hash=None, class_hash=None, race_type=None, class_type=None, gender_type=None, emblem_path=None, emblem_background_path=None, emblem_hash=None, emblem_color=None, level_progression=None, base_character_level=None, percent_to_next_level=None, title_record_hash=None):  # noqa: E501
        """DestinyCharacterComponent - a model defined in OpenAPI"""  # noqa: E501

        self._membership_id = None
        self._membership_type = None
        self._character_id = None
        self._date_last_played = None
        self._minutes_played_this_session = None
        self._minutes_played_total = None
        self._light = None
        self._stats = None
        self._race_hash = None
        self._gender_hash = None
        self._class_hash = None
        self._race_type = None
        self._class_type = None
        self._gender_type = None
        self._emblem_path = None
        self._emblem_background_path = None
        self._emblem_hash = None
        self._emblem_color = None
        self._level_progression = None
        self._base_character_level = None
        self._percent_to_next_level = None
        self._title_record_hash = None
        self.discriminator = None

        if membership_id is not None:
            self.membership_id = membership_id
        if membership_type is not None:
            self.membership_type = membership_type
        if character_id is not None:
            self.character_id = character_id
        if date_last_played is not None:
            self.date_last_played = date_last_played
        if minutes_played_this_session is not None:
            self.minutes_played_this_session = minutes_played_this_session
        if minutes_played_total is not None:
            self.minutes_played_total = minutes_played_total
        if light is not None:
            self.light = light
        if stats is not None:
            self.stats = stats
        if race_hash is not None:
            self.race_hash = race_hash
        if gender_hash is not None:
            self.gender_hash = gender_hash
        if class_hash is not None:
            self.class_hash = class_hash
        if race_type is not None:
            self.race_type = race_type
        if class_type is not None:
            self.class_type = class_type
        if gender_type is not None:
            self.gender_type = gender_type
        if emblem_path is not None:
            self.emblem_path = emblem_path
        if emblem_background_path is not None:
            self.emblem_background_path = emblem_background_path
        if emblem_hash is not None:
            self.emblem_hash = emblem_hash
        if emblem_color is not None:
            self.emblem_color = emblem_color
        if level_progression is not None:
            self.level_progression = level_progression
        if base_character_level is not None:
            self.base_character_level = base_character_level
        if percent_to_next_level is not None:
            self.percent_to_next_level = percent_to_next_level
        self.title_record_hash = title_record_hash

    @property
    def membership_id(self):
        """Gets the membership_id of this DestinyCharacterComponent.  # noqa: E501

        Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.  # noqa: E501

        :return: The membership_id of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this DestinyCharacterComponent.

        Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.  # noqa: E501

        :param membership_id: The membership_id of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._membership_id = membership_id

    @property
    def membership_type(self):
        """Gets the membership_type of this DestinyCharacterComponent.  # noqa: E501

        membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.  # noqa: E501

        :return: The membership_type of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this DestinyCharacterComponent.

        membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.  # noqa: E501

        :param membership_type: The membership_type of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._membership_type = membership_type

    @property
    def character_id(self):
        """Gets the character_id of this DestinyCharacterComponent.  # noqa: E501

        The unique identifier for the character.  # noqa: E501

        :return: The character_id of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this DestinyCharacterComponent.

        The unique identifier for the character.  # noqa: E501

        :param character_id: The character_id of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._character_id = character_id

    @property
    def date_last_played(self):
        """Gets the date_last_played of this DestinyCharacterComponent.  # noqa: E501

        The last date that the user played Destiny.  # noqa: E501

        :return: The date_last_played of this DestinyCharacterComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_played

    @date_last_played.setter
    def date_last_played(self, date_last_played):
        """Sets the date_last_played of this DestinyCharacterComponent.

        The last date that the user played Destiny.  # noqa: E501

        :param date_last_played: The date_last_played of this DestinyCharacterComponent.  # noqa: E501
        :type: datetime
        """

        self._date_last_played = date_last_played

    @property
    def minutes_played_this_session(self):
        """Gets the minutes_played_this_session of this DestinyCharacterComponent.  # noqa: E501

        If the user is currently playing, this is how long they've been playing.  # noqa: E501

        :return: The minutes_played_this_session of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._minutes_played_this_session

    @minutes_played_this_session.setter
    def minutes_played_this_session(self, minutes_played_this_session):
        """Sets the minutes_played_this_session of this DestinyCharacterComponent.

        If the user is currently playing, this is how long they've been playing.  # noqa: E501

        :param minutes_played_this_session: The minutes_played_this_session of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._minutes_played_this_session = minutes_played_this_session

    @property
    def minutes_played_total(self):
        """Gets the minutes_played_total of this DestinyCharacterComponent.  # noqa: E501

        If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.  # noqa: E501

        :return: The minutes_played_total of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._minutes_played_total

    @minutes_played_total.setter
    def minutes_played_total(self, minutes_played_total):
        """Sets the minutes_played_total of this DestinyCharacterComponent.

        If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.  # noqa: E501

        :param minutes_played_total: The minutes_played_total of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._minutes_played_total = minutes_played_total

    @property
    def light(self):
        """Gets the light of this DestinyCharacterComponent.  # noqa: E501

        The user's calculated \"Light Level\". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.  # noqa: E501

        :return: The light of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._light

    @light.setter
    def light(self, light):
        """Sets the light of this DestinyCharacterComponent.

        The user's calculated \"Light Level\". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.  # noqa: E501

        :param light: The light of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._light = light

    @property
    def stats(self):
        """Gets the stats of this DestinyCharacterComponent.  # noqa: E501

        Your character's stats, such as Agility, Resilience, etc... *not* historical stats.  You'll have to call a different endpoint for those.  # noqa: E501

        :return: The stats of this DestinyCharacterComponent.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this DestinyCharacterComponent.

        Your character's stats, such as Agility, Resilience, etc... *not* historical stats.  You'll have to call a different endpoint for those.  # noqa: E501

        :param stats: The stats of this DestinyCharacterComponent.  # noqa: E501
        :type: dict(str, int)
        """

        self._stats = stats

    @property
    def race_hash(self):
        """Gets the race_hash of this DestinyCharacterComponent.  # noqa: E501

        Use this hash to look up the character's DestinyRaceDefinition.  # noqa: E501

        :return: The race_hash of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._race_hash

    @race_hash.setter
    def race_hash(self, race_hash):
        """Sets the race_hash of this DestinyCharacterComponent.

        Use this hash to look up the character's DestinyRaceDefinition.  # noqa: E501

        :param race_hash: The race_hash of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._race_hash = race_hash

    @property
    def gender_hash(self):
        """Gets the gender_hash of this DestinyCharacterComponent.  # noqa: E501

        Use this hash to look up the character's DestinyGenderDefinition.  # noqa: E501

        :return: The gender_hash of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._gender_hash

    @gender_hash.setter
    def gender_hash(self, gender_hash):
        """Sets the gender_hash of this DestinyCharacterComponent.

        Use this hash to look up the character's DestinyGenderDefinition.  # noqa: E501

        :param gender_hash: The gender_hash of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._gender_hash = gender_hash

    @property
    def class_hash(self):
        """Gets the class_hash of this DestinyCharacterComponent.  # noqa: E501

        Use this hash to look up the character's DestinyClassDefinition.  # noqa: E501

        :return: The class_hash of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._class_hash

    @class_hash.setter
    def class_hash(self, class_hash):
        """Sets the class_hash of this DestinyCharacterComponent.

        Use this hash to look up the character's DestinyClassDefinition.  # noqa: E501

        :param class_hash: The class_hash of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._class_hash = class_hash

    @property
    def race_type(self):
        """Gets the race_type of this DestinyCharacterComponent.  # noqa: E501

        Mostly for historical purposes at this point, this is an enumeration for the character's race.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.  # noqa: E501

        :return: The race_type of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._race_type

    @race_type.setter
    def race_type(self, race_type):
        """Sets the race_type of this DestinyCharacterComponent.

        Mostly for historical purposes at this point, this is an enumeration for the character's race.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.  # noqa: E501

        :param race_type: The race_type of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._race_type = race_type

    @property
    def class_type(self):
        """Gets the class_type of this DestinyCharacterComponent.  # noqa: E501

        Mostly for historical purposes at this point, this is an enumeration for the character's class.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.  # noqa: E501

        :return: The class_type of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._class_type

    @class_type.setter
    def class_type(self, class_type):
        """Sets the class_type of this DestinyCharacterComponent.

        Mostly for historical purposes at this point, this is an enumeration for the character's class.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.  # noqa: E501

        :param class_type: The class_type of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._class_type = class_type

    @property
    def gender_type(self):
        """Gets the gender_type of this DestinyCharacterComponent.  # noqa: E501

        Mostly for historical purposes at this point, this is an enumeration for the character's Gender.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.  # noqa: E501

        :return: The gender_type of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._gender_type

    @gender_type.setter
    def gender_type(self, gender_type):
        """Sets the gender_type of this DestinyCharacterComponent.

        Mostly for historical purposes at this point, this is an enumeration for the character's Gender.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.  # noqa: E501

        :param gender_type: The gender_type of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._gender_type = gender_type

    @property
    def emblem_path(self):
        """Gets the emblem_path of this DestinyCharacterComponent.  # noqa: E501

        A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.  # noqa: E501

        :return: The emblem_path of this DestinyCharacterComponent.  # noqa: E501
        :rtype: str
        """
        return self._emblem_path

    @emblem_path.setter
    def emblem_path(self, emblem_path):
        """Sets the emblem_path of this DestinyCharacterComponent.

        A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.  # noqa: E501

        :param emblem_path: The emblem_path of this DestinyCharacterComponent.  # noqa: E501
        :type: str
        """

        self._emblem_path = emblem_path

    @property
    def emblem_background_path(self):
        """Gets the emblem_background_path of this DestinyCharacterComponent.  # noqa: E501

        A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.  # noqa: E501

        :return: The emblem_background_path of this DestinyCharacterComponent.  # noqa: E501
        :rtype: str
        """
        return self._emblem_background_path

    @emblem_background_path.setter
    def emblem_background_path(self, emblem_background_path):
        """Sets the emblem_background_path of this DestinyCharacterComponent.

        A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.  # noqa: E501

        :param emblem_background_path: The emblem_background_path of this DestinyCharacterComponent.  # noqa: E501
        :type: str
        """

        self._emblem_background_path = emblem_background_path

    @property
    def emblem_hash(self):
        """Gets the emblem_hash of this DestinyCharacterComponent.  # noqa: E501

        The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.  # noqa: E501

        :return: The emblem_hash of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._emblem_hash

    @emblem_hash.setter
    def emblem_hash(self, emblem_hash):
        """Sets the emblem_hash of this DestinyCharacterComponent.

        The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.  # noqa: E501

        :param emblem_hash: The emblem_hash of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._emblem_hash = emblem_hash

    @property
    def emblem_color(self):
        """Gets the emblem_color of this DestinyCharacterComponent.  # noqa: E501

        A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.  # noqa: E501

        :return: The emblem_color of this DestinyCharacterComponent.  # noqa: E501
        :rtype: DestinyColor
        """
        return self._emblem_color

    @emblem_color.setter
    def emblem_color(self, emblem_color):
        """Sets the emblem_color of this DestinyCharacterComponent.

        A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.  # noqa: E501

        :param emblem_color: The emblem_color of this DestinyCharacterComponent.  # noqa: E501
        :type: DestinyColor
        """

        self._emblem_color = emblem_color

    @property
    def level_progression(self):
        """Gets the level_progression of this DestinyCharacterComponent.  # noqa: E501

        The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.  # noqa: E501

        :return: The level_progression of this DestinyCharacterComponent.  # noqa: E501
        :rtype: DestinyProgression
        """
        return self._level_progression

    @level_progression.setter
    def level_progression(self, level_progression):
        """Sets the level_progression of this DestinyCharacterComponent.

        The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.  # noqa: E501

        :param level_progression: The level_progression of this DestinyCharacterComponent.  # noqa: E501
        :type: DestinyProgression
        """

        self._level_progression = level_progression

    @property
    def base_character_level(self):
        """Gets the base_character_level of this DestinyCharacterComponent.  # noqa: E501

        The \"base\" level of your character, not accounting for any light level.  # noqa: E501

        :return: The base_character_level of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._base_character_level

    @base_character_level.setter
    def base_character_level(self, base_character_level):
        """Sets the base_character_level of this DestinyCharacterComponent.

        The \"base\" level of your character, not accounting for any light level.  # noqa: E501

        :param base_character_level: The base_character_level of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._base_character_level = base_character_level

    @property
    def percent_to_next_level(self):
        """Gets the percent_to_next_level of this DestinyCharacterComponent.  # noqa: E501

        A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.  # noqa: E501

        :return: The percent_to_next_level of this DestinyCharacterComponent.  # noqa: E501
        :rtype: float
        """
        return self._percent_to_next_level

    @percent_to_next_level.setter
    def percent_to_next_level(self, percent_to_next_level):
        """Sets the percent_to_next_level of this DestinyCharacterComponent.

        A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.  # noqa: E501

        :param percent_to_next_level: The percent_to_next_level of this DestinyCharacterComponent.  # noqa: E501
        :type: float
        """

        self._percent_to_next_level = percent_to_next_level

    @property
    def title_record_hash(self):
        """Gets the title_record_hash of this DestinyCharacterComponent.  # noqa: E501

        If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.  # noqa: E501

        :return: The title_record_hash of this DestinyCharacterComponent.  # noqa: E501
        :rtype: int
        """
        return self._title_record_hash

    @title_record_hash.setter
    def title_record_hash(self, title_record_hash):
        """Sets the title_record_hash of this DestinyCharacterComponent.

        If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.  # noqa: E501

        :param title_record_hash: The title_record_hash of this DestinyCharacterComponent.  # noqa: E501
        :type: int
        """

        self._title_record_hash = title_record_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyCharacterComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
