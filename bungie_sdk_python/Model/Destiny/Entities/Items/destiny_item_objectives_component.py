# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemObjectivesComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'objectives': 'list[DestinyObjectiveProgress]',
        'flavor_objective': 'DestinyObjectiveProgress',
        'date_completed': 'datetime'
    }

    attribute_map = {
        'objectives': 'objectives',
        'flavor_objective': 'flavorObjective',
        'date_completed': 'dateCompleted'
    }

    def __init__(self, objectives=None, flavor_objective=None, date_completed=None):  # noqa: E501
        """DestinyItemObjectivesComponent - a model defined in OpenAPI"""  # noqa: E501

        self._objectives = None
        self._flavor_objective = None
        self._date_completed = None
        self.discriminator = None

        if objectives is not None:
            self.objectives = objectives
        if flavor_objective is not None:
            self.flavor_objective = flavor_objective
        self.date_completed = date_completed

    @property
    def objectives(self):
        """Gets the objectives of this DestinyItemObjectivesComponent.  # noqa: E501

        If the item has a hard association with objectives, your progress on them will be defined here.   Objectives are our standard way to describe a series of tasks that have to be completed for a reward.  # noqa: E501

        :return: The objectives of this DestinyItemObjectivesComponent.  # noqa: E501
        :rtype: list[DestinyObjectiveProgress]
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this DestinyItemObjectivesComponent.

        If the item has a hard association with objectives, your progress on them will be defined here.   Objectives are our standard way to describe a series of tasks that have to be completed for a reward.  # noqa: E501

        :param objectives: The objectives of this DestinyItemObjectivesComponent.  # noqa: E501
        :type: list[DestinyObjectiveProgress]
        """

        self._objectives = objectives

    @property
    def flavor_objective(self):
        """Gets the flavor_objective of this DestinyItemObjectivesComponent.  # noqa: E501

        I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for \"flavor\" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.  # noqa: E501

        :return: The flavor_objective of this DestinyItemObjectivesComponent.  # noqa: E501
        :rtype: DestinyObjectiveProgress
        """
        return self._flavor_objective

    @flavor_objective.setter
    def flavor_objective(self, flavor_objective):
        """Sets the flavor_objective of this DestinyItemObjectivesComponent.

        I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for \"flavor\" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.  # noqa: E501

        :param flavor_objective: The flavor_objective of this DestinyItemObjectivesComponent.  # noqa: E501
        :type: DestinyObjectiveProgress
        """

        self._flavor_objective = flavor_objective

    @property
    def date_completed(self):
        """Gets the date_completed of this DestinyItemObjectivesComponent.  # noqa: E501

        If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.  # noqa: E501

        :return: The date_completed of this DestinyItemObjectivesComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """Sets the date_completed of this DestinyItemObjectivesComponent.

        If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.  # noqa: E501

        :param date_completed: The date_completed of this DestinyItemObjectivesComponent.  # noqa: E501
        :type: datetime
        """

        self._date_completed = date_completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemObjectivesComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
