# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemTalentGridComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'talent_grid_hash': 'int',
        'nodes': 'list[DestinyTalentNode]',
        'is_grid_complete': 'bool',
        'grid_progression': 'DestinyProgression'
    }

    attribute_map = {
        'talent_grid_hash': 'talentGridHash',
        'nodes': 'nodes',
        'is_grid_complete': 'isGridComplete',
        'grid_progression': 'gridProgression'
    }

    def __init__(self, talent_grid_hash=None, nodes=None, is_grid_complete=None, grid_progression=None):  # noqa: E501
        """DestinyItemTalentGridComponent - a model defined in OpenAPI"""  # noqa: E501

        self._talent_grid_hash = None
        self._nodes = None
        self._is_grid_complete = None
        self._grid_progression = None
        self.discriminator = None

        if talent_grid_hash is not None:
            self.talent_grid_hash = talent_grid_hash
        if nodes is not None:
            self.nodes = nodes
        if is_grid_complete is not None:
            self.is_grid_complete = is_grid_complete
        if grid_progression is not None:
            self.grid_progression = grid_progression

    @property
    def talent_grid_hash(self):
        """Gets the talent_grid_hash of this DestinyItemTalentGridComponent.  # noqa: E501

        Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.  # noqa: E501

        :return: The talent_grid_hash of this DestinyItemTalentGridComponent.  # noqa: E501
        :rtype: int
        """
        return self._talent_grid_hash

    @talent_grid_hash.setter
    def talent_grid_hash(self, talent_grid_hash):
        """Sets the talent_grid_hash of this DestinyItemTalentGridComponent.

        Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.  # noqa: E501

        :param talent_grid_hash: The talent_grid_hash of this DestinyItemTalentGridComponent.  # noqa: E501
        :type: int
        """

        self._talent_grid_hash = talent_grid_hash

    @property
    def nodes(self):
        """Gets the nodes of this DestinyItemTalentGridComponent.  # noqa: E501

        Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view, though each node may have multiple \"steps\" which indicate the actual bonuses and visual representation of that node.  # noqa: E501

        :return: The nodes of this DestinyItemTalentGridComponent.  # noqa: E501
        :rtype: list[DestinyTalentNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DestinyItemTalentGridComponent.

        Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view, though each node may have multiple \"steps\" which indicate the actual bonuses and visual representation of that node.  # noqa: E501

        :param nodes: The nodes of this DestinyItemTalentGridComponent.  # noqa: E501
        :type: list[DestinyTalentNode]
        """

        self._nodes = nodes

    @property
    def is_grid_complete(self):
        """Gets the is_grid_complete of this DestinyItemTalentGridComponent.  # noqa: E501

        Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)  # noqa: E501

        :return: The is_grid_complete of this DestinyItemTalentGridComponent.  # noqa: E501
        :rtype: bool
        """
        return self._is_grid_complete

    @is_grid_complete.setter
    def is_grid_complete(self, is_grid_complete):
        """Sets the is_grid_complete of this DestinyItemTalentGridComponent.

        Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)  # noqa: E501

        :param is_grid_complete: The is_grid_complete of this DestinyItemTalentGridComponent.  # noqa: E501
        :type: bool
        """

        self._is_grid_complete = is_grid_complete

    @property
    def grid_progression(self):
        """Gets the grid_progression of this DestinyItemTalentGridComponent.  # noqa: E501

        If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.  # noqa: E501

        :return: The grid_progression of this DestinyItemTalentGridComponent.  # noqa: E501
        :rtype: DestinyProgression
        """
        return self._grid_progression

    @grid_progression.setter
    def grid_progression(self, grid_progression):
        """Sets the grid_progression of this DestinyItemTalentGridComponent.

        If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.  # noqa: E501

        :param grid_progression: The grid_progression of this DestinyItemTalentGridComponent.  # noqa: E501
        :type: DestinyProgression
        """

        self._grid_progression = grid_progression

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemTalentGridComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
