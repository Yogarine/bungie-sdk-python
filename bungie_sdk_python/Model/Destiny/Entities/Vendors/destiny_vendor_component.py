# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyVendorComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'can_purchase': 'bool',
        'progression': 'DestinyProgression',
        'vendor_location_index': 'int',
        'seasonal_rank': 'int',
        'vendor_hash': 'int',
        'next_refresh_date': 'datetime',
        'enabled': 'bool'
    }

    attribute_map = {
        'can_purchase': 'canPurchase',
        'progression': 'progression',
        'vendor_location_index': 'vendorLocationIndex',
        'seasonal_rank': 'seasonalRank',
        'vendor_hash': 'vendorHash',
        'next_refresh_date': 'nextRefreshDate',
        'enabled': 'enabled'
    }

    def __init__(self, can_purchase=None, progression=None, vendor_location_index=None, seasonal_rank=None, vendor_hash=None, next_refresh_date=None, enabled=None):  # noqa: E501
        """DestinyVendorComponent - a model defined in OpenAPI"""  # noqa: E501

        self._can_purchase = None
        self._progression = None
        self._vendor_location_index = None
        self._seasonal_rank = None
        self._vendor_hash = None
        self._next_refresh_date = None
        self._enabled = None
        self.discriminator = None

        if can_purchase is not None:
            self.can_purchase = can_purchase
        if progression is not None:
            self.progression = progression
        if vendor_location_index is not None:
            self.vendor_location_index = vendor_location_index
        self.seasonal_rank = seasonal_rank
        if vendor_hash is not None:
            self.vendor_hash = vendor_hash
        if next_refresh_date is not None:
            self.next_refresh_date = next_refresh_date
        if enabled is not None:
            self.enabled = enabled

    @property
    def can_purchase(self):
        """Gets the can_purchase of this DestinyVendorComponent.  # noqa: E501

        If True, you can purchase from the Vendor.  Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?).  # noqa: E501

        :return: The can_purchase of this DestinyVendorComponent.  # noqa: E501
        :rtype: bool
        """
        return self._can_purchase

    @can_purchase.setter
    def can_purchase(self, can_purchase):
        """Sets the can_purchase of this DestinyVendorComponent.

        If True, you can purchase from the Vendor.  Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?).  # noqa: E501

        :param can_purchase: The can_purchase of this DestinyVendorComponent.  # noqa: E501
        :type: bool
        """

        self._can_purchase = can_purchase

    @property
    def progression(self):
        """Gets the progression of this DestinyVendorComponent.  # noqa: E501

        If the Vendor has a related Reputation, this is the Progression data that represents the character's Reputation level with this Vendor.  # noqa: E501

        :return: The progression of this DestinyVendorComponent.  # noqa: E501
        :rtype: DestinyProgression
        """
        return self._progression

    @progression.setter
    def progression(self, progression):
        """Sets the progression of this DestinyVendorComponent.

        If the Vendor has a related Reputation, this is the Progression data that represents the character's Reputation level with this Vendor.  # noqa: E501

        :param progression: The progression of this DestinyVendorComponent.  # noqa: E501
        :type: DestinyProgression
        """

        self._progression = progression

    @property
    def vendor_location_index(self):
        """Gets the vendor_location_index of this DestinyVendorComponent.  # noqa: E501

        An index into the vendor definition's \"locations\" property array, indicating which location they are at currently. If -1, then the vendor has no known location (and you may choose not to show them in your UI as a result. I mean, it's your bag honey)  # noqa: E501

        :return: The vendor_location_index of this DestinyVendorComponent.  # noqa: E501
        :rtype: int
        """
        return self._vendor_location_index

    @vendor_location_index.setter
    def vendor_location_index(self, vendor_location_index):
        """Sets the vendor_location_index of this DestinyVendorComponent.

        An index into the vendor definition's \"locations\" property array, indicating which location they are at currently. If -1, then the vendor has no known location (and you may choose not to show them in your UI as a result. I mean, it's your bag honey)  # noqa: E501

        :param vendor_location_index: The vendor_location_index of this DestinyVendorComponent.  # noqa: E501
        :type: int
        """

        self._vendor_location_index = vendor_location_index

    @property
    def seasonal_rank(self):
        """Gets the seasonal_rank of this DestinyVendorComponent.  # noqa: E501

        If this vendor has a seasonal rank, this will be the calculated value of that rank. How nice is that? I mean, that's pretty sweeet. It's a whole 32 bit integer.  # noqa: E501

        :return: The seasonal_rank of this DestinyVendorComponent.  # noqa: E501
        :rtype: int
        """
        return self._seasonal_rank

    @seasonal_rank.setter
    def seasonal_rank(self, seasonal_rank):
        """Sets the seasonal_rank of this DestinyVendorComponent.

        If this vendor has a seasonal rank, this will be the calculated value of that rank. How nice is that? I mean, that's pretty sweeet. It's a whole 32 bit integer.  # noqa: E501

        :param seasonal_rank: The seasonal_rank of this DestinyVendorComponent.  # noqa: E501
        :type: int
        """

        self._seasonal_rank = seasonal_rank

    @property
    def vendor_hash(self):
        """Gets the vendor_hash of this DestinyVendorComponent.  # noqa: E501

        The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.  # noqa: E501

        :return: The vendor_hash of this DestinyVendorComponent.  # noqa: E501
        :rtype: int
        """
        return self._vendor_hash

    @vendor_hash.setter
    def vendor_hash(self, vendor_hash):
        """Sets the vendor_hash of this DestinyVendorComponent.

        The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.  # noqa: E501

        :param vendor_hash: The vendor_hash of this DestinyVendorComponent.  # noqa: E501
        :type: int
        """

        self._vendor_hash = vendor_hash

    @property
    def next_refresh_date(self):
        """Gets the next_refresh_date of this DestinyVendorComponent.  # noqa: E501

        The date when this vendor's inventory will next rotate/refresh.  Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.  Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.  # noqa: E501

        :return: The next_refresh_date of this DestinyVendorComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._next_refresh_date

    @next_refresh_date.setter
    def next_refresh_date(self, next_refresh_date):
        """Sets the next_refresh_date of this DestinyVendorComponent.

        The date when this vendor's inventory will next rotate/refresh.  Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.  Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.  # noqa: E501

        :param next_refresh_date: The next_refresh_date of this DestinyVendorComponent.  # noqa: E501
        :type: datetime
        """

        self._next_refresh_date = next_refresh_date

    @property
    def enabled(self):
        """Gets the enabled of this DestinyVendorComponent.  # noqa: E501

        If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.  # noqa: E501

        :return: The enabled of this DestinyVendorComponent.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DestinyVendorComponent.

        If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.  # noqa: E501

        :param enabled: The enabled of this DestinyVendorComponent.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyVendorComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
