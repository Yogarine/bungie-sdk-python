# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyUnlockStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'unlock_hash': 'int',
        'is_set': 'bool'
    }

    attribute_map = {
        'unlock_hash': 'unlockHash',
        'is_set': 'isSet'
    }

    def __init__(self, unlock_hash=None, is_set=None):  # noqa: E501
        """DestinyUnlockStatus - a model defined in OpenAPI"""  # noqa: E501

        self._unlock_hash = None
        self._is_set = None
        self.discriminator = None

        if unlock_hash is not None:
            self.unlock_hash = unlock_hash
        if is_set is not None:
            self.is_set = is_set

    @property
    def unlock_hash(self):
        """Gets the unlock_hash of this DestinyUnlockStatus.  # noqa: E501

        The hash identifier for the Unlock Flag. Use to lookup DestinyUnlockDefinition for static data. Not all unlocks have human readable data - in fact, most don't. But when they do, it can be very useful to show. Even if they don't have human readable data, you might be able to infer the meaning of an unlock flag with a bit of experimentation...  # noqa: E501

        :return: The unlock_hash of this DestinyUnlockStatus.  # noqa: E501
        :rtype: int
        """
        return self._unlock_hash

    @unlock_hash.setter
    def unlock_hash(self, unlock_hash):
        """Sets the unlock_hash of this DestinyUnlockStatus.

        The hash identifier for the Unlock Flag. Use to lookup DestinyUnlockDefinition for static data. Not all unlocks have human readable data - in fact, most don't. But when they do, it can be very useful to show. Even if they don't have human readable data, you might be able to infer the meaning of an unlock flag with a bit of experimentation...  # noqa: E501

        :param unlock_hash: The unlock_hash of this DestinyUnlockStatus.  # noqa: E501
        :type: int
        """

        self._unlock_hash = unlock_hash

    @property
    def is_set(self):
        """Gets the is_set of this DestinyUnlockStatus.  # noqa: E501

        Whether the unlock flag is set.  # noqa: E501

        :return: The is_set of this DestinyUnlockStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_set

    @is_set.setter
    def is_set(self, is_set):
        """Sets the is_set of this DestinyUnlockStatus.

        Whether the unlock flag is set.  # noqa: E501

        :param is_set: The is_set of this DestinyUnlockStatus.  # noqa: E501
        :type: bool
        """

        self._is_set = is_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyUnlockStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
