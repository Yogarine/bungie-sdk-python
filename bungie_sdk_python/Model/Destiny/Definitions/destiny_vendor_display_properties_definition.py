# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyVendorDisplayPropertiesDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'large_icon': 'str',
        'subtitle': 'str',
        'original_icon': 'str',
        'requirements_display': 'list[DestinyVendorRequirementDisplayEntryDefinition]',
        'small_transparent_icon': 'str',
        'map_icon': 'str',
        'large_transparent_icon': 'str',
        'description': 'str',
        'name': 'str',
        'icon': 'str',
        'high_res_icon': 'str',
        'has_icon': 'bool'
    }

    attribute_map = {
        'large_icon': 'largeIcon',
        'subtitle': 'subtitle',
        'original_icon': 'originalIcon',
        'requirements_display': 'requirementsDisplay',
        'small_transparent_icon': 'smallTransparentIcon',
        'map_icon': 'mapIcon',
        'large_transparent_icon': 'largeTransparentIcon',
        'description': 'description',
        'name': 'name',
        'icon': 'icon',
        'high_res_icon': 'highResIcon',
        'has_icon': 'hasIcon'
    }

    def __init__(self, large_icon=None, subtitle=None, original_icon=None, requirements_display=None, small_transparent_icon=None, map_icon=None, large_transparent_icon=None, description=None, name=None, icon=None, high_res_icon=None, has_icon=None):  # noqa: E501
        """DestinyVendorDisplayPropertiesDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._large_icon = None
        self._subtitle = None
        self._original_icon = None
        self._requirements_display = None
        self._small_transparent_icon = None
        self._map_icon = None
        self._large_transparent_icon = None
        self._description = None
        self._name = None
        self._icon = None
        self._high_res_icon = None
        self._has_icon = None
        self.discriminator = None

        if large_icon is not None:
            self.large_icon = large_icon
        if subtitle is not None:
            self.subtitle = subtitle
        if original_icon is not None:
            self.original_icon = original_icon
        if requirements_display is not None:
            self.requirements_display = requirements_display
        if small_transparent_icon is not None:
            self.small_transparent_icon = small_transparent_icon
        if map_icon is not None:
            self.map_icon = map_icon
        if large_transparent_icon is not None:
            self.large_transparent_icon = large_transparent_icon
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if high_res_icon is not None:
            self.high_res_icon = high_res_icon
        if has_icon is not None:
            self.has_icon = has_icon

    @property
    def large_icon(self):
        """Gets the large_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.  # noqa: E501

        :return: The large_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._large_icon

    @large_icon.setter
    def large_icon(self, large_icon):
        """Sets the large_icon of this DestinyVendorDisplayPropertiesDefinition.

        I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.  # noqa: E501

        :param large_icon: The large_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._large_icon = large_icon

    @property
    def subtitle(self):
        """Gets the subtitle of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The subtitle of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this DestinyVendorDisplayPropertiesDefinition.


        :param subtitle: The subtitle of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._subtitle = subtitle

    @property
    def original_icon(self):
        """Gets the original_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.  # noqa: E501

        :return: The original_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._original_icon

    @original_icon.setter
    def original_icon(self, original_icon):
        """Sets the original_icon of this DestinyVendorDisplayPropertiesDefinition.

        If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.  # noqa: E501

        :param original_icon: The original_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._original_icon = original_icon

    @property
    def requirements_display(self):
        """Gets the requirements_display of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.  # noqa: E501

        :return: The requirements_display of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: list[DestinyVendorRequirementDisplayEntryDefinition]
        """
        return self._requirements_display

    @requirements_display.setter
    def requirements_display(self, requirements_display):
        """Sets the requirements_display of this DestinyVendorDisplayPropertiesDefinition.

        Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.  # noqa: E501

        :param requirements_display: The requirements_display of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: list[DestinyVendorRequirementDisplayEntryDefinition]
        """

        self._requirements_display = requirements_display

    @property
    def small_transparent_icon(self):
        """Gets the small_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        This is the icon used in parts of the game UI such as the vendor's waypoint.  # noqa: E501

        :return: The small_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._small_transparent_icon

    @small_transparent_icon.setter
    def small_transparent_icon(self, small_transparent_icon):
        """Sets the small_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.

        This is the icon used in parts of the game UI such as the vendor's waypoint.  # noqa: E501

        :param small_transparent_icon: The small_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._small_transparent_icon = small_transparent_icon

    @property
    def map_icon(self):
        """Gets the map_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        This is the icon used in the map overview, when the vendor is located on the map.  # noqa: E501

        :return: The map_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._map_icon

    @map_icon.setter
    def map_icon(self, map_icon):
        """Sets the map_icon of this DestinyVendorDisplayPropertiesDefinition.

        This is the icon used in the map overview, when the vendor is located on the map.  # noqa: E501

        :param map_icon: The map_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._map_icon = map_icon

    @property
    def large_transparent_icon(self):
        """Gets the large_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.  # noqa: E501

        :return: The large_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._large_transparent_icon

    @large_transparent_icon.setter
    def large_transparent_icon(self, large_transparent_icon):
        """Sets the large_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.

        This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.  # noqa: E501

        :param large_transparent_icon: The large_transparent_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._large_transparent_icon = large_transparent_icon

    @property
    def description(self):
        """Gets the description of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The description of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinyVendorDisplayPropertiesDefinition.


        :param description: The description of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The name of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinyVendorDisplayPropertiesDefinition.


        :param name: The name of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.  # noqa: E501

        :return: The icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DestinyVendorDisplayPropertiesDefinition.

        Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.  # noqa: E501

        :param icon: The icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def high_res_icon(self):
        """Gets the high_res_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.  # noqa: E501

        :return: The high_res_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._high_res_icon

    @high_res_icon.setter
    def high_res_icon(self, high_res_icon):
        """Sets the high_res_icon of this DestinyVendorDisplayPropertiesDefinition.

        If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.  # noqa: E501

        :param high_res_icon: The high_res_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._high_res_icon = high_res_icon

    @property
    def has_icon(self):
        """Gets the has_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The has_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._has_icon

    @has_icon.setter
    def has_icon(self, has_icon):
        """Sets the has_icon of this DestinyVendorDisplayPropertiesDefinition.


        :param has_icon: The has_icon of this DestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: bool
        """

        self._has_icon = has_icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyVendorDisplayPropertiesDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
