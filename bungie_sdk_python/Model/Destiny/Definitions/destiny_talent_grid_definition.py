# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyTalentGridDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_grid_level': 'int',
        'grid_level_per_column': 'int',
        'progression_hash': 'int',
        'nodes': 'list[DestinyTalentNodeDefinition]',
        'exclusive_sets': 'list[DestinyTalentNodeExclusiveSetDefinition]',
        'independent_node_indexes': 'list[int]',
        'groups': 'dict(str, DestinyTalentExclusiveGroup)',
        'node_categories': 'list[DestinyTalentNodeCategory]',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'max_grid_level': 'maxGridLevel',
        'grid_level_per_column': 'gridLevelPerColumn',
        'progression_hash': 'progressionHash',
        'nodes': 'nodes',
        'exclusive_sets': 'exclusiveSets',
        'independent_node_indexes': 'independentNodeIndexes',
        'groups': 'groups',
        'node_categories': 'nodeCategories',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, max_grid_level=None, grid_level_per_column=None, progression_hash=None, nodes=None, exclusive_sets=None, independent_node_indexes=None, groups=None, node_categories=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyTalentGridDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._max_grid_level = None
        self._grid_level_per_column = None
        self._progression_hash = None
        self._nodes = None
        self._exclusive_sets = None
        self._independent_node_indexes = None
        self._groups = None
        self._node_categories = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if max_grid_level is not None:
            self.max_grid_level = max_grid_level
        if grid_level_per_column is not None:
            self.grid_level_per_column = grid_level_per_column
        if progression_hash is not None:
            self.progression_hash = progression_hash
        if nodes is not None:
            self.nodes = nodes
        if exclusive_sets is not None:
            self.exclusive_sets = exclusive_sets
        if independent_node_indexes is not None:
            self.independent_node_indexes = independent_node_indexes
        if groups is not None:
            self.groups = groups
        if node_categories is not None:
            self.node_categories = node_categories
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def max_grid_level(self):
        """Gets the max_grid_level of this DestinyTalentGridDefinition.  # noqa: E501

        The maximum possible level of the Talent Grid: at this level, any nodes are allowed to be activated.  # noqa: E501

        :return: The max_grid_level of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: int
        """
        return self._max_grid_level

    @max_grid_level.setter
    def max_grid_level(self, max_grid_level):
        """Sets the max_grid_level of this DestinyTalentGridDefinition.

        The maximum possible level of the Talent Grid: at this level, any nodes are allowed to be activated.  # noqa: E501

        :param max_grid_level: The max_grid_level of this DestinyTalentGridDefinition.  # noqa: E501
        :type: int
        """

        self._max_grid_level = max_grid_level

    @property
    def grid_level_per_column(self):
        """Gets the grid_level_per_column of this DestinyTalentGridDefinition.  # noqa: E501

        The meaning of this has been lost in the sands of time: it still exists as a property, but appears to be unused in the modern UI of talent grids. It used to imply that each visual \"column\" of talent nodes required identical progression levels in order to be activated. Returning this value in case it is still useful to someone? Perhaps it's just a bit of interesting history.  # noqa: E501

        :return: The grid_level_per_column of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: int
        """
        return self._grid_level_per_column

    @grid_level_per_column.setter
    def grid_level_per_column(self, grid_level_per_column):
        """Sets the grid_level_per_column of this DestinyTalentGridDefinition.

        The meaning of this has been lost in the sands of time: it still exists as a property, but appears to be unused in the modern UI of talent grids. It used to imply that each visual \"column\" of talent nodes required identical progression levels in order to be activated. Returning this value in case it is still useful to someone? Perhaps it's just a bit of interesting history.  # noqa: E501

        :param grid_level_per_column: The grid_level_per_column of this DestinyTalentGridDefinition.  # noqa: E501
        :type: int
        """

        self._grid_level_per_column = grid_level_per_column

    @property
    def progression_hash(self):
        """Gets the progression_hash of this DestinyTalentGridDefinition.  # noqa: E501

        The hash identifier of the Progression (DestinyProgressionDefinition) that drives whether and when Talent Nodes can be activated on the Grid. Items will have instances of this Progression, and will gain experience that will eventually cause the grid to increase in level. As the grid's level increases, it will cross the threshold where nodes can be activated. See DestinyTalentGridStepDefinition's activation requirements for more information.  # noqa: E501

        :return: The progression_hash of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: int
        """
        return self._progression_hash

    @progression_hash.setter
    def progression_hash(self, progression_hash):
        """Sets the progression_hash of this DestinyTalentGridDefinition.

        The hash identifier of the Progression (DestinyProgressionDefinition) that drives whether and when Talent Nodes can be activated on the Grid. Items will have instances of this Progression, and will gain experience that will eventually cause the grid to increase in level. As the grid's level increases, it will cross the threshold where nodes can be activated. See DestinyTalentGridStepDefinition's activation requirements for more information.  # noqa: E501

        :param progression_hash: The progression_hash of this DestinyTalentGridDefinition.  # noqa: E501
        :type: int
        """

        self._progression_hash = progression_hash

    @property
    def nodes(self):
        """Gets the nodes of this DestinyTalentGridDefinition.  # noqa: E501

        The list of Talent Nodes on the Grid (recall that Nodes themselves are really just locations in the UI to show whatever their current Step is. You will only know the current step for a node by retrieving instanced data through platform calls to the API that return DestinyItemTalentGridComponent).  # noqa: E501

        :return: The nodes of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: list[DestinyTalentNodeDefinition]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DestinyTalentGridDefinition.

        The list of Talent Nodes on the Grid (recall that Nodes themselves are really just locations in the UI to show whatever their current Step is. You will only know the current step for a node by retrieving instanced data through platform calls to the API that return DestinyItemTalentGridComponent).  # noqa: E501

        :param nodes: The nodes of this DestinyTalentGridDefinition.  # noqa: E501
        :type: list[DestinyTalentNodeDefinition]
        """

        self._nodes = nodes

    @property
    def exclusive_sets(self):
        """Gets the exclusive_sets of this DestinyTalentGridDefinition.  # noqa: E501

        Talent Nodes can exist in \"exclusive sets\": these are sets of nodes in which only a single node in the set can be activated at any given time. Activating a node in this set will automatically deactivate the other nodes in the set (referred to as a \"Swap\").  If a node in the exclusive set has already been activated, the game will not charge you materials to activate another node in the set, even if you have never activated it before, because you already paid the cost to activate one node in the set.  Not to be confused with Exclusive Groups. (how the heck do we NOT get confused by that? Jeez) See the groups property for information about that only-tangentially-related concept.  # noqa: E501

        :return: The exclusive_sets of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: list[DestinyTalentNodeExclusiveSetDefinition]
        """
        return self._exclusive_sets

    @exclusive_sets.setter
    def exclusive_sets(self, exclusive_sets):
        """Sets the exclusive_sets of this DestinyTalentGridDefinition.

        Talent Nodes can exist in \"exclusive sets\": these are sets of nodes in which only a single node in the set can be activated at any given time. Activating a node in this set will automatically deactivate the other nodes in the set (referred to as a \"Swap\").  If a node in the exclusive set has already been activated, the game will not charge you materials to activate another node in the set, even if you have never activated it before, because you already paid the cost to activate one node in the set.  Not to be confused with Exclusive Groups. (how the heck do we NOT get confused by that? Jeez) See the groups property for information about that only-tangentially-related concept.  # noqa: E501

        :param exclusive_sets: The exclusive_sets of this DestinyTalentGridDefinition.  # noqa: E501
        :type: list[DestinyTalentNodeExclusiveSetDefinition]
        """

        self._exclusive_sets = exclusive_sets

    @property
    def independent_node_indexes(self):
        """Gets the independent_node_indexes of this DestinyTalentGridDefinition.  # noqa: E501

        This is a quick reference to the indexes of nodes that are not part of exclusive sets. Handy for knowing which talent nodes can only be activated directly, rather than via swapping.  # noqa: E501

        :return: The independent_node_indexes of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._independent_node_indexes

    @independent_node_indexes.setter
    def independent_node_indexes(self, independent_node_indexes):
        """Sets the independent_node_indexes of this DestinyTalentGridDefinition.

        This is a quick reference to the indexes of nodes that are not part of exclusive sets. Handy for knowing which talent nodes can only be activated directly, rather than via swapping.  # noqa: E501

        :param independent_node_indexes: The independent_node_indexes of this DestinyTalentGridDefinition.  # noqa: E501
        :type: list[int]
        """

        self._independent_node_indexes = independent_node_indexes

    @property
    def groups(self):
        """Gets the groups of this DestinyTalentGridDefinition.  # noqa: E501

        Talent Nodes can have \"Exclusive Groups\". These are not to be confused with Exclusive Sets (see exclusiveSets property).  Look at the definition of DestinyTalentExclusiveGroup for more information and how they work. These groups are keyed by the \"groupHash\" from DestinyTalentExclusiveGroup.  # noqa: E501

        :return: The groups of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: dict(str, DestinyTalentExclusiveGroup)
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this DestinyTalentGridDefinition.

        Talent Nodes can have \"Exclusive Groups\". These are not to be confused with Exclusive Sets (see exclusiveSets property).  Look at the definition of DestinyTalentExclusiveGroup for more information and how they work. These groups are keyed by the \"groupHash\" from DestinyTalentExclusiveGroup.  # noqa: E501

        :param groups: The groups of this DestinyTalentGridDefinition.  # noqa: E501
        :type: dict(str, DestinyTalentExclusiveGroup)
        """

        self._groups = groups

    @property
    def node_categories(self):
        """Gets the node_categories of this DestinyTalentGridDefinition.  # noqa: E501

        BNet wants to show talent nodes grouped by similar purpose with localized titles. This is the ordered list of those categories: if you want to show nodes by category, you can iterate over this list, render the displayProperties for the category as the title, and then iterate over the talent nodes referenced by the category to show the related nodes.  Note that this is different from Exclusive Groups or Sets, because these categories also incorporate \"Independent\" nodes that belong to neither sets nor groups. These are purely for visual grouping of nodes rather than functional grouping.  # noqa: E501

        :return: The node_categories of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: list[DestinyTalentNodeCategory]
        """
        return self._node_categories

    @node_categories.setter
    def node_categories(self, node_categories):
        """Sets the node_categories of this DestinyTalentGridDefinition.

        BNet wants to show talent nodes grouped by similar purpose with localized titles. This is the ordered list of those categories: if you want to show nodes by category, you can iterate over this list, render the displayProperties for the category as the title, and then iterate over the talent nodes referenced by the category to show the related nodes.  Note that this is different from Exclusive Groups or Sets, because these categories also incorporate \"Independent\" nodes that belong to neither sets nor groups. These are purely for visual grouping of nodes rather than functional grouping.  # noqa: E501

        :param node_categories: The node_categories of this DestinyTalentGridDefinition.  # noqa: E501
        :type: list[DestinyTalentNodeCategory]
        """

        self._node_categories = node_categories

    @property
    def hash(self):
        """Gets the hash of this DestinyTalentGridDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyTalentGridDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyTalentGridDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyTalentGridDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyTalentGridDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyTalentGridDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyTalentGridDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyTalentGridDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyTalentGridDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyTalentGridDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyTalentGridDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
