# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyProgressionDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_properties': 'DestinyProgressionDisplayPropertiesDefinition',
        'scope': 'int',
        'repeat_last_step': 'bool',
        'source': 'str',
        'steps': 'list[DestinyProgressionStepDefinition]',
        'visible': 'bool',
        'faction_hash': 'int',
        'color': 'DestinyColor',
        'rank_icon': 'str',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'scope': 'scope',
        'repeat_last_step': 'repeatLastStep',
        'source': 'source',
        'steps': 'steps',
        'visible': 'visible',
        'faction_hash': 'factionHash',
        'color': 'color',
        'rank_icon': 'rankIcon',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, scope=None, repeat_last_step=None, source=None, steps=None, visible=None, faction_hash=None, color=None, rank_icon=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyProgressionDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._display_properties = None
        self._scope = None
        self._repeat_last_step = None
        self._source = None
        self._steps = None
        self._visible = None
        self._faction_hash = None
        self._color = None
        self._rank_icon = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if scope is not None:
            self.scope = scope
        if repeat_last_step is not None:
            self.repeat_last_step = repeat_last_step
        if source is not None:
            self.source = source
        if steps is not None:
            self.steps = steps
        if visible is not None:
            self.visible = visible
        self.faction_hash = faction_hash
        if color is not None:
            self.color = color
        if rank_icon is not None:
            self.rank_icon = rank_icon
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyProgressionDefinition.  # noqa: E501


        :return: The display_properties of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: DestinyProgressionDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyProgressionDefinition.


        :param display_properties: The display_properties of this DestinyProgressionDefinition.  # noqa: E501
        :type: DestinyProgressionDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def scope(self):
        """Gets the scope of this DestinyProgressionDefinition.  # noqa: E501

        The \"Scope\" of the progression indicates the source of the progression's live data.  See the DestinyProgressionScope enum for more info: but essentially, a Progression can either be backed by a stored value, or it can be a calculated derivative of other values.  # noqa: E501

        :return: The scope of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DestinyProgressionDefinition.

        The \"Scope\" of the progression indicates the source of the progression's live data.  See the DestinyProgressionScope enum for more info: but essentially, a Progression can either be backed by a stored value, or it can be a calculated derivative of other values.  # noqa: E501

        :param scope: The scope of this DestinyProgressionDefinition.  # noqa: E501
        :type: int
        """

        self._scope = scope

    @property
    def repeat_last_step(self):
        """Gets the repeat_last_step of this DestinyProgressionDefinition.  # noqa: E501

        If this is True, then the progression doesn't have a maximum level.  # noqa: E501

        :return: The repeat_last_step of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._repeat_last_step

    @repeat_last_step.setter
    def repeat_last_step(self, repeat_last_step):
        """Sets the repeat_last_step of this DestinyProgressionDefinition.

        If this is True, then the progression doesn't have a maximum level.  # noqa: E501

        :param repeat_last_step: The repeat_last_step of this DestinyProgressionDefinition.  # noqa: E501
        :type: bool
        """

        self._repeat_last_step = repeat_last_step

    @property
    def source(self):
        """Gets the source of this DestinyProgressionDefinition.  # noqa: E501

        If there's a description of how to earn this progression in the local config, this will be that localized description.  # noqa: E501

        :return: The source of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DestinyProgressionDefinition.

        If there's a description of how to earn this progression in the local config, this will be that localized description.  # noqa: E501

        :param source: The source of this DestinyProgressionDefinition.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def steps(self):
        """Gets the steps of this DestinyProgressionDefinition.  # noqa: E501

        Progressions are divided into Steps, which roughly equate to \"Levels\" in the traditional sense of a Progression. Notably, the last step can be repeated indefinitely if repeatLastStep is true, meaning that the calculation for your level is not as simple as comparing your current progress to the max progress of the steps.   These and more calculations are done for you if you grab live character progression data, such as in the DestinyCharacterProgressionComponent.  # noqa: E501

        :return: The steps of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: list[DestinyProgressionStepDefinition]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this DestinyProgressionDefinition.

        Progressions are divided into Steps, which roughly equate to \"Levels\" in the traditional sense of a Progression. Notably, the last step can be repeated indefinitely if repeatLastStep is true, meaning that the calculation for your level is not as simple as comparing your current progress to the max progress of the steps.   These and more calculations are done for you if you grab live character progression data, such as in the DestinyCharacterProgressionComponent.  # noqa: E501

        :param steps: The steps of this DestinyProgressionDefinition.  # noqa: E501
        :type: list[DestinyProgressionStepDefinition]
        """

        self._steps = steps

    @property
    def visible(self):
        """Gets the visible of this DestinyProgressionDefinition.  # noqa: E501

        If true, the Progression is something worth showing to users.  If false, BNet isn't going to show it. But that doesn't mean you can't. We're all friends here.  # noqa: E501

        :return: The visible of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DestinyProgressionDefinition.

        If true, the Progression is something worth showing to users.  If false, BNet isn't going to show it. But that doesn't mean you can't. We're all friends here.  # noqa: E501

        :param visible: The visible of this DestinyProgressionDefinition.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def faction_hash(self):
        """Gets the faction_hash of this DestinyProgressionDefinition.  # noqa: E501

        If the value exists, this is the hash identifier for the Faction that owns this Progression.  This is purely for convenience, if you're looking at a progression and want to know if and who it's related to in terms of Faction Reputation.  # noqa: E501

        :return: The faction_hash of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._faction_hash

    @faction_hash.setter
    def faction_hash(self, faction_hash):
        """Sets the faction_hash of this DestinyProgressionDefinition.

        If the value exists, this is the hash identifier for the Faction that owns this Progression.  This is purely for convenience, if you're looking at a progression and want to know if and who it's related to in terms of Faction Reputation.  # noqa: E501

        :param faction_hash: The faction_hash of this DestinyProgressionDefinition.  # noqa: E501
        :type: int
        """

        self._faction_hash = faction_hash

    @property
    def color(self):
        """Gets the color of this DestinyProgressionDefinition.  # noqa: E501

        The #RGB string value for the color related to this progression, if there is one.  # noqa: E501

        :return: The color of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: DestinyColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DestinyProgressionDefinition.

        The #RGB string value for the color related to this progression, if there is one.  # noqa: E501

        :param color: The color of this DestinyProgressionDefinition.  # noqa: E501
        :type: DestinyColor
        """

        self._color = color

    @property
    def rank_icon(self):
        """Gets the rank_icon of this DestinyProgressionDefinition.  # noqa: E501

        For progressions that have it, this is the rank icon we use in the Companion, displayed above the progressions' rank value.  # noqa: E501

        :return: The rank_icon of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._rank_icon

    @rank_icon.setter
    def rank_icon(self, rank_icon):
        """Sets the rank_icon of this DestinyProgressionDefinition.

        For progressions that have it, this is the rank icon we use in the Companion, displayed above the progressions' rank value.  # noqa: E501

        :param rank_icon: The rank_icon of this DestinyProgressionDefinition.  # noqa: E501
        :type: str
        """

        self._rank_icon = rank_icon

    @property
    def hash(self):
        """Gets the hash of this DestinyProgressionDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyProgressionDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyProgressionDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyProgressionDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyProgressionDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyProgressionDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyProgressionDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyProgressionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyProgressionDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyProgressionDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyProgressionDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
