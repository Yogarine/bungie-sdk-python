# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyActivityGraphNodeDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_id': 'int',
        'override_display': 'DestinyDisplayPropertiesDefinition',
        'position': 'DestinyPositionDefinition',
        'featuring_states': 'list[DestinyActivityGraphNodeFeaturingStateDefinition]',
        'activities': 'list[DestinyActivityGraphNodeActivityDefinition]',
        'states': 'list[DestinyActivityGraphNodeStateEntry]'
    }

    attribute_map = {
        'node_id': 'nodeId',
        'override_display': 'overrideDisplay',
        'position': 'position',
        'featuring_states': 'featuringStates',
        'activities': 'activities',
        'states': 'states'
    }

    def __init__(self, node_id=None, override_display=None, position=None, featuring_states=None, activities=None, states=None):  # noqa: E501
        """DestinyActivityGraphNodeDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._node_id = None
        self._override_display = None
        self._position = None
        self._featuring_states = None
        self._activities = None
        self._states = None
        self.discriminator = None

        if node_id is not None:
            self.node_id = node_id
        if override_display is not None:
            self.override_display = override_display
        if position is not None:
            self.position = position
        if featuring_states is not None:
            self.featuring_states = featuring_states
        if activities is not None:
            self.activities = activities
        if states is not None:
            self.states = states

    @property
    def node_id(self):
        """Gets the node_id of this DestinyActivityGraphNodeDefinition.  # noqa: E501

        An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.  # noqa: E501

        :return: The node_id of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DestinyActivityGraphNodeDefinition.

        An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.  # noqa: E501

        :param node_id: The node_id of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :type: int
        """

        self._node_id = node_id

    @property
    def override_display(self):
        """Gets the override_display of this DestinyActivityGraphNodeDefinition.  # noqa: E501

        The node *may* have display properties that override the active Activity's display properties.  # noqa: E501

        :return: The override_display of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._override_display

    @override_display.setter
    def override_display(self, override_display):
        """Sets the override_display of this DestinyActivityGraphNodeDefinition.

        The node *may* have display properties that override the active Activity's display properties.  # noqa: E501

        :param override_display: The override_display of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._override_display = override_display

    @property
    def position(self):
        """Gets the position of this DestinyActivityGraphNodeDefinition.  # noqa: E501

        The position on the map for this node.  # noqa: E501

        :return: The position of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :rtype: DestinyPositionDefinition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DestinyActivityGraphNodeDefinition.

        The position on the map for this node.  # noqa: E501

        :param position: The position of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :type: DestinyPositionDefinition
        """

        self._position = position

    @property
    def featuring_states(self):
        """Gets the featuring_states of this DestinyActivityGraphNodeDefinition.  # noqa: E501

        The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.  # noqa: E501

        :return: The featuring_states of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :rtype: list[DestinyActivityGraphNodeFeaturingStateDefinition]
        """
        return self._featuring_states

    @featuring_states.setter
    def featuring_states(self, featuring_states):
        """Sets the featuring_states of this DestinyActivityGraphNodeDefinition.

        The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.  # noqa: E501

        :param featuring_states: The featuring_states of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :type: list[DestinyActivityGraphNodeFeaturingStateDefinition]
        """

        self._featuring_states = featuring_states

    @property
    def activities(self):
        """Gets the activities of this DestinyActivityGraphNodeDefinition.  # noqa: E501

        The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.  # noqa: E501

        :return: The activities of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :rtype: list[DestinyActivityGraphNodeActivityDefinition]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this DestinyActivityGraphNodeDefinition.

        The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.  # noqa: E501

        :param activities: The activities of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :type: list[DestinyActivityGraphNodeActivityDefinition]
        """

        self._activities = activities

    @property
    def states(self):
        """Gets the states of this DestinyActivityGraphNodeDefinition.  # noqa: E501

        Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.  # noqa: E501

        :return: The states of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :rtype: list[DestinyActivityGraphNodeStateEntry]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this DestinyActivityGraphNodeDefinition.

        Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.  # noqa: E501

        :param states: The states of this DestinyActivityGraphNodeDefinition.  # noqa: E501
        :type: list[DestinyActivityGraphNodeStateEntry]
        """

        self._states = states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyActivityGraphNodeDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
