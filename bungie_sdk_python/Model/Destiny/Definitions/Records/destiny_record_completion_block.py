# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyRecordCompletionBlock(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partial_completion_objective_count_threshold': 'int',
        'score_value': 'int',
        'should_fire_toast': 'bool',
        'toast_style': 'int'
    }

    attribute_map = {
        'partial_completion_objective_count_threshold': 'partialCompletionObjectiveCountThreshold',
        'score_value': 'ScoreValue',
        'should_fire_toast': 'shouldFireToast',
        'toast_style': 'toastStyle'
    }

    def __init__(self, partial_completion_objective_count_threshold=None, score_value=None, should_fire_toast=None, toast_style=None):  # noqa: E501
        """DestinyRecordCompletionBlock - a model defined in OpenAPI"""  # noqa: E501

        self._partial_completion_objective_count_threshold = None
        self._score_value = None
        self._should_fire_toast = None
        self._toast_style = None
        self.discriminator = None

        if partial_completion_objective_count_threshold is not None:
            self.partial_completion_objective_count_threshold = partial_completion_objective_count_threshold
        if score_value is not None:
            self.score_value = score_value
        if should_fire_toast is not None:
            self.should_fire_toast = should_fire_toast
        if toast_style is not None:
            self.toast_style = toast_style

    @property
    def partial_completion_objective_count_threshold(self):
        """Gets the partial_completion_objective_count_threshold of this DestinyRecordCompletionBlock.  # noqa: E501

        The number of objectives that must be completed before the objective is considered \"complete\"  # noqa: E501

        :return: The partial_completion_objective_count_threshold of this DestinyRecordCompletionBlock.  # noqa: E501
        :rtype: int
        """
        return self._partial_completion_objective_count_threshold

    @partial_completion_objective_count_threshold.setter
    def partial_completion_objective_count_threshold(self, partial_completion_objective_count_threshold):
        """Sets the partial_completion_objective_count_threshold of this DestinyRecordCompletionBlock.

        The number of objectives that must be completed before the objective is considered \"complete\"  # noqa: E501

        :param partial_completion_objective_count_threshold: The partial_completion_objective_count_threshold of this DestinyRecordCompletionBlock.  # noqa: E501
        :type: int
        """

        self._partial_completion_objective_count_threshold = partial_completion_objective_count_threshold

    @property
    def score_value(self):
        """Gets the score_value of this DestinyRecordCompletionBlock.  # noqa: E501


        :return: The score_value of this DestinyRecordCompletionBlock.  # noqa: E501
        :rtype: int
        """
        return self._score_value

    @score_value.setter
    def score_value(self, score_value):
        """Sets the score_value of this DestinyRecordCompletionBlock.


        :param score_value: The score_value of this DestinyRecordCompletionBlock.  # noqa: E501
        :type: int
        """

        self._score_value = score_value

    @property
    def should_fire_toast(self):
        """Gets the should_fire_toast of this DestinyRecordCompletionBlock.  # noqa: E501


        :return: The should_fire_toast of this DestinyRecordCompletionBlock.  # noqa: E501
        :rtype: bool
        """
        return self._should_fire_toast

    @should_fire_toast.setter
    def should_fire_toast(self, should_fire_toast):
        """Sets the should_fire_toast of this DestinyRecordCompletionBlock.


        :param should_fire_toast: The should_fire_toast of this DestinyRecordCompletionBlock.  # noqa: E501
        :type: bool
        """

        self._should_fire_toast = should_fire_toast

    @property
    def toast_style(self):
        """Gets the toast_style of this DestinyRecordCompletionBlock.  # noqa: E501


        :return: The toast_style of this DestinyRecordCompletionBlock.  # noqa: E501
        :rtype: int
        """
        return self._toast_style

    @toast_style.setter
    def toast_style(self, toast_style):
        """Sets the toast_style of this DestinyRecordCompletionBlock.


        :param toast_style: The toast_style of this DestinyRecordCompletionBlock.  # noqa: E501
        :type: int
        """

        self._toast_style = toast_style

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyRecordCompletionBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
