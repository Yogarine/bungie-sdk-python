# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyItemVendorSourceReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vendor_hash': 'int',
        'vendor_item_indexes': 'list[int]'
    }

    attribute_map = {
        'vendor_hash': 'vendorHash',
        'vendor_item_indexes': 'vendorItemIndexes'
    }

    def __init__(self, vendor_hash=None, vendor_item_indexes=None):  # noqa: E501
        """DestinyItemVendorSourceReference - a model defined in OpenAPI"""  # noqa: E501

        self._vendor_hash = None
        self._vendor_item_indexes = None
        self.discriminator = None

        if vendor_hash is not None:
            self.vendor_hash = vendor_hash
        if vendor_item_indexes is not None:
            self.vendor_item_indexes = vendor_item_indexes

    @property
    def vendor_hash(self):
        """Gets the vendor_hash of this DestinyItemVendorSourceReference.  # noqa: E501

        The identifier for the vendor that may sell this item.  # noqa: E501

        :return: The vendor_hash of this DestinyItemVendorSourceReference.  # noqa: E501
        :rtype: int
        """
        return self._vendor_hash

    @vendor_hash.setter
    def vendor_hash(self, vendor_hash):
        """Sets the vendor_hash of this DestinyItemVendorSourceReference.

        The identifier for the vendor that may sell this item.  # noqa: E501

        :param vendor_hash: The vendor_hash of this DestinyItemVendorSourceReference.  # noqa: E501
        :type: int
        """

        self._vendor_hash = vendor_hash

    @property
    def vendor_item_indexes(self):
        """Gets the vendor_item_indexes of this DestinyItemVendorSourceReference.  # noqa: E501

        The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple \"ways\", hence why this is a list. (for instance, a weapon may be \"sold\" as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index)  # noqa: E501

        :return: The vendor_item_indexes of this DestinyItemVendorSourceReference.  # noqa: E501
        :rtype: list[int]
        """
        return self._vendor_item_indexes

    @vendor_item_indexes.setter
    def vendor_item_indexes(self, vendor_item_indexes):
        """Sets the vendor_item_indexes of this DestinyItemVendorSourceReference.

        The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple \"ways\", hence why this is a list. (for instance, a weapon may be \"sold\" as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index)  # noqa: E501

        :param vendor_item_indexes: The vendor_item_indexes of this DestinyItemVendorSourceReference.  # noqa: E501
        :type: list[int]
        """

        self._vendor_item_indexes = vendor_item_indexes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyItemVendorSourceReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
