# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyMilestoneActivityDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conceptual_activity_hash': 'int',
        'variants': 'dict(str, DestinyMilestoneActivityVariantDefinition)'
    }

    attribute_map = {
        'conceptual_activity_hash': 'conceptualActivityHash',
        'variants': 'variants'
    }

    def __init__(self, conceptual_activity_hash=None, variants=None):  # noqa: E501
        """DestinyMilestoneActivityDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._conceptual_activity_hash = None
        self._variants = None
        self.discriminator = None

        if conceptual_activity_hash is not None:
            self.conceptual_activity_hash = conceptual_activity_hash
        if variants is not None:
            self.variants = variants

    @property
    def conceptual_activity_hash(self):
        """Gets the conceptual_activity_hash of this DestinyMilestoneActivityDefinition.  # noqa: E501

        The \"Conceptual\" activity hash. Basically, we picked the lowest level activity and are treating it as the canonical definition of the activity for rendering purposes.  If you care about the specific difficulty modes and variations, use the activities under \"Variants\".  # noqa: E501

        :return: The conceptual_activity_hash of this DestinyMilestoneActivityDefinition.  # noqa: E501
        :rtype: int
        """
        return self._conceptual_activity_hash

    @conceptual_activity_hash.setter
    def conceptual_activity_hash(self, conceptual_activity_hash):
        """Sets the conceptual_activity_hash of this DestinyMilestoneActivityDefinition.

        The \"Conceptual\" activity hash. Basically, we picked the lowest level activity and are treating it as the canonical definition of the activity for rendering purposes.  If you care about the specific difficulty modes and variations, use the activities under \"Variants\".  # noqa: E501

        :param conceptual_activity_hash: The conceptual_activity_hash of this DestinyMilestoneActivityDefinition.  # noqa: E501
        :type: int
        """

        self._conceptual_activity_hash = conceptual_activity_hash

    @property
    def variants(self):
        """Gets the variants of this DestinyMilestoneActivityDefinition.  # noqa: E501

        A milestone-referenced activity can have many variants, such as Tiers or alternative modes of play.  Even if there is only a single variant, the details for these are represented within as a variant definition.  It is assumed that, if this DestinyMilestoneActivityDefinition is active, then all variants should be active.  If a Milestone could ever split the variants' active status conditionally, they should all have their own DestinyMilestoneActivityDefinition instead! The potential duplication will be worth it for the obviousness of processing and use.  # noqa: E501

        :return: The variants of this DestinyMilestoneActivityDefinition.  # noqa: E501
        :rtype: dict(str, DestinyMilestoneActivityVariantDefinition)
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this DestinyMilestoneActivityDefinition.

        A milestone-referenced activity can have many variants, such as Tiers or alternative modes of play.  Even if there is only a single variant, the details for these are represented within as a variant definition.  It is assumed that, if this DestinyMilestoneActivityDefinition is active, then all variants should be active.  If a Milestone could ever split the variants' active status conditionally, they should all have their own DestinyMilestoneActivityDefinition instead! The potential duplication will be worth it for the obviousness of processing and use.  # noqa: E501

        :param variants: The variants of this DestinyMilestoneActivityDefinition.  # noqa: E501
        :type: dict(str, DestinyMilestoneActivityVariantDefinition)
        """

        self._variants = variants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyMilestoneActivityDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
