# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyEquippingBlockDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gearset_item_hash': 'int',
        'unique_label': 'str',
        'unique_label_hash': 'int',
        'equipment_slot_type_hash': 'int',
        'attributes': 'int',
        'ammo_type': 'int',
        'display_strings': 'list[str]'
    }

    attribute_map = {
        'gearset_item_hash': 'gearsetItemHash',
        'unique_label': 'uniqueLabel',
        'unique_label_hash': 'uniqueLabelHash',
        'equipment_slot_type_hash': 'equipmentSlotTypeHash',
        'attributes': 'attributes',
        'ammo_type': 'ammoType',
        'display_strings': 'displayStrings'
    }

    def __init__(self, gearset_item_hash=None, unique_label=None, unique_label_hash=None, equipment_slot_type_hash=None, attributes=None, ammo_type=None, display_strings=None):  # noqa: E501
        """DestinyEquippingBlockDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._gearset_item_hash = None
        self._unique_label = None
        self._unique_label_hash = None
        self._equipment_slot_type_hash = None
        self._attributes = None
        self._ammo_type = None
        self._display_strings = None
        self.discriminator = None

        self.gearset_item_hash = gearset_item_hash
        if unique_label is not None:
            self.unique_label = unique_label
        if unique_label_hash is not None:
            self.unique_label_hash = unique_label_hash
        if equipment_slot_type_hash is not None:
            self.equipment_slot_type_hash = equipment_slot_type_hash
        if attributes is not None:
            self.attributes = attributes
        if ammo_type is not None:
            self.ammo_type = ammo_type
        if display_strings is not None:
            self.display_strings = display_strings

    @property
    def gearset_item_hash(self):
        """Gets the gearset_item_hash of this DestinyEquippingBlockDefinition.  # noqa: E501

        If the item is part of a gearset, this is a reference to that gearset item.  # noqa: E501

        :return: The gearset_item_hash of this DestinyEquippingBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._gearset_item_hash

    @gearset_item_hash.setter
    def gearset_item_hash(self, gearset_item_hash):
        """Sets the gearset_item_hash of this DestinyEquippingBlockDefinition.

        If the item is part of a gearset, this is a reference to that gearset item.  # noqa: E501

        :param gearset_item_hash: The gearset_item_hash of this DestinyEquippingBlockDefinition.  # noqa: E501
        :type: int
        """

        self._gearset_item_hash = gearset_item_hash

    @property
    def unique_label(self):
        """Gets the unique_label of this DestinyEquippingBlockDefinition.  # noqa: E501

        If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).  # noqa: E501

        :return: The unique_label of this DestinyEquippingBlockDefinition.  # noqa: E501
        :rtype: str
        """
        return self._unique_label

    @unique_label.setter
    def unique_label(self, unique_label):
        """Sets the unique_label of this DestinyEquippingBlockDefinition.

        If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).  # noqa: E501

        :param unique_label: The unique_label of this DestinyEquippingBlockDefinition.  # noqa: E501
        :type: str
        """

        self._unique_label = unique_label

    @property
    def unique_label_hash(self):
        """Gets the unique_label_hash of this DestinyEquippingBlockDefinition.  # noqa: E501

        The hash of that unique label. Does not point to a specific definition.  # noqa: E501

        :return: The unique_label_hash of this DestinyEquippingBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._unique_label_hash

    @unique_label_hash.setter
    def unique_label_hash(self, unique_label_hash):
        """Sets the unique_label_hash of this DestinyEquippingBlockDefinition.

        The hash of that unique label. Does not point to a specific definition.  # noqa: E501

        :param unique_label_hash: The unique_label_hash of this DestinyEquippingBlockDefinition.  # noqa: E501
        :type: int
        """

        self._unique_label_hash = unique_label_hash

    @property
    def equipment_slot_type_hash(self):
        """Gets the equipment_slot_type_hash of this DestinyEquippingBlockDefinition.  # noqa: E501

        An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.  # noqa: E501

        :return: The equipment_slot_type_hash of this DestinyEquippingBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._equipment_slot_type_hash

    @equipment_slot_type_hash.setter
    def equipment_slot_type_hash(self, equipment_slot_type_hash):
        """Sets the equipment_slot_type_hash of this DestinyEquippingBlockDefinition.

        An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.  # noqa: E501

        :param equipment_slot_type_hash: The equipment_slot_type_hash of this DestinyEquippingBlockDefinition.  # noqa: E501
        :type: int
        """

        self._equipment_slot_type_hash = equipment_slot_type_hash

    @property
    def attributes(self):
        """Gets the attributes of this DestinyEquippingBlockDefinition.  # noqa: E501

        These are custom attributes on the equippability of the item.  For now, this can only be \"equip on acquire\", which would mean that the item will be automatically equipped as soon as you pick it up.  # noqa: E501

        :return: The attributes of this DestinyEquippingBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DestinyEquippingBlockDefinition.

        These are custom attributes on the equippability of the item.  For now, this can only be \"equip on acquire\", which would mean that the item will be automatically equipped as soon as you pick it up.  # noqa: E501

        :param attributes: The attributes of this DestinyEquippingBlockDefinition.  # noqa: E501
        :type: int
        """

        self._attributes = attributes

    @property
    def ammo_type(self):
        """Gets the ammo_type of this DestinyEquippingBlockDefinition.  # noqa: E501

        Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.  # noqa: E501

        :return: The ammo_type of this DestinyEquippingBlockDefinition.  # noqa: E501
        :rtype: int
        """
        return self._ammo_type

    @ammo_type.setter
    def ammo_type(self, ammo_type):
        """Sets the ammo_type of this DestinyEquippingBlockDefinition.

        Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.  # noqa: E501

        :param ammo_type: The ammo_type of this DestinyEquippingBlockDefinition.  # noqa: E501
        :type: int
        """

        self._ammo_type = ammo_type

    @property
    def display_strings(self):
        """Gets the display_strings of this DestinyEquippingBlockDefinition.  # noqa: E501

        These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.  # noqa: E501

        :return: The display_strings of this DestinyEquippingBlockDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._display_strings

    @display_strings.setter
    def display_strings(self, display_strings):
        """Sets the display_strings of this DestinyEquippingBlockDefinition.

        These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.  # noqa: E501

        :param display_strings: The display_strings of this DestinyEquippingBlockDefinition.  # noqa: E501
        :type: list[str]
        """

        self._display_strings = display_strings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyEquippingBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
