# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinySandboxPerkDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_properties': 'DestinyDisplayPropertiesDefinition',
        'perk_identifier': 'str',
        'is_displayable': 'bool',
        'damage_type': 'int',
        'damage_type_hash': 'int',
        'perk_groups': 'DestinyTalentNodeStepGroups',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'perk_identifier': 'perkIdentifier',
        'is_displayable': 'isDisplayable',
        'damage_type': 'damageType',
        'damage_type_hash': 'damageTypeHash',
        'perk_groups': 'perkGroups',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, perk_identifier=None, is_displayable=None, damage_type=None, damage_type_hash=None, perk_groups=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinySandboxPerkDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._display_properties = None
        self._perk_identifier = None
        self._is_displayable = None
        self._damage_type = None
        self._damage_type_hash = None
        self._perk_groups = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if perk_identifier is not None:
            self.perk_identifier = perk_identifier
        if is_displayable is not None:
            self.is_displayable = is_displayable
        if damage_type is not None:
            self.damage_type = damage_type
        self.damage_type_hash = damage_type_hash
        if perk_groups is not None:
            self.perk_groups = perk_groups
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinySandboxPerkDefinition.  # noqa: E501

        These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.  # noqa: E501

        :return: The display_properties of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: DestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinySandboxPerkDefinition.

        These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.  # noqa: E501

        :param display_properties: The display_properties of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: DestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def perk_identifier(self):
        """Gets the perk_identifier of this DestinySandboxPerkDefinition.  # noqa: E501

        The string identifier for the perk.  # noqa: E501

        :return: The perk_identifier of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._perk_identifier

    @perk_identifier.setter
    def perk_identifier(self, perk_identifier):
        """Sets the perk_identifier of this DestinySandboxPerkDefinition.

        The string identifier for the perk.  # noqa: E501

        :param perk_identifier: The perk_identifier of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: str
        """

        self._perk_identifier = perk_identifier

    @property
    def is_displayable(self):
        """Gets the is_displayable of this DestinySandboxPerkDefinition.  # noqa: E501

        If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.  # noqa: E501

        :return: The is_displayable of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_displayable

    @is_displayable.setter
    def is_displayable(self, is_displayable):
        """Sets the is_displayable of this DestinySandboxPerkDefinition.

        If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.  # noqa: E501

        :param is_displayable: The is_displayable of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: bool
        """

        self._is_displayable = is_displayable

    @property
    def damage_type(self):
        """Gets the damage_type of this DestinySandboxPerkDefinition.  # noqa: E501

        If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.  # noqa: E501

        :return: The damage_type of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: int
        """
        return self._damage_type

    @damage_type.setter
    def damage_type(self, damage_type):
        """Sets the damage_type of this DestinySandboxPerkDefinition.

        If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.  # noqa: E501

        :param damage_type: The damage_type of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: int
        """

        self._damage_type = damage_type

    @property
    def damage_type_hash(self):
        """Gets the damage_type_hash of this DestinySandboxPerkDefinition.  # noqa: E501

        The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.  # noqa: E501

        :return: The damage_type_hash of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: int
        """
        return self._damage_type_hash

    @damage_type_hash.setter
    def damage_type_hash(self, damage_type_hash):
        """Sets the damage_type_hash of this DestinySandboxPerkDefinition.

        The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.  # noqa: E501

        :param damage_type_hash: The damage_type_hash of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: int
        """

        self._damage_type_hash = damage_type_hash

    @property
    def perk_groups(self):
        """Gets the perk_groups of this DestinySandboxPerkDefinition.  # noqa: E501

        An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.  # noqa: E501

        :return: The perk_groups of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: DestinyTalentNodeStepGroups
        """
        return self._perk_groups

    @perk_groups.setter
    def perk_groups(self, perk_groups):
        """Sets the perk_groups of this DestinySandboxPerkDefinition.

        An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.  # noqa: E501

        :param perk_groups: The perk_groups of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: DestinyTalentNodeStepGroups
        """

        self._perk_groups = perk_groups

    @property
    def hash(self):
        """Gets the hash of this DestinySandboxPerkDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinySandboxPerkDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinySandboxPerkDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinySandboxPerkDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinySandboxPerkDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinySandboxPerkDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinySandboxPerkDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinySandboxPerkDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinySandboxPerkDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
