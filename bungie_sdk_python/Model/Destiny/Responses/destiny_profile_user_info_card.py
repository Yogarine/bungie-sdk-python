# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyProfileUserInfoCard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_last_played': 'datetime',
        'applicable_membership_types': 'list[int]',
        'is_overridden': 'bool',
        'is_cross_save_primary': 'bool',
        'supplemental_display_name': 'str',
        'icon_path': 'str',
        'membership_type': 'int',
        'membership_id': 'int',
        'display_name': 'str'
    }

    attribute_map = {
        'date_last_played': 'dateLastPlayed',
        'applicable_membership_types': 'applicableMembershipTypes',
        'is_overridden': 'isOverridden',
        'is_cross_save_primary': 'isCrossSavePrimary',
        'supplemental_display_name': 'supplementalDisplayName',
        'icon_path': 'iconPath',
        'membership_type': 'membershipType',
        'membership_id': 'membershipId',
        'display_name': 'displayName'
    }

    def __init__(self, date_last_played=None, applicable_membership_types=None, is_overridden=None, is_cross_save_primary=None, supplemental_display_name=None, icon_path=None, membership_type=None, membership_id=None, display_name=None):  # noqa: E501
        """DestinyProfileUserInfoCard - a model defined in OpenAPI"""  # noqa: E501

        self._date_last_played = None
        self._applicable_membership_types = None
        self._is_overridden = None
        self._is_cross_save_primary = None
        self._supplemental_display_name = None
        self._icon_path = None
        self._membership_type = None
        self._membership_id = None
        self._display_name = None
        self.discriminator = None

        if date_last_played is not None:
            self.date_last_played = date_last_played
        if applicable_membership_types is not None:
            self.applicable_membership_types = applicable_membership_types
        if is_overridden is not None:
            self.is_overridden = is_overridden
        if is_cross_save_primary is not None:
            self.is_cross_save_primary = is_cross_save_primary
        if supplemental_display_name is not None:
            self.supplemental_display_name = supplemental_display_name
        if icon_path is not None:
            self.icon_path = icon_path
        if membership_type is not None:
            self.membership_type = membership_type
        if membership_id is not None:
            self.membership_id = membership_id
        if display_name is not None:
            self.display_name = display_name

    @property
    def date_last_played(self):
        """Gets the date_last_played of this DestinyProfileUserInfoCard.  # noqa: E501


        :return: The date_last_played of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_played

    @date_last_played.setter
    def date_last_played(self, date_last_played):
        """Sets the date_last_played of this DestinyProfileUserInfoCard.


        :param date_last_played: The date_last_played of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: datetime
        """

        self._date_last_played = date_last_played

    @property
    def applicable_membership_types(self):
        """Gets the applicable_membership_types of this DestinyProfileUserInfoCard.  # noqa: E501

        The list of membership types/Platforms that this Destiny Account can be used on - either its own original platform, or any subservient platforms hooked up to it through Cross Save.  # noqa: E501

        :return: The applicable_membership_types of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: list[int]
        """
        return self._applicable_membership_types

    @applicable_membership_types.setter
    def applicable_membership_types(self, applicable_membership_types):
        """Sets the applicable_membership_types of this DestinyProfileUserInfoCard.

        The list of membership types/Platforms that this Destiny Account can be used on - either its own original platform, or any subservient platforms hooked up to it through Cross Save.  # noqa: E501

        :param applicable_membership_types: The applicable_membership_types of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: list[int]
        """

        self._applicable_membership_types = applicable_membership_types

    @property
    def is_overridden(self):
        """Gets the is_overridden of this DestinyProfileUserInfoCard.  # noqa: E501

        If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.  # noqa: E501

        :return: The is_overridden of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: bool
        """
        return self._is_overridden

    @is_overridden.setter
    def is_overridden(self, is_overridden):
        """Sets the is_overridden of this DestinyProfileUserInfoCard.

        If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.  # noqa: E501

        :param is_overridden: The is_overridden of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: bool
        """

        self._is_overridden = is_overridden

    @property
    def is_cross_save_primary(self):
        """Gets the is_cross_save_primary of this DestinyProfileUserInfoCard.  # noqa: E501

        If true, this account is hooked up as the \"Primary\" cross save account for one or more platforms.  # noqa: E501

        :return: The is_cross_save_primary of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: bool
        """
        return self._is_cross_save_primary

    @is_cross_save_primary.setter
    def is_cross_save_primary(self, is_cross_save_primary):
        """Sets the is_cross_save_primary of this DestinyProfileUserInfoCard.

        If true, this account is hooked up as the \"Primary\" cross save account for one or more platforms.  # noqa: E501

        :param is_cross_save_primary: The is_cross_save_primary of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: bool
        """

        self._is_cross_save_primary = is_cross_save_primary

    @property
    def supplemental_display_name(self):
        """Gets the supplemental_display_name of this DestinyProfileUserInfoCard.  # noqa: E501

        A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.  # noqa: E501

        :return: The supplemental_display_name of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: str
        """
        return self._supplemental_display_name

    @supplemental_display_name.setter
    def supplemental_display_name(self, supplemental_display_name):
        """Sets the supplemental_display_name of this DestinyProfileUserInfoCard.

        A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.  # noqa: E501

        :param supplemental_display_name: The supplemental_display_name of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: str
        """

        self._supplemental_display_name = supplemental_display_name

    @property
    def icon_path(self):
        """Gets the icon_path of this DestinyProfileUserInfoCard.  # noqa: E501

        URL the Icon if available.  # noqa: E501

        :return: The icon_path of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: str
        """
        return self._icon_path

    @icon_path.setter
    def icon_path(self, icon_path):
        """Sets the icon_path of this DestinyProfileUserInfoCard.

        URL the Icon if available.  # noqa: E501

        :param icon_path: The icon_path of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: str
        """

        self._icon_path = icon_path

    @property
    def membership_type(self):
        """Gets the membership_type of this DestinyProfileUserInfoCard.  # noqa: E501

        Type of the membership.  # noqa: E501

        :return: The membership_type of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this DestinyProfileUserInfoCard.

        Type of the membership.  # noqa: E501

        :param membership_type: The membership_type of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: int
        """

        self._membership_type = membership_type

    @property
    def membership_id(self):
        """Gets the membership_id of this DestinyProfileUserInfoCard.  # noqa: E501

        Membership ID as they user is known in the Accounts service  # noqa: E501

        :return: The membership_id of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this DestinyProfileUserInfoCard.

        Membership ID as they user is known in the Accounts service  # noqa: E501

        :param membership_id: The membership_id of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: int
        """

        self._membership_id = membership_id

    @property
    def display_name(self):
        """Gets the display_name of this DestinyProfileUserInfoCard.  # noqa: E501

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.  # noqa: E501

        :return: The display_name of this DestinyProfileUserInfoCard.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DestinyProfileUserInfoCard.

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.  # noqa: E501

        :param display_name: The display_name of this DestinyProfileUserInfoCard.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyProfileUserInfoCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
