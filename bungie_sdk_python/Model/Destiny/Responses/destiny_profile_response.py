# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyProfileResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vendor_receipts': 'SingleComponentResponseOfDestinyVendorReceiptsComponent',
        'profile_inventory': 'SingleComponentResponseOfDestinyInventoryComponent',
        'profile_currencies': 'SingleComponentResponseOfDestinyInventoryComponent',
        'profile': 'SingleComponentResponseOfDestinyProfileComponent',
        'platform_silver': 'SingleComponentResponseOfDestinyPlatformSilverComponent',
        'profile_kiosks': 'SingleComponentResponseOfDestinyKiosksComponent',
        'profile_plug_sets': 'SingleComponentResponseOfDestinyPlugSetsComponent',
        'profile_progression': 'SingleComponentResponseOfDestinyProfileProgressionComponent',
        'profile_presentation_nodes': 'SingleComponentResponseOfDestinyPresentationNodesComponent',
        'profile_records': 'SingleComponentResponseOfDestinyProfileRecordsComponent',
        'profile_collectibles': 'SingleComponentResponseOfDestinyProfileCollectiblesComponent',
        'characters': 'DictionaryComponentResponseOfint64AndDestinyCharacterComponent',
        'character_inventories': 'DictionaryComponentResponseOfint64AndDestinyInventoryComponent',
        'character_progressions': 'DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent',
        'character_render_data': 'DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent',
        'character_activities': 'DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent',
        'character_equipment': 'DictionaryComponentResponseOfint64AndDestinyInventoryComponent',
        'character_kiosks': 'DictionaryComponentResponseOfint64AndDestinyKiosksComponent',
        'character_plug_sets': 'DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent',
        'character_uninstanced_item_components': 'dict(str, DestinyBaseItemComponentSetOfuint32)',
        'character_presentation_nodes': 'DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent',
        'character_records': 'DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent',
        'character_collectibles': 'DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent',
        'item_components': 'DestinyItemComponentSetOfint64',
        'character_currency_lookups': 'DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent'
    }

    attribute_map = {
        'vendor_receipts': 'vendorReceipts',
        'profile_inventory': 'profileInventory',
        'profile_currencies': 'profileCurrencies',
        'profile': 'profile',
        'platform_silver': 'platformSilver',
        'profile_kiosks': 'profileKiosks',
        'profile_plug_sets': 'profilePlugSets',
        'profile_progression': 'profileProgression',
        'profile_presentation_nodes': 'profilePresentationNodes',
        'profile_records': 'profileRecords',
        'profile_collectibles': 'profileCollectibles',
        'characters': 'characters',
        'character_inventories': 'characterInventories',
        'character_progressions': 'characterProgressions',
        'character_render_data': 'characterRenderData',
        'character_activities': 'characterActivities',
        'character_equipment': 'characterEquipment',
        'character_kiosks': 'characterKiosks',
        'character_plug_sets': 'characterPlugSets',
        'character_uninstanced_item_components': 'characterUninstancedItemComponents',
        'character_presentation_nodes': 'characterPresentationNodes',
        'character_records': 'characterRecords',
        'character_collectibles': 'characterCollectibles',
        'item_components': 'itemComponents',
        'character_currency_lookups': 'characterCurrencyLookups'
    }

    def __init__(self, vendor_receipts=None, profile_inventory=None, profile_currencies=None, profile=None, platform_silver=None, profile_kiosks=None, profile_plug_sets=None, profile_progression=None, profile_presentation_nodes=None, profile_records=None, profile_collectibles=None, characters=None, character_inventories=None, character_progressions=None, character_render_data=None, character_activities=None, character_equipment=None, character_kiosks=None, character_plug_sets=None, character_uninstanced_item_components=None, character_presentation_nodes=None, character_records=None, character_collectibles=None, item_components=None, character_currency_lookups=None):  # noqa: E501
        """DestinyProfileResponse - a model defined in OpenAPI"""  # noqa: E501

        self._vendor_receipts = None
        self._profile_inventory = None
        self._profile_currencies = None
        self._profile = None
        self._platform_silver = None
        self._profile_kiosks = None
        self._profile_plug_sets = None
        self._profile_progression = None
        self._profile_presentation_nodes = None
        self._profile_records = None
        self._profile_collectibles = None
        self._characters = None
        self._character_inventories = None
        self._character_progressions = None
        self._character_render_data = None
        self._character_activities = None
        self._character_equipment = None
        self._character_kiosks = None
        self._character_plug_sets = None
        self._character_uninstanced_item_components = None
        self._character_presentation_nodes = None
        self._character_records = None
        self._character_collectibles = None
        self._item_components = None
        self._character_currency_lookups = None
        self.discriminator = None

        if vendor_receipts is not None:
            self.vendor_receipts = vendor_receipts
        if profile_inventory is not None:
            self.profile_inventory = profile_inventory
        if profile_currencies is not None:
            self.profile_currencies = profile_currencies
        if profile is not None:
            self.profile = profile
        if platform_silver is not None:
            self.platform_silver = platform_silver
        if profile_kiosks is not None:
            self.profile_kiosks = profile_kiosks
        if profile_plug_sets is not None:
            self.profile_plug_sets = profile_plug_sets
        if profile_progression is not None:
            self.profile_progression = profile_progression
        if profile_presentation_nodes is not None:
            self.profile_presentation_nodes = profile_presentation_nodes
        if profile_records is not None:
            self.profile_records = profile_records
        if profile_collectibles is not None:
            self.profile_collectibles = profile_collectibles
        if characters is not None:
            self.characters = characters
        if character_inventories is not None:
            self.character_inventories = character_inventories
        if character_progressions is not None:
            self.character_progressions = character_progressions
        if character_render_data is not None:
            self.character_render_data = character_render_data
        if character_activities is not None:
            self.character_activities = character_activities
        if character_equipment is not None:
            self.character_equipment = character_equipment
        if character_kiosks is not None:
            self.character_kiosks = character_kiosks
        if character_plug_sets is not None:
            self.character_plug_sets = character_plug_sets
        if character_uninstanced_item_components is not None:
            self.character_uninstanced_item_components = character_uninstanced_item_components
        if character_presentation_nodes is not None:
            self.character_presentation_nodes = character_presentation_nodes
        if character_records is not None:
            self.character_records = character_records
        if character_collectibles is not None:
            self.character_collectibles = character_collectibles
        if item_components is not None:
            self.item_components = item_components
        if character_currency_lookups is not None:
            self.character_currency_lookups = character_currency_lookups

    @property
    def vendor_receipts(self):
        """Gets the vendor_receipts of this DestinyProfileResponse.  # noqa: E501

        Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...  COMPONENT TYPE: VendorReceipts  # noqa: E501

        :return: The vendor_receipts of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyVendorReceiptsComponent
        """
        return self._vendor_receipts

    @vendor_receipts.setter
    def vendor_receipts(self, vendor_receipts):
        """Sets the vendor_receipts of this DestinyProfileResponse.

        Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...  COMPONENT TYPE: VendorReceipts  # noqa: E501

        :param vendor_receipts: The vendor_receipts of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyVendorReceiptsComponent
        """

        self._vendor_receipts = vendor_receipts

    @property
    def profile_inventory(self):
        """Gets the profile_inventory of this DestinyProfileResponse.  # noqa: E501

        The profile-level inventory of the Destiny Profile.  COMPONENT TYPE: ProfileInventories  # noqa: E501

        :return: The profile_inventory of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyInventoryComponent
        """
        return self._profile_inventory

    @profile_inventory.setter
    def profile_inventory(self, profile_inventory):
        """Sets the profile_inventory of this DestinyProfileResponse.

        The profile-level inventory of the Destiny Profile.  COMPONENT TYPE: ProfileInventories  # noqa: E501

        :param profile_inventory: The profile_inventory of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyInventoryComponent
        """

        self._profile_inventory = profile_inventory

    @property
    def profile_currencies(self):
        """Gets the profile_currencies of this DestinyProfileResponse.  # noqa: E501

        The profile-level currencies owned by the Destiny Profile.  COMPONENT TYPE: ProfileCurrencies  # noqa: E501

        :return: The profile_currencies of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyInventoryComponent
        """
        return self._profile_currencies

    @profile_currencies.setter
    def profile_currencies(self, profile_currencies):
        """Sets the profile_currencies of this DestinyProfileResponse.

        The profile-level currencies owned by the Destiny Profile.  COMPONENT TYPE: ProfileCurrencies  # noqa: E501

        :param profile_currencies: The profile_currencies of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyInventoryComponent
        """

        self._profile_currencies = profile_currencies

    @property
    def profile(self):
        """Gets the profile of this DestinyProfileResponse.  # noqa: E501

        The basic information about the Destiny Profile (formerly \"Account\").  COMPONENT TYPE: Profiles  # noqa: E501

        :return: The profile of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyProfileComponent
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this DestinyProfileResponse.

        The basic information about the Destiny Profile (formerly \"Account\").  COMPONENT TYPE: Profiles  # noqa: E501

        :param profile: The profile of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyProfileComponent
        """

        self._profile = profile

    @property
    def platform_silver(self):
        """Gets the platform_silver of this DestinyProfileResponse.  # noqa: E501

        Silver quantities for any platform on which this Profile plays destiny.   COMPONENT TYPE: PlatformSilver  # noqa: E501

        :return: The platform_silver of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyPlatformSilverComponent
        """
        return self._platform_silver

    @platform_silver.setter
    def platform_silver(self, platform_silver):
        """Sets the platform_silver of this DestinyProfileResponse.

        Silver quantities for any platform on which this Profile plays destiny.   COMPONENT TYPE: PlatformSilver  # noqa: E501

        :param platform_silver: The platform_silver of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyPlatformSilverComponent
        """

        self._platform_silver = platform_silver

    @property
    def profile_kiosks(self):
        """Gets the profile_kiosks of this DestinyProfileResponse.  # noqa: E501

        Items available from Kiosks that are available Profile-wide (i.e. across all characters)  This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :return: The profile_kiosks of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyKiosksComponent
        """
        return self._profile_kiosks

    @profile_kiosks.setter
    def profile_kiosks(self, profile_kiosks):
        """Sets the profile_kiosks of this DestinyProfileResponse.

        Items available from Kiosks that are available Profile-wide (i.e. across all characters)  This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :param profile_kiosks: The profile_kiosks of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyKiosksComponent
        """

        self._profile_kiosks = profile_kiosks

    @property
    def profile_plug_sets(self):
        """Gets the profile_plug_sets of this DestinyProfileResponse.  # noqa: E501

        When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets  # noqa: E501

        :return: The profile_plug_sets of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyPlugSetsComponent
        """
        return self._profile_plug_sets

    @profile_plug_sets.setter
    def profile_plug_sets(self, profile_plug_sets):
        """Sets the profile_plug_sets of this DestinyProfileResponse.

        When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets  # noqa: E501

        :param profile_plug_sets: The profile_plug_sets of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyPlugSetsComponent
        """

        self._profile_plug_sets = profile_plug_sets

    @property
    def profile_progression(self):
        """Gets the profile_progression of this DestinyProfileResponse.  # noqa: E501

        When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.  COMPONENT TYPE: ProfileProgression  # noqa: E501

        :return: The profile_progression of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyProfileProgressionComponent
        """
        return self._profile_progression

    @profile_progression.setter
    def profile_progression(self, profile_progression):
        """Sets the profile_progression of this DestinyProfileResponse.

        When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.  COMPONENT TYPE: ProfileProgression  # noqa: E501

        :param profile_progression: The profile_progression of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyProfileProgressionComponent
        """

        self._profile_progression = profile_progression

    @property
    def profile_presentation_nodes(self):
        """Gets the profile_presentation_nodes of this DestinyProfileResponse.  # noqa: E501

        COMPONENT TYPE: PresentationNodes  # noqa: E501

        :return: The profile_presentation_nodes of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyPresentationNodesComponent
        """
        return self._profile_presentation_nodes

    @profile_presentation_nodes.setter
    def profile_presentation_nodes(self, profile_presentation_nodes):
        """Sets the profile_presentation_nodes of this DestinyProfileResponse.

        COMPONENT TYPE: PresentationNodes  # noqa: E501

        :param profile_presentation_nodes: The profile_presentation_nodes of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyPresentationNodesComponent
        """

        self._profile_presentation_nodes = profile_presentation_nodes

    @property
    def profile_records(self):
        """Gets the profile_records of this DestinyProfileResponse.  # noqa: E501

        COMPONENT TYPE: Records  # noqa: E501

        :return: The profile_records of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyProfileRecordsComponent
        """
        return self._profile_records

    @profile_records.setter
    def profile_records(self, profile_records):
        """Sets the profile_records of this DestinyProfileResponse.

        COMPONENT TYPE: Records  # noqa: E501

        :param profile_records: The profile_records of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyProfileRecordsComponent
        """

        self._profile_records = profile_records

    @property
    def profile_collectibles(self):
        """Gets the profile_collectibles of this DestinyProfileResponse.  # noqa: E501

        COMPONENT TYPE: Collectibles  # noqa: E501

        :return: The profile_collectibles of this DestinyProfileResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyProfileCollectiblesComponent
        """
        return self._profile_collectibles

    @profile_collectibles.setter
    def profile_collectibles(self, profile_collectibles):
        """Sets the profile_collectibles of this DestinyProfileResponse.

        COMPONENT TYPE: Collectibles  # noqa: E501

        :param profile_collectibles: The profile_collectibles of this DestinyProfileResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyProfileCollectiblesComponent
        """

        self._profile_collectibles = profile_collectibles

    @property
    def characters(self):
        """Gets the characters of this DestinyProfileResponse.  # noqa: E501

        Basic information about each character, keyed by the CharacterId.  COMPONENT TYPE: Characters  # noqa: E501

        :return: The characters of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyCharacterComponent
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this DestinyProfileResponse.

        Basic information about each character, keyed by the CharacterId.  COMPONENT TYPE: Characters  # noqa: E501

        :param characters: The characters of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyCharacterComponent
        """

        self._characters = characters

    @property
    def character_inventories(self):
        """Gets the character_inventories of this DestinyProfileResponse.  # noqa: E501

        The character-level non-equipped inventory items, keyed by the Character's Id.  COMPONENT TYPE: CharacterInventories  # noqa: E501

        :return: The character_inventories of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyInventoryComponent
        """
        return self._character_inventories

    @character_inventories.setter
    def character_inventories(self, character_inventories):
        """Sets the character_inventories of this DestinyProfileResponse.

        The character-level non-equipped inventory items, keyed by the Character's Id.  COMPONENT TYPE: CharacterInventories  # noqa: E501

        :param character_inventories: The character_inventories of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyInventoryComponent
        """

        self._character_inventories = character_inventories

    @property
    def character_progressions(self):
        """Gets the character_progressions of this DestinyProfileResponse.  # noqa: E501

        Character-level progression data, keyed by the Character's Id.  COMPONENT TYPE: CharacterProgressions  # noqa: E501

        :return: The character_progressions of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent
        """
        return self._character_progressions

    @character_progressions.setter
    def character_progressions(self, character_progressions):
        """Sets the character_progressions of this DestinyProfileResponse.

        Character-level progression data, keyed by the Character's Id.  COMPONENT TYPE: CharacterProgressions  # noqa: E501

        :param character_progressions: The character_progressions of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent
        """

        self._character_progressions = character_progressions

    @property
    def character_render_data(self):
        """Gets the character_render_data of this DestinyProfileResponse.  # noqa: E501

        Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.  COMPONENT TYPE: CharacterRenderData  # noqa: E501

        :return: The character_render_data of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent
        """
        return self._character_render_data

    @character_render_data.setter
    def character_render_data(self, character_render_data):
        """Sets the character_render_data of this DestinyProfileResponse.

        Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.  COMPONENT TYPE: CharacterRenderData  # noqa: E501

        :param character_render_data: The character_render_data of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent
        """

        self._character_render_data = character_render_data

    @property
    def character_activities(self):
        """Gets the character_activities of this DestinyProfileResponse.  # noqa: E501

        Character activity data - the activities available to this character and its status, keyed by the Character's Id.  COMPONENT TYPE: CharacterActivities  # noqa: E501

        :return: The character_activities of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent
        """
        return self._character_activities

    @character_activities.setter
    def character_activities(self, character_activities):
        """Sets the character_activities of this DestinyProfileResponse.

        Character activity data - the activities available to this character and its status, keyed by the Character's Id.  COMPONENT TYPE: CharacterActivities  # noqa: E501

        :param character_activities: The character_activities of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent
        """

        self._character_activities = character_activities

    @property
    def character_equipment(self):
        """Gets the character_equipment of this DestinyProfileResponse.  # noqa: E501

        The character's equipped items, keyed by the Character's Id.  COMPONENT TYPE: CharacterEquipment  # noqa: E501

        :return: The character_equipment of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyInventoryComponent
        """
        return self._character_equipment

    @character_equipment.setter
    def character_equipment(self, character_equipment):
        """Sets the character_equipment of this DestinyProfileResponse.

        The character's equipped items, keyed by the Character's Id.  COMPONENT TYPE: CharacterEquipment  # noqa: E501

        :param character_equipment: The character_equipment of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyInventoryComponent
        """

        self._character_equipment = character_equipment

    @property
    def character_kiosks(self):
        """Gets the character_kiosks of this DestinyProfileResponse.  # noqa: E501

        Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.  This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :return: The character_kiosks of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyKiosksComponent
        """
        return self._character_kiosks

    @character_kiosks.setter
    def character_kiosks(self, character_kiosks):
        """Sets the character_kiosks of this DestinyProfileResponse.

        Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.  This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :param character_kiosks: The character_kiosks of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyKiosksComponent
        """

        self._character_kiosks = character_kiosks

    @property
    def character_plug_sets(self):
        """Gets the character_plug_sets of this DestinyProfileResponse.  # noqa: E501

        When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets  # noqa: E501

        :return: The character_plug_sets of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent
        """
        return self._character_plug_sets

    @character_plug_sets.setter
    def character_plug_sets(self, character_plug_sets):
        """Sets the character_plug_sets of this DestinyProfileResponse.

        When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets  # noqa: E501

        :param character_plug_sets: The character_plug_sets of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent
        """

        self._character_plug_sets = character_plug_sets

    @property
    def character_uninstanced_item_components(self):
        """Gets the character_uninstanced_item_components of this DestinyProfileResponse.  # noqa: E501

        Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that's happening under the surface?  Let's talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.  At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.  Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus \"itemComponents\" was all that you needed: it was keyed by item's instance IDs and provided the stateful information you needed inside.  Unfortunately, we don't live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it's in Account-level inventory - and the values related to that item's state in relation to the given character.  To give a concrete example, look at a Moments of Triumph bounty. They exist in a character's inventory, and show/care about a character's progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.  I'm not crying, you're crying Okay we're both crying but it's going to be okay I promise Actually I shouldn't promise that, I don't know if it's going to be okay  # noqa: E501

        :return: The character_uninstanced_item_components of this DestinyProfileResponse.  # noqa: E501
        :rtype: dict(str, DestinyBaseItemComponentSetOfuint32)
        """
        return self._character_uninstanced_item_components

    @character_uninstanced_item_components.setter
    def character_uninstanced_item_components(self, character_uninstanced_item_components):
        """Sets the character_uninstanced_item_components of this DestinyProfileResponse.

        Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that's happening under the surface?  Let's talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.  At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.  Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus \"itemComponents\" was all that you needed: it was keyed by item's instance IDs and provided the stateful information you needed inside.  Unfortunately, we don't live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it's in Account-level inventory - and the values related to that item's state in relation to the given character.  To give a concrete example, look at a Moments of Triumph bounty. They exist in a character's inventory, and show/care about a character's progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.  I'm not crying, you're crying Okay we're both crying but it's going to be okay I promise Actually I shouldn't promise that, I don't know if it's going to be okay  # noqa: E501

        :param character_uninstanced_item_components: The character_uninstanced_item_components of this DestinyProfileResponse.  # noqa: E501
        :type: dict(str, DestinyBaseItemComponentSetOfuint32)
        """

        self._character_uninstanced_item_components = character_uninstanced_item_components

    @property
    def character_presentation_nodes(self):
        """Gets the character_presentation_nodes of this DestinyProfileResponse.  # noqa: E501

        COMPONENT TYPE: PresentationNodes  # noqa: E501

        :return: The character_presentation_nodes of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent
        """
        return self._character_presentation_nodes

    @character_presentation_nodes.setter
    def character_presentation_nodes(self, character_presentation_nodes):
        """Sets the character_presentation_nodes of this DestinyProfileResponse.

        COMPONENT TYPE: PresentationNodes  # noqa: E501

        :param character_presentation_nodes: The character_presentation_nodes of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent
        """

        self._character_presentation_nodes = character_presentation_nodes

    @property
    def character_records(self):
        """Gets the character_records of this DestinyProfileResponse.  # noqa: E501

        COMPONENT TYPE: Records  # noqa: E501

        :return: The character_records of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent
        """
        return self._character_records

    @character_records.setter
    def character_records(self, character_records):
        """Sets the character_records of this DestinyProfileResponse.

        COMPONENT TYPE: Records  # noqa: E501

        :param character_records: The character_records of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent
        """

        self._character_records = character_records

    @property
    def character_collectibles(self):
        """Gets the character_collectibles of this DestinyProfileResponse.  # noqa: E501

        COMPONENT TYPE: Collectibles  # noqa: E501

        :return: The character_collectibles of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent
        """
        return self._character_collectibles

    @character_collectibles.setter
    def character_collectibles(self, character_collectibles):
        """Sets the character_collectibles of this DestinyProfileResponse.

        COMPONENT TYPE: Collectibles  # noqa: E501

        :param character_collectibles: The character_collectibles of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent
        """

        self._character_collectibles = character_collectibles

    @property
    def item_components(self):
        """Gets the item_components of this DestinyProfileResponse.  # noqa: E501

        Information about instanced items across all returned characters, keyed by the item's instance ID.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :return: The item_components of this DestinyProfileResponse.  # noqa: E501
        :rtype: DestinyItemComponentSetOfint64
        """
        return self._item_components

    @item_components.setter
    def item_components(self, item_components):
        """Sets the item_components of this DestinyProfileResponse.

        Information about instanced items across all returned characters, keyed by the item's instance ID.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :param item_components: The item_components of this DestinyProfileResponse.  # noqa: E501
        :type: DestinyItemComponentSetOfint64
        """

        self._item_components = item_components

    @property
    def character_currency_lookups(self):
        """Gets the character_currency_lookups of this DestinyProfileResponse.  # noqa: E501

        A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups  # noqa: E501

        :return: The character_currency_lookups of this DestinyProfileResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent
        """
        return self._character_currency_lookups

    @character_currency_lookups.setter
    def character_currency_lookups(self, character_currency_lookups):
        """Sets the character_currency_lookups of this DestinyProfileResponse.

        A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups  # noqa: E501

        :param character_currency_lookups: The character_currency_lookups of this DestinyProfileResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent
        """

        self._character_currency_lookups = character_currency_lookups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
