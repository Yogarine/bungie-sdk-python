# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyErrorProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_code': 'int',
        'info_card': 'UserInfoCard'
    }

    attribute_map = {
        'error_code': 'errorCode',
        'info_card': 'infoCard'
    }

    def __init__(self, error_code=None, info_card=None):  # noqa: E501
        """DestinyErrorProfile - a model defined in OpenAPI"""  # noqa: E501

        self._error_code = None
        self._info_card = None
        self.discriminator = None

        if error_code is not None:
            self.error_code = error_code
        if info_card is not None:
            self.info_card = info_card

    @property
    def error_code(self):
        """Gets the error_code of this DestinyErrorProfile.  # noqa: E501

        The error that we encountered. You should be able to look up localized text to show to the user for these failures.  # noqa: E501

        :return: The error_code of this DestinyErrorProfile.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this DestinyErrorProfile.

        The error that we encountered. You should be able to look up localized text to show to the user for these failures.  # noqa: E501

        :param error_code: The error_code of this DestinyErrorProfile.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def info_card(self):
        """Gets the info_card of this DestinyErrorProfile.  # noqa: E501

        Basic info about the account that failed. Don't expect anything other than membership ID, Membership Type, and displayName to be populated.  # noqa: E501

        :return: The info_card of this DestinyErrorProfile.  # noqa: E501
        :rtype: UserInfoCard
        """
        return self._info_card

    @info_card.setter
    def info_card(self, info_card):
        """Sets the info_card of this DestinyErrorProfile.

        Basic info about the account that failed. Don't expect anything other than membership ID, Membership Type, and displayName to be populated.  # noqa: E501

        :param info_card: The info_card of this DestinyErrorProfile.  # noqa: E501
        :type: UserInfoCard
        """

        self._info_card = info_card

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyErrorProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
