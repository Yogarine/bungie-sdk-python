# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyPublicVendorsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vendor_groups': 'SingleComponentResponseOfDestinyVendorGroupComponent',
        'vendors': 'DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent',
        'categories': 'DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent',
        'sales': 'DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent'
    }

    attribute_map = {
        'vendor_groups': 'vendorGroups',
        'vendors': 'vendors',
        'categories': 'categories',
        'sales': 'sales'
    }

    def __init__(self, vendor_groups=None, vendors=None, categories=None, sales=None):  # noqa: E501
        """DestinyPublicVendorsResponse - a model defined in OpenAPI"""  # noqa: E501

        self._vendor_groups = None
        self._vendors = None
        self._categories = None
        self._sales = None
        self.discriminator = None

        if vendor_groups is not None:
            self.vendor_groups = vendor_groups
        if vendors is not None:
            self.vendors = vendors
        if categories is not None:
            self.categories = categories
        if sales is not None:
            self.sales = sales

    @property
    def vendor_groups(self):
        """Gets the vendor_groups of this DestinyPublicVendorsResponse.  # noqa: E501

        For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.  COMPONENT TYPE: Vendors  # noqa: E501

        :return: The vendor_groups of this DestinyPublicVendorsResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyVendorGroupComponent
        """
        return self._vendor_groups

    @vendor_groups.setter
    def vendor_groups(self, vendor_groups):
        """Sets the vendor_groups of this DestinyPublicVendorsResponse.

        For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.  COMPONENT TYPE: Vendors  # noqa: E501

        :param vendor_groups: The vendor_groups of this DestinyPublicVendorsResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyVendorGroupComponent
        """

        self._vendor_groups = vendor_groups

    @property
    def vendors(self):
        """Gets the vendors of this DestinyPublicVendorsResponse.  # noqa: E501

        The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.  COMPONENT TYPE: Vendors  # noqa: E501

        :return: The vendors of this DestinyPublicVendorsResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this DestinyPublicVendorsResponse.

        The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.  COMPONENT TYPE: Vendors  # noqa: E501

        :param vendors: The vendors of this DestinyPublicVendorsResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent
        """

        self._vendors = vendors

    @property
    def categories(self):
        """Gets the categories of this DestinyPublicVendorsResponse.  # noqa: E501

        Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.  COMPONENT TYPE: VendorCategories  # noqa: E501

        :return: The categories of this DestinyPublicVendorsResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this DestinyPublicVendorsResponse.

        Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.  COMPONENT TYPE: VendorCategories  # noqa: E501

        :param categories: The categories of this DestinyPublicVendorsResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent
        """

        self._categories = categories

    @property
    def sales(self):
        """Gets the sales of this DestinyPublicVendorsResponse.  # noqa: E501

        Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.  Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.  COMPONENT TYPE: VendorSales  # noqa: E501

        :return: The sales of this DestinyPublicVendorsResponse.  # noqa: E501
        :rtype: DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this DestinyPublicVendorsResponse.

        Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.  Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.  COMPONENT TYPE: VendorSales  # noqa: E501

        :param sales: The sales of this DestinyPublicVendorsResponse.  # noqa: E501
        :type: DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent
        """

        self._sales = sales

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyPublicVendorsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
