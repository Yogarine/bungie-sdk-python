# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DestinyCharacterResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inventory': 'SingleComponentResponseOfDestinyInventoryComponent',
        'character': 'SingleComponentResponseOfDestinyCharacterComponent',
        'progressions': 'SingleComponentResponseOfDestinyCharacterProgressionComponent',
        'render_data': 'SingleComponentResponseOfDestinyCharacterRenderComponent',
        'activities': 'SingleComponentResponseOfDestinyCharacterActivitiesComponent',
        'equipment': 'SingleComponentResponseOfDestinyInventoryComponent',
        'kiosks': 'SingleComponentResponseOfDestinyKiosksComponent',
        'plug_sets': 'SingleComponentResponseOfDestinyPlugSetsComponent',
        'presentation_nodes': 'SingleComponentResponseOfDestinyPresentationNodesComponent',
        'records': 'SingleComponentResponseOfDestinyCharacterRecordsComponent',
        'collectibles': 'SingleComponentResponseOfDestinyCollectiblesComponent',
        'item_components': 'DestinyItemComponentSetOfint64',
        'uninstanced_item_components': 'DestinyBaseItemComponentSetOfuint32',
        'currency_lookups': 'SingleComponentResponseOfDestinyCurrenciesComponent'
    }

    attribute_map = {
        'inventory': 'inventory',
        'character': 'character',
        'progressions': 'progressions',
        'render_data': 'renderData',
        'activities': 'activities',
        'equipment': 'equipment',
        'kiosks': 'kiosks',
        'plug_sets': 'plugSets',
        'presentation_nodes': 'presentationNodes',
        'records': 'records',
        'collectibles': 'collectibles',
        'item_components': 'itemComponents',
        'uninstanced_item_components': 'uninstancedItemComponents',
        'currency_lookups': 'currencyLookups'
    }

    def __init__(self, inventory=None, character=None, progressions=None, render_data=None, activities=None, equipment=None, kiosks=None, plug_sets=None, presentation_nodes=None, records=None, collectibles=None, item_components=None, uninstanced_item_components=None, currency_lookups=None):  # noqa: E501
        """DestinyCharacterResponse - a model defined in OpenAPI"""  # noqa: E501

        self._inventory = None
        self._character = None
        self._progressions = None
        self._render_data = None
        self._activities = None
        self._equipment = None
        self._kiosks = None
        self._plug_sets = None
        self._presentation_nodes = None
        self._records = None
        self._collectibles = None
        self._item_components = None
        self._uninstanced_item_components = None
        self._currency_lookups = None
        self.discriminator = None

        if inventory is not None:
            self.inventory = inventory
        if character is not None:
            self.character = character
        if progressions is not None:
            self.progressions = progressions
        if render_data is not None:
            self.render_data = render_data
        if activities is not None:
            self.activities = activities
        if equipment is not None:
            self.equipment = equipment
        if kiosks is not None:
            self.kiosks = kiosks
        if plug_sets is not None:
            self.plug_sets = plug_sets
        if presentation_nodes is not None:
            self.presentation_nodes = presentation_nodes
        if records is not None:
            self.records = records
        if collectibles is not None:
            self.collectibles = collectibles
        if item_components is not None:
            self.item_components = item_components
        if uninstanced_item_components is not None:
            self.uninstanced_item_components = uninstanced_item_components
        if currency_lookups is not None:
            self.currency_lookups = currency_lookups

    @property
    def inventory(self):
        """Gets the inventory of this DestinyCharacterResponse.  # noqa: E501

        The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories  # noqa: E501

        :return: The inventory of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyInventoryComponent
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this DestinyCharacterResponse.

        The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories  # noqa: E501

        :param inventory: The inventory of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyInventoryComponent
        """

        self._inventory = inventory

    @property
    def character(self):
        """Gets the character of this DestinyCharacterResponse.  # noqa: E501

        Base information about the character in question.  COMPONENT TYPE: Characters  # noqa: E501

        :return: The character of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCharacterComponent
        """
        return self._character

    @character.setter
    def character(self, character):
        """Sets the character of this DestinyCharacterResponse.

        Base information about the character in question.  COMPONENT TYPE: Characters  # noqa: E501

        :param character: The character of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCharacterComponent
        """

        self._character = character

    @property
    def progressions(self):
        """Gets the progressions of this DestinyCharacterResponse.  # noqa: E501

        Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions  # noqa: E501

        :return: The progressions of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCharacterProgressionComponent
        """
        return self._progressions

    @progressions.setter
    def progressions(self, progressions):
        """Sets the progressions of this DestinyCharacterResponse.

        Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions  # noqa: E501

        :param progressions: The progressions of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCharacterProgressionComponent
        """

        self._progressions = progressions

    @property
    def render_data(self):
        """Gets the render_data of this DestinyCharacterResponse.  # noqa: E501

        Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData  # noqa: E501

        :return: The render_data of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCharacterRenderComponent
        """
        return self._render_data

    @render_data.setter
    def render_data(self, render_data):
        """Sets the render_data of this DestinyCharacterResponse.

        Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData  # noqa: E501

        :param render_data: The render_data of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCharacterRenderComponent
        """

        self._render_data = render_data

    @property
    def activities(self):
        """Gets the activities of this DestinyCharacterResponse.  # noqa: E501

        Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities  # noqa: E501

        :return: The activities of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCharacterActivitiesComponent
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this DestinyCharacterResponse.

        Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities  # noqa: E501

        :param activities: The activities of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCharacterActivitiesComponent
        """

        self._activities = activities

    @property
    def equipment(self):
        """Gets the equipment of this DestinyCharacterResponse.  # noqa: E501

        Equipped items on the character.  COMPONENT TYPE: CharacterEquipment  # noqa: E501

        :return: The equipment of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyInventoryComponent
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this DestinyCharacterResponse.

        Equipped items on the character.  COMPONENT TYPE: CharacterEquipment  # noqa: E501

        :param equipment: The equipment of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyInventoryComponent
        """

        self._equipment = equipment

    @property
    def kiosks(self):
        """Gets the kiosks of this DestinyCharacterResponse.  # noqa: E501

        Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks  # noqa: E501

        :return: The kiosks of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyKiosksComponent
        """
        return self._kiosks

    @kiosks.setter
    def kiosks(self, kiosks):
        """Sets the kiosks of this DestinyCharacterResponse.

        Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks  # noqa: E501

        :param kiosks: The kiosks of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyKiosksComponent
        """

        self._kiosks = kiosks

    @property
    def plug_sets(self):
        """Gets the plug_sets of this DestinyCharacterResponse.  # noqa: E501

        When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets  # noqa: E501

        :return: The plug_sets of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyPlugSetsComponent
        """
        return self._plug_sets

    @plug_sets.setter
    def plug_sets(self, plug_sets):
        """Sets the plug_sets of this DestinyCharacterResponse.

        When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets  # noqa: E501

        :param plug_sets: The plug_sets of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyPlugSetsComponent
        """

        self._plug_sets = plug_sets

    @property
    def presentation_nodes(self):
        """Gets the presentation_nodes of this DestinyCharacterResponse.  # noqa: E501

        COMPONENT TYPE: PresentationNodes  # noqa: E501

        :return: The presentation_nodes of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyPresentationNodesComponent
        """
        return self._presentation_nodes

    @presentation_nodes.setter
    def presentation_nodes(self, presentation_nodes):
        """Sets the presentation_nodes of this DestinyCharacterResponse.

        COMPONENT TYPE: PresentationNodes  # noqa: E501

        :param presentation_nodes: The presentation_nodes of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyPresentationNodesComponent
        """

        self._presentation_nodes = presentation_nodes

    @property
    def records(self):
        """Gets the records of this DestinyCharacterResponse.  # noqa: E501

        COMPONENT TYPE: Records  # noqa: E501

        :return: The records of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCharacterRecordsComponent
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this DestinyCharacterResponse.

        COMPONENT TYPE: Records  # noqa: E501

        :param records: The records of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCharacterRecordsComponent
        """

        self._records = records

    @property
    def collectibles(self):
        """Gets the collectibles of this DestinyCharacterResponse.  # noqa: E501

        COMPONENT TYPE: Collectibles  # noqa: E501

        :return: The collectibles of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCollectiblesComponent
        """
        return self._collectibles

    @collectibles.setter
    def collectibles(self, collectibles):
        """Sets the collectibles of this DestinyCharacterResponse.

        COMPONENT TYPE: Collectibles  # noqa: E501

        :param collectibles: The collectibles of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCollectiblesComponent
        """

        self._collectibles = collectibles

    @property
    def item_components(self):
        """Gets the item_components of this DestinyCharacterResponse.  # noqa: E501

        The set of components belonging to the player's instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :return: The item_components of this DestinyCharacterResponse.  # noqa: E501
        :rtype: DestinyItemComponentSetOfint64
        """
        return self._item_components

    @item_components.setter
    def item_components(self, item_components):
        """Sets the item_components of this DestinyCharacterResponse.

        The set of components belonging to the player's instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :param item_components: The item_components of this DestinyCharacterResponse.  # noqa: E501
        :type: DestinyItemComponentSetOfint64
        """

        self._item_components = item_components

    @property
    def uninstanced_item_components(self):
        """Gets the uninstanced_item_components of this DestinyCharacterResponse.  # noqa: E501

        The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :return: The uninstanced_item_components of this DestinyCharacterResponse.  # noqa: E501
        :rtype: DestinyBaseItemComponentSetOfuint32
        """
        return self._uninstanced_item_components

    @uninstanced_item_components.setter
    def uninstanced_item_components(self, uninstanced_item_components):
        """Sets the uninstanced_item_components of this DestinyCharacterResponse.

        The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :param uninstanced_item_components: The uninstanced_item_components of this DestinyCharacterResponse.  # noqa: E501
        :type: DestinyBaseItemComponentSetOfuint32
        """

        self._uninstanced_item_components = uninstanced_item_components

    @property
    def currency_lookups(self):
        """Gets the currency_lookups of this DestinyCharacterResponse.  # noqa: E501

        A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups  # noqa: E501

        :return: The currency_lookups of this DestinyCharacterResponse.  # noqa: E501
        :rtype: SingleComponentResponseOfDestinyCurrenciesComponent
        """
        return self._currency_lookups

    @currency_lookups.setter
    def currency_lookups(self, currency_lookups):
        """Sets the currency_lookups of this DestinyCharacterResponse.

        A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups  # noqa: E501

        :param currency_lookups: The currency_lookups of this DestinyCharacterResponse.  # noqa: E501
        :type: SingleComponentResponseOfDestinyCurrenciesComponent
        """

        self._currency_lookups = currency_lookups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyCharacterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
