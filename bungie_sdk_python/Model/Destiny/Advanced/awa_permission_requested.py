# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AwaPermissionRequested(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'int',
        'affected_item_id': 'int',
        'membership_type': 'int',
        'character_id': 'int'
    }

    attribute_map = {
        'type': 'type',
        'affected_item_id': 'affectedItemId',
        'membership_type': 'membershipType',
        'character_id': 'characterId'
    }

    def __init__(self, type=None, affected_item_id=None, membership_type=None, character_id=None):  # noqa: E501
        """AwaPermissionRequested - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._affected_item_id = None
        self._membership_type = None
        self._character_id = None
        self.discriminator = None

        if type is not None:
            self.type = type
        self.affected_item_id = affected_item_id
        if membership_type is not None:
            self.membership_type = membership_type
        self.character_id = character_id

    @property
    def type(self):
        """Gets the type of this AwaPermissionRequested.  # noqa: E501

        Type of advanced write action.  # noqa: E501

        :return: The type of this AwaPermissionRequested.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AwaPermissionRequested.

        Type of advanced write action.  # noqa: E501

        :param type: The type of this AwaPermissionRequested.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def affected_item_id(self):
        """Gets the affected_item_id of this AwaPermissionRequested.  # noqa: E501

        Item instance ID the action shall be applied to. This is optional for all but a new AwaType values. Rule of thumb is to provide the item instance ID if one is available.  # noqa: E501

        :return: The affected_item_id of this AwaPermissionRequested.  # noqa: E501
        :rtype: int
        """
        return self._affected_item_id

    @affected_item_id.setter
    def affected_item_id(self, affected_item_id):
        """Sets the affected_item_id of this AwaPermissionRequested.

        Item instance ID the action shall be applied to. This is optional for all but a new AwaType values. Rule of thumb is to provide the item instance ID if one is available.  # noqa: E501

        :param affected_item_id: The affected_item_id of this AwaPermissionRequested.  # noqa: E501
        :type: int
        """

        self._affected_item_id = affected_item_id

    @property
    def membership_type(self):
        """Gets the membership_type of this AwaPermissionRequested.  # noqa: E501

        Destiny membership type of the account to modify.  # noqa: E501

        :return: The membership_type of this AwaPermissionRequested.  # noqa: E501
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this AwaPermissionRequested.

        Destiny membership type of the account to modify.  # noqa: E501

        :param membership_type: The membership_type of this AwaPermissionRequested.  # noqa: E501
        :type: int
        """

        self._membership_type = membership_type

    @property
    def character_id(self):
        """Gets the character_id of this AwaPermissionRequested.  # noqa: E501

        Destiny character ID, if applicable, that will be affected by the action.  # noqa: E501

        :return: The character_id of this AwaPermissionRequested.  # noqa: E501
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this AwaPermissionRequested.

        Destiny character ID, if applicable, that will be affected by the action.  # noqa: E501

        :param character_id: The character_id of this AwaPermissionRequested.  # noqa: E501
        :type: int
        """

        self._character_id = character_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwaPermissionRequested):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
