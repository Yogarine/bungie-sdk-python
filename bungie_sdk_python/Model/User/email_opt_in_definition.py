# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmailOptInDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'value': 'int',
        'set_by_default': 'bool',
        'dependent_subscriptions': 'list[EmailSubscriptionDefinition]'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'set_by_default': 'setByDefault',
        'dependent_subscriptions': 'dependentSubscriptions'
    }

    def __init__(self, name=None, value=None, set_by_default=None, dependent_subscriptions=None):  # noqa: E501
        """EmailOptInDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._value = None
        self._set_by_default = None
        self._dependent_subscriptions = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if set_by_default is not None:
            self.set_by_default = set_by_default
        if dependent_subscriptions is not None:
            self.dependent_subscriptions = dependent_subscriptions

    @property
    def name(self):
        """Gets the name of this EmailOptInDefinition.  # noqa: E501

        The unique identifier for this opt-in category.  # noqa: E501

        :return: The name of this EmailOptInDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmailOptInDefinition.

        The unique identifier for this opt-in category.  # noqa: E501

        :param name: The name of this EmailOptInDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this EmailOptInDefinition.  # noqa: E501

        The flag value for this opt-in category. For historical reasons, this is defined as a flags enum.  # noqa: E501

        :return: The value of this EmailOptInDefinition.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EmailOptInDefinition.

        The flag value for this opt-in category. For historical reasons, this is defined as a flags enum.  # noqa: E501

        :param value: The value of this EmailOptInDefinition.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def set_by_default(self):
        """Gets the set_by_default of this EmailOptInDefinition.  # noqa: E501

        If true, this opt-in setting should be set by default in situations where accounts are created without explicit choices about what they're opting into.  # noqa: E501

        :return: The set_by_default of this EmailOptInDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._set_by_default

    @set_by_default.setter
    def set_by_default(self, set_by_default):
        """Sets the set_by_default of this EmailOptInDefinition.

        If true, this opt-in setting should be set by default in situations where accounts are created without explicit choices about what they're opting into.  # noqa: E501

        :param set_by_default: The set_by_default of this EmailOptInDefinition.  # noqa: E501
        :type: bool
        """

        self._set_by_default = set_by_default

    @property
    def dependent_subscriptions(self):
        """Gets the dependent_subscriptions of this EmailOptInDefinition.  # noqa: E501

        Information about the dependent subscriptions for this opt-in.  # noqa: E501

        :return: The dependent_subscriptions of this EmailOptInDefinition.  # noqa: E501
        :rtype: list[EmailSubscriptionDefinition]
        """
        return self._dependent_subscriptions

    @dependent_subscriptions.setter
    def dependent_subscriptions(self, dependent_subscriptions):
        """Sets the dependent_subscriptions of this EmailOptInDefinition.

        Information about the dependent subscriptions for this opt-in.  # noqa: E501

        :param dependent_subscriptions: The dependent_subscriptions of this EmailOptInDefinition.  # noqa: E501
        :type: list[EmailSubscriptionDefinition]
        """

        self._dependent_subscriptions = dependent_subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailOptInDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
