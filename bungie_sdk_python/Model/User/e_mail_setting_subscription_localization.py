# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EMailSettingSubscriptionLocalization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'unknown_user_description': 'str',
        'registered_user_description': 'str',
        'unregistered_user_description': 'str',
        'unknown_user_action_text': 'str',
        'known_user_action_text': 'str',
        'title': 'str',
        'description': 'str'
    }

    attribute_map = {
        'unknown_user_description': 'unknownUserDescription',
        'registered_user_description': 'registeredUserDescription',
        'unregistered_user_description': 'unregisteredUserDescription',
        'unknown_user_action_text': 'unknownUserActionText',
        'known_user_action_text': 'knownUserActionText',
        'title': 'title',
        'description': 'description'
    }

    def __init__(self, unknown_user_description=None, registered_user_description=None, unregistered_user_description=None, unknown_user_action_text=None, known_user_action_text=None, title=None, description=None):  # noqa: E501
        """EMailSettingSubscriptionLocalization - a model defined in OpenAPI"""  # noqa: E501

        self._unknown_user_description = None
        self._registered_user_description = None
        self._unregistered_user_description = None
        self._unknown_user_action_text = None
        self._known_user_action_text = None
        self._title = None
        self._description = None
        self.discriminator = None

        if unknown_user_description is not None:
            self.unknown_user_description = unknown_user_description
        if registered_user_description is not None:
            self.registered_user_description = registered_user_description
        if unregistered_user_description is not None:
            self.unregistered_user_description = unregistered_user_description
        if unknown_user_action_text is not None:
            self.unknown_user_action_text = unknown_user_action_text
        if known_user_action_text is not None:
            self.known_user_action_text = known_user_action_text
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description

    @property
    def unknown_user_description(self):
        """Gets the unknown_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501


        :return: The unknown_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :rtype: str
        """
        return self._unknown_user_description

    @unknown_user_description.setter
    def unknown_user_description(self, unknown_user_description):
        """Sets the unknown_user_description of this EMailSettingSubscriptionLocalization.


        :param unknown_user_description: The unknown_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :type: str
        """

        self._unknown_user_description = unknown_user_description

    @property
    def registered_user_description(self):
        """Gets the registered_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501


        :return: The registered_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :rtype: str
        """
        return self._registered_user_description

    @registered_user_description.setter
    def registered_user_description(self, registered_user_description):
        """Sets the registered_user_description of this EMailSettingSubscriptionLocalization.


        :param registered_user_description: The registered_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :type: str
        """

        self._registered_user_description = registered_user_description

    @property
    def unregistered_user_description(self):
        """Gets the unregistered_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501


        :return: The unregistered_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :rtype: str
        """
        return self._unregistered_user_description

    @unregistered_user_description.setter
    def unregistered_user_description(self, unregistered_user_description):
        """Sets the unregistered_user_description of this EMailSettingSubscriptionLocalization.


        :param unregistered_user_description: The unregistered_user_description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :type: str
        """

        self._unregistered_user_description = unregistered_user_description

    @property
    def unknown_user_action_text(self):
        """Gets the unknown_user_action_text of this EMailSettingSubscriptionLocalization.  # noqa: E501


        :return: The unknown_user_action_text of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :rtype: str
        """
        return self._unknown_user_action_text

    @unknown_user_action_text.setter
    def unknown_user_action_text(self, unknown_user_action_text):
        """Sets the unknown_user_action_text of this EMailSettingSubscriptionLocalization.


        :param unknown_user_action_text: The unknown_user_action_text of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :type: str
        """

        self._unknown_user_action_text = unknown_user_action_text

    @property
    def known_user_action_text(self):
        """Gets the known_user_action_text of this EMailSettingSubscriptionLocalization.  # noqa: E501


        :return: The known_user_action_text of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :rtype: str
        """
        return self._known_user_action_text

    @known_user_action_text.setter
    def known_user_action_text(self, known_user_action_text):
        """Sets the known_user_action_text of this EMailSettingSubscriptionLocalization.


        :param known_user_action_text: The known_user_action_text of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :type: str
        """

        self._known_user_action_text = known_user_action_text

    @property
    def title(self):
        """Gets the title of this EMailSettingSubscriptionLocalization.  # noqa: E501


        :return: The title of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EMailSettingSubscriptionLocalization.


        :param title: The title of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this EMailSettingSubscriptionLocalization.  # noqa: E501


        :return: The description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EMailSettingSubscriptionLocalization.


        :param description: The description of this EMailSettingSubscriptionLocalization.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMailSettingSubscriptionLocalization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
