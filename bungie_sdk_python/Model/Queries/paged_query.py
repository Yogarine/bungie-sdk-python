# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PagedQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'items_per_page': 'int',
        'current_page': 'int',
        'request_continuation_token': 'str'
    }

    attribute_map = {
        'items_per_page': 'itemsPerPage',
        'current_page': 'currentPage',
        'request_continuation_token': 'requestContinuationToken'
    }

    def __init__(self, items_per_page=None, current_page=None, request_continuation_token=None):  # noqa: E501
        """PagedQuery - a model defined in OpenAPI"""  # noqa: E501

        self._items_per_page = None
        self._current_page = None
        self._request_continuation_token = None
        self.discriminator = None

        if items_per_page is not None:
            self.items_per_page = items_per_page
        if current_page is not None:
            self.current_page = current_page
        if request_continuation_token is not None:
            self.request_continuation_token = request_continuation_token

    @property
    def items_per_page(self):
        """Gets the items_per_page of this PagedQuery.  # noqa: E501


        :return: The items_per_page of this PagedQuery.  # noqa: E501
        :rtype: int
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this PagedQuery.


        :param items_per_page: The items_per_page of this PagedQuery.  # noqa: E501
        :type: int
        """

        self._items_per_page = items_per_page

    @property
    def current_page(self):
        """Gets the current_page of this PagedQuery.  # noqa: E501


        :return: The current_page of this PagedQuery.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this PagedQuery.


        :param current_page: The current_page of this PagedQuery.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def request_continuation_token(self):
        """Gets the request_continuation_token of this PagedQuery.  # noqa: E501


        :return: The request_continuation_token of this PagedQuery.  # noqa: E501
        :rtype: str
        """
        return self._request_continuation_token

    @request_continuation_token.setter
    def request_continuation_token(self, request_continuation_token):
        """Sets the request_continuation_token of this PagedQuery.


        :param request_continuation_token: The request_continuation_token of this PagedQuery.  # noqa: E501
        :type: str
        """

        self._request_continuation_token = request_continuation_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagedQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
