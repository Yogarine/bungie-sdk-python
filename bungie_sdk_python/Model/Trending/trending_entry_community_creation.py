# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TrendingEntryCommunityCreation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'media': 'str',
        'title': 'str',
        'author': 'str',
        'author_membership_id': 'int',
        'post_id': 'int',
        'body': 'str',
        'upvotes': 'int'
    }

    attribute_map = {
        'media': 'media',
        'title': 'title',
        'author': 'author',
        'author_membership_id': 'authorMembershipId',
        'post_id': 'postId',
        'body': 'body',
        'upvotes': 'upvotes'
    }

    def __init__(self, media=None, title=None, author=None, author_membership_id=None, post_id=None, body=None, upvotes=None):  # noqa: E501
        """TrendingEntryCommunityCreation - a model defined in OpenAPI"""  # noqa: E501

        self._media = None
        self._title = None
        self._author = None
        self._author_membership_id = None
        self._post_id = None
        self._body = None
        self._upvotes = None
        self.discriminator = None

        if media is not None:
            self.media = media
        if title is not None:
            self.title = title
        if author is not None:
            self.author = author
        if author_membership_id is not None:
            self.author_membership_id = author_membership_id
        if post_id is not None:
            self.post_id = post_id
        if body is not None:
            self.body = body
        if upvotes is not None:
            self.upvotes = upvotes

    @property
    def media(self):
        """Gets the media of this TrendingEntryCommunityCreation.  # noqa: E501


        :return: The media of this TrendingEntryCommunityCreation.  # noqa: E501
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this TrendingEntryCommunityCreation.


        :param media: The media of this TrendingEntryCommunityCreation.  # noqa: E501
        :type: str
        """

        self._media = media

    @property
    def title(self):
        """Gets the title of this TrendingEntryCommunityCreation.  # noqa: E501


        :return: The title of this TrendingEntryCommunityCreation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TrendingEntryCommunityCreation.


        :param title: The title of this TrendingEntryCommunityCreation.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def author(self):
        """Gets the author of this TrendingEntryCommunityCreation.  # noqa: E501


        :return: The author of this TrendingEntryCommunityCreation.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TrendingEntryCommunityCreation.


        :param author: The author of this TrendingEntryCommunityCreation.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def author_membership_id(self):
        """Gets the author_membership_id of this TrendingEntryCommunityCreation.  # noqa: E501


        :return: The author_membership_id of this TrendingEntryCommunityCreation.  # noqa: E501
        :rtype: int
        """
        return self._author_membership_id

    @author_membership_id.setter
    def author_membership_id(self, author_membership_id):
        """Sets the author_membership_id of this TrendingEntryCommunityCreation.


        :param author_membership_id: The author_membership_id of this TrendingEntryCommunityCreation.  # noqa: E501
        :type: int
        """

        self._author_membership_id = author_membership_id

    @property
    def post_id(self):
        """Gets the post_id of this TrendingEntryCommunityCreation.  # noqa: E501


        :return: The post_id of this TrendingEntryCommunityCreation.  # noqa: E501
        :rtype: int
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id):
        """Sets the post_id of this TrendingEntryCommunityCreation.


        :param post_id: The post_id of this TrendingEntryCommunityCreation.  # noqa: E501
        :type: int
        """

        self._post_id = post_id

    @property
    def body(self):
        """Gets the body of this TrendingEntryCommunityCreation.  # noqa: E501


        :return: The body of this TrendingEntryCommunityCreation.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TrendingEntryCommunityCreation.


        :param body: The body of this TrendingEntryCommunityCreation.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def upvotes(self):
        """Gets the upvotes of this TrendingEntryCommunityCreation.  # noqa: E501


        :return: The upvotes of this TrendingEntryCommunityCreation.  # noqa: E501
        :rtype: int
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes):
        """Sets the upvotes of this TrendingEntryCommunityCreation.


        :param upvotes: The upvotes of this TrendingEntryCommunityCreation.  # noqa: E501
        :type: int
        """

        self._upvotes = upvotes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrendingEntryCommunityCreation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
