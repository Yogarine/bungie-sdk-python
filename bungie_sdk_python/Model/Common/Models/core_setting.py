# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CoreSetting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'str',
        'is_default': 'bool',
        'display_name': 'str',
        'summary': 'str',
        'image_path': 'str',
        'child_settings': 'list[CoreSetting]'
    }

    attribute_map = {
        'identifier': 'identifier',
        'is_default': 'isDefault',
        'display_name': 'displayName',
        'summary': 'summary',
        'image_path': 'imagePath',
        'child_settings': 'childSettings'
    }

    def __init__(self, identifier=None, is_default=None, display_name=None, summary=None, image_path=None, child_settings=None):  # noqa: E501
        """CoreSetting - a model defined in OpenAPI"""  # noqa: E501

        self._identifier = None
        self._is_default = None
        self._display_name = None
        self._summary = None
        self._image_path = None
        self._child_settings = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if is_default is not None:
            self.is_default = is_default
        if display_name is not None:
            self.display_name = display_name
        if summary is not None:
            self.summary = summary
        if image_path is not None:
            self.image_path = image_path
        if child_settings is not None:
            self.child_settings = child_settings

    @property
    def identifier(self):
        """Gets the identifier of this CoreSetting.  # noqa: E501


        :return: The identifier of this CoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CoreSetting.


        :param identifier: The identifier of this CoreSetting.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def is_default(self):
        """Gets the is_default of this CoreSetting.  # noqa: E501


        :return: The is_default of this CoreSetting.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this CoreSetting.


        :param is_default: The is_default of this CoreSetting.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def display_name(self):
        """Gets the display_name of this CoreSetting.  # noqa: E501


        :return: The display_name of this CoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CoreSetting.


        :param display_name: The display_name of this CoreSetting.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def summary(self):
        """Gets the summary of this CoreSetting.  # noqa: E501


        :return: The summary of this CoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CoreSetting.


        :param summary: The summary of this CoreSetting.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def image_path(self):
        """Gets the image_path of this CoreSetting.  # noqa: E501


        :return: The image_path of this CoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """Sets the image_path of this CoreSetting.


        :param image_path: The image_path of this CoreSetting.  # noqa: E501
        :type: str
        """

        self._image_path = image_path

    @property
    def child_settings(self):
        """Gets the child_settings of this CoreSetting.  # noqa: E501


        :return: The child_settings of this CoreSetting.  # noqa: E501
        :rtype: list[CoreSetting]
        """
        return self._child_settings

    @child_settings.setter
    def child_settings(self, child_settings):
        """Sets the child_settings of this CoreSetting.


        :param child_settings: The child_settings of this CoreSetting.  # noqa: E501
        :type: list[CoreSetting]
        """

        self._child_settings = child_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
