# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ContentPreview(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'path': 'str',
        'item_in_set': 'bool',
        'set_tag': 'str',
        'set_nesting': 'int',
        'use_set_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'path': 'path',
        'item_in_set': 'itemInSet',
        'set_tag': 'setTag',
        'set_nesting': 'setNesting',
        'use_set_id': 'useSetId'
    }

    def __init__(self, name=None, path=None, item_in_set=None, set_tag=None, set_nesting=None, use_set_id=None):  # noqa: E501
        """ContentPreview - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._path = None
        self._item_in_set = None
        self._set_tag = None
        self._set_nesting = None
        self._use_set_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if item_in_set is not None:
            self.item_in_set = item_in_set
        if set_tag is not None:
            self.set_tag = set_tag
        if set_nesting is not None:
            self.set_nesting = set_nesting
        if use_set_id is not None:
            self.use_set_id = use_set_id

    @property
    def name(self):
        """Gets the name of this ContentPreview.  # noqa: E501


        :return: The name of this ContentPreview.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentPreview.


        :param name: The name of this ContentPreview.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ContentPreview.  # noqa: E501


        :return: The path of this ContentPreview.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ContentPreview.


        :param path: The path of this ContentPreview.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def item_in_set(self):
        """Gets the item_in_set of this ContentPreview.  # noqa: E501


        :return: The item_in_set of this ContentPreview.  # noqa: E501
        :rtype: bool
        """
        return self._item_in_set

    @item_in_set.setter
    def item_in_set(self, item_in_set):
        """Sets the item_in_set of this ContentPreview.


        :param item_in_set: The item_in_set of this ContentPreview.  # noqa: E501
        :type: bool
        """

        self._item_in_set = item_in_set

    @property
    def set_tag(self):
        """Gets the set_tag of this ContentPreview.  # noqa: E501


        :return: The set_tag of this ContentPreview.  # noqa: E501
        :rtype: str
        """
        return self._set_tag

    @set_tag.setter
    def set_tag(self, set_tag):
        """Sets the set_tag of this ContentPreview.


        :param set_tag: The set_tag of this ContentPreview.  # noqa: E501
        :type: str
        """

        self._set_tag = set_tag

    @property
    def set_nesting(self):
        """Gets the set_nesting of this ContentPreview.  # noqa: E501


        :return: The set_nesting of this ContentPreview.  # noqa: E501
        :rtype: int
        """
        return self._set_nesting

    @set_nesting.setter
    def set_nesting(self, set_nesting):
        """Sets the set_nesting of this ContentPreview.


        :param set_nesting: The set_nesting of this ContentPreview.  # noqa: E501
        :type: int
        """

        self._set_nesting = set_nesting

    @property
    def use_set_id(self):
        """Gets the use_set_id of this ContentPreview.  # noqa: E501


        :return: The use_set_id of this ContentPreview.  # noqa: E501
        :rtype: int
        """
        return self._use_set_id

    @use_set_id.setter
    def use_set_id(self, use_set_id):
        """Sets the use_set_id of this ContentPreview.


        :param use_set_id: The use_set_id of this ContentPreview.  # noqa: E501
        :type: int
        """

        self._use_set_id = use_set_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentPreview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
