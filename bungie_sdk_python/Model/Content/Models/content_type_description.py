# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.3.6
    Contact: support@bungie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ContentTypeDescription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'c_type': 'str',
        'name': 'str',
        'content_description': 'str',
        'preview_image': 'str',
        'priority': 'int',
        'reminder': 'str',
        'properties': 'list[ContentTypeProperty]',
        'tag_metadata': 'list[TagMetadataDefinition]',
        'tag_metadata_items': 'dict(str, TagMetadataItem)',
        'usage_examples': 'list[str]',
        'show_in_content_editor': 'bool',
        'type_of': 'str',
        'bind_identifier_to_property': 'str',
        'bound_regex': 'str',
        'force_identifier_binding': 'bool',
        'allow_comments': 'bool',
        'auto_english_property_fallback': 'bool',
        'bulk_uploadable': 'bool',
        'previews': 'list[ContentPreview]',
        'suppress_cms_path': 'bool',
        'property_sections': 'list[ContentTypePropertySection]'
    }

    attribute_map = {
        'c_type': 'cType',
        'name': 'name',
        'content_description': 'contentDescription',
        'preview_image': 'previewImage',
        'priority': 'priority',
        'reminder': 'reminder',
        'properties': 'properties',
        'tag_metadata': 'tagMetadata',
        'tag_metadata_items': 'tagMetadataItems',
        'usage_examples': 'usageExamples',
        'show_in_content_editor': 'showInContentEditor',
        'type_of': 'typeOf',
        'bind_identifier_to_property': 'bindIdentifierToProperty',
        'bound_regex': 'boundRegex',
        'force_identifier_binding': 'forceIdentifierBinding',
        'allow_comments': 'allowComments',
        'auto_english_property_fallback': 'autoEnglishPropertyFallback',
        'bulk_uploadable': 'bulkUploadable',
        'previews': 'previews',
        'suppress_cms_path': 'suppressCmsPath',
        'property_sections': 'propertySections'
    }

    def __init__(self, c_type=None, name=None, content_description=None, preview_image=None, priority=None, reminder=None, properties=None, tag_metadata=None, tag_metadata_items=None, usage_examples=None, show_in_content_editor=None, type_of=None, bind_identifier_to_property=None, bound_regex=None, force_identifier_binding=None, allow_comments=None, auto_english_property_fallback=None, bulk_uploadable=None, previews=None, suppress_cms_path=None, property_sections=None):  # noqa: E501
        """ContentTypeDescription - a model defined in OpenAPI"""  # noqa: E501

        self._c_type = None
        self._name = None
        self._content_description = None
        self._preview_image = None
        self._priority = None
        self._reminder = None
        self._properties = None
        self._tag_metadata = None
        self._tag_metadata_items = None
        self._usage_examples = None
        self._show_in_content_editor = None
        self._type_of = None
        self._bind_identifier_to_property = None
        self._bound_regex = None
        self._force_identifier_binding = None
        self._allow_comments = None
        self._auto_english_property_fallback = None
        self._bulk_uploadable = None
        self._previews = None
        self._suppress_cms_path = None
        self._property_sections = None
        self.discriminator = None

        if c_type is not None:
            self.c_type = c_type
        if name is not None:
            self.name = name
        if content_description is not None:
            self.content_description = content_description
        if preview_image is not None:
            self.preview_image = preview_image
        if priority is not None:
            self.priority = priority
        if reminder is not None:
            self.reminder = reminder
        if properties is not None:
            self.properties = properties
        if tag_metadata is not None:
            self.tag_metadata = tag_metadata
        if tag_metadata_items is not None:
            self.tag_metadata_items = tag_metadata_items
        if usage_examples is not None:
            self.usage_examples = usage_examples
        if show_in_content_editor is not None:
            self.show_in_content_editor = show_in_content_editor
        if type_of is not None:
            self.type_of = type_of
        if bind_identifier_to_property is not None:
            self.bind_identifier_to_property = bind_identifier_to_property
        if bound_regex is not None:
            self.bound_regex = bound_regex
        if force_identifier_binding is not None:
            self.force_identifier_binding = force_identifier_binding
        if allow_comments is not None:
            self.allow_comments = allow_comments
        if auto_english_property_fallback is not None:
            self.auto_english_property_fallback = auto_english_property_fallback
        if bulk_uploadable is not None:
            self.bulk_uploadable = bulk_uploadable
        if previews is not None:
            self.previews = previews
        if suppress_cms_path is not None:
            self.suppress_cms_path = suppress_cms_path
        if property_sections is not None:
            self.property_sections = property_sections

    @property
    def c_type(self):
        """Gets the c_type of this ContentTypeDescription.  # noqa: E501


        :return: The c_type of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._c_type

    @c_type.setter
    def c_type(self, c_type):
        """Sets the c_type of this ContentTypeDescription.


        :param c_type: The c_type of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._c_type = c_type

    @property
    def name(self):
        """Gets the name of this ContentTypeDescription.  # noqa: E501


        :return: The name of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentTypeDescription.


        :param name: The name of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def content_description(self):
        """Gets the content_description of this ContentTypeDescription.  # noqa: E501


        :return: The content_description of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._content_description

    @content_description.setter
    def content_description(self, content_description):
        """Sets the content_description of this ContentTypeDescription.


        :param content_description: The content_description of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._content_description = content_description

    @property
    def preview_image(self):
        """Gets the preview_image of this ContentTypeDescription.  # noqa: E501


        :return: The preview_image of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._preview_image

    @preview_image.setter
    def preview_image(self, preview_image):
        """Sets the preview_image of this ContentTypeDescription.


        :param preview_image: The preview_image of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._preview_image = preview_image

    @property
    def priority(self):
        """Gets the priority of this ContentTypeDescription.  # noqa: E501


        :return: The priority of this ContentTypeDescription.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ContentTypeDescription.


        :param priority: The priority of this ContentTypeDescription.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def reminder(self):
        """Gets the reminder of this ContentTypeDescription.  # noqa: E501


        :return: The reminder of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._reminder

    @reminder.setter
    def reminder(self, reminder):
        """Sets the reminder of this ContentTypeDescription.


        :param reminder: The reminder of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._reminder = reminder

    @property
    def properties(self):
        """Gets the properties of this ContentTypeDescription.  # noqa: E501


        :return: The properties of this ContentTypeDescription.  # noqa: E501
        :rtype: list[ContentTypeProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ContentTypeDescription.


        :param properties: The properties of this ContentTypeDescription.  # noqa: E501
        :type: list[ContentTypeProperty]
        """

        self._properties = properties

    @property
    def tag_metadata(self):
        """Gets the tag_metadata of this ContentTypeDescription.  # noqa: E501


        :return: The tag_metadata of this ContentTypeDescription.  # noqa: E501
        :rtype: list[TagMetadataDefinition]
        """
        return self._tag_metadata

    @tag_metadata.setter
    def tag_metadata(self, tag_metadata):
        """Sets the tag_metadata of this ContentTypeDescription.


        :param tag_metadata: The tag_metadata of this ContentTypeDescription.  # noqa: E501
        :type: list[TagMetadataDefinition]
        """

        self._tag_metadata = tag_metadata

    @property
    def tag_metadata_items(self):
        """Gets the tag_metadata_items of this ContentTypeDescription.  # noqa: E501


        :return: The tag_metadata_items of this ContentTypeDescription.  # noqa: E501
        :rtype: dict(str, TagMetadataItem)
        """
        return self._tag_metadata_items

    @tag_metadata_items.setter
    def tag_metadata_items(self, tag_metadata_items):
        """Sets the tag_metadata_items of this ContentTypeDescription.


        :param tag_metadata_items: The tag_metadata_items of this ContentTypeDescription.  # noqa: E501
        :type: dict(str, TagMetadataItem)
        """

        self._tag_metadata_items = tag_metadata_items

    @property
    def usage_examples(self):
        """Gets the usage_examples of this ContentTypeDescription.  # noqa: E501


        :return: The usage_examples of this ContentTypeDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._usage_examples

    @usage_examples.setter
    def usage_examples(self, usage_examples):
        """Sets the usage_examples of this ContentTypeDescription.


        :param usage_examples: The usage_examples of this ContentTypeDescription.  # noqa: E501
        :type: list[str]
        """

        self._usage_examples = usage_examples

    @property
    def show_in_content_editor(self):
        """Gets the show_in_content_editor of this ContentTypeDescription.  # noqa: E501


        :return: The show_in_content_editor of this ContentTypeDescription.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_content_editor

    @show_in_content_editor.setter
    def show_in_content_editor(self, show_in_content_editor):
        """Sets the show_in_content_editor of this ContentTypeDescription.


        :param show_in_content_editor: The show_in_content_editor of this ContentTypeDescription.  # noqa: E501
        :type: bool
        """

        self._show_in_content_editor = show_in_content_editor

    @property
    def type_of(self):
        """Gets the type_of of this ContentTypeDescription.  # noqa: E501


        :return: The type_of of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._type_of

    @type_of.setter
    def type_of(self, type_of):
        """Sets the type_of of this ContentTypeDescription.


        :param type_of: The type_of of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._type_of = type_of

    @property
    def bind_identifier_to_property(self):
        """Gets the bind_identifier_to_property of this ContentTypeDescription.  # noqa: E501


        :return: The bind_identifier_to_property of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._bind_identifier_to_property

    @bind_identifier_to_property.setter
    def bind_identifier_to_property(self, bind_identifier_to_property):
        """Sets the bind_identifier_to_property of this ContentTypeDescription.


        :param bind_identifier_to_property: The bind_identifier_to_property of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._bind_identifier_to_property = bind_identifier_to_property

    @property
    def bound_regex(self):
        """Gets the bound_regex of this ContentTypeDescription.  # noqa: E501


        :return: The bound_regex of this ContentTypeDescription.  # noqa: E501
        :rtype: str
        """
        return self._bound_regex

    @bound_regex.setter
    def bound_regex(self, bound_regex):
        """Sets the bound_regex of this ContentTypeDescription.


        :param bound_regex: The bound_regex of this ContentTypeDescription.  # noqa: E501
        :type: str
        """

        self._bound_regex = bound_regex

    @property
    def force_identifier_binding(self):
        """Gets the force_identifier_binding of this ContentTypeDescription.  # noqa: E501


        :return: The force_identifier_binding of this ContentTypeDescription.  # noqa: E501
        :rtype: bool
        """
        return self._force_identifier_binding

    @force_identifier_binding.setter
    def force_identifier_binding(self, force_identifier_binding):
        """Sets the force_identifier_binding of this ContentTypeDescription.


        :param force_identifier_binding: The force_identifier_binding of this ContentTypeDescription.  # noqa: E501
        :type: bool
        """

        self._force_identifier_binding = force_identifier_binding

    @property
    def allow_comments(self):
        """Gets the allow_comments of this ContentTypeDescription.  # noqa: E501


        :return: The allow_comments of this ContentTypeDescription.  # noqa: E501
        :rtype: bool
        """
        return self._allow_comments

    @allow_comments.setter
    def allow_comments(self, allow_comments):
        """Sets the allow_comments of this ContentTypeDescription.


        :param allow_comments: The allow_comments of this ContentTypeDescription.  # noqa: E501
        :type: bool
        """

        self._allow_comments = allow_comments

    @property
    def auto_english_property_fallback(self):
        """Gets the auto_english_property_fallback of this ContentTypeDescription.  # noqa: E501


        :return: The auto_english_property_fallback of this ContentTypeDescription.  # noqa: E501
        :rtype: bool
        """
        return self._auto_english_property_fallback

    @auto_english_property_fallback.setter
    def auto_english_property_fallback(self, auto_english_property_fallback):
        """Sets the auto_english_property_fallback of this ContentTypeDescription.


        :param auto_english_property_fallback: The auto_english_property_fallback of this ContentTypeDescription.  # noqa: E501
        :type: bool
        """

        self._auto_english_property_fallback = auto_english_property_fallback

    @property
    def bulk_uploadable(self):
        """Gets the bulk_uploadable of this ContentTypeDescription.  # noqa: E501


        :return: The bulk_uploadable of this ContentTypeDescription.  # noqa: E501
        :rtype: bool
        """
        return self._bulk_uploadable

    @bulk_uploadable.setter
    def bulk_uploadable(self, bulk_uploadable):
        """Sets the bulk_uploadable of this ContentTypeDescription.


        :param bulk_uploadable: The bulk_uploadable of this ContentTypeDescription.  # noqa: E501
        :type: bool
        """

        self._bulk_uploadable = bulk_uploadable

    @property
    def previews(self):
        """Gets the previews of this ContentTypeDescription.  # noqa: E501


        :return: The previews of this ContentTypeDescription.  # noqa: E501
        :rtype: list[ContentPreview]
        """
        return self._previews

    @previews.setter
    def previews(self, previews):
        """Sets the previews of this ContentTypeDescription.


        :param previews: The previews of this ContentTypeDescription.  # noqa: E501
        :type: list[ContentPreview]
        """

        self._previews = previews

    @property
    def suppress_cms_path(self):
        """Gets the suppress_cms_path of this ContentTypeDescription.  # noqa: E501


        :return: The suppress_cms_path of this ContentTypeDescription.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_cms_path

    @suppress_cms_path.setter
    def suppress_cms_path(self, suppress_cms_path):
        """Sets the suppress_cms_path of this ContentTypeDescription.


        :param suppress_cms_path: The suppress_cms_path of this ContentTypeDescription.  # noqa: E501
        :type: bool
        """

        self._suppress_cms_path = suppress_cms_path

    @property
    def property_sections(self):
        """Gets the property_sections of this ContentTypeDescription.  # noqa: E501


        :return: The property_sections of this ContentTypeDescription.  # noqa: E501
        :rtype: list[ContentTypePropertySection]
        """
        return self._property_sections

    @property_sections.setter
    def property_sections(self, property_sections):
        """Sets the property_sections of this ContentTypeDescription.


        :param property_sections: The property_sections of this ContentTypeDescription.  # noqa: E501
        :type: list[ContentTypePropertySection]
        """

        self._property_sections = property_sections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentTypeDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
